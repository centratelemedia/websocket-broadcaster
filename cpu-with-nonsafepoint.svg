<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (212 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (3 samples, 1.42%)</title><rect x="10.0" y="1235.0" width="16.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.94%)</title><rect x="10.0" y="1219.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.94%)</title><rect x="10.0" y="1203.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::loop_predicate(int, int, CompLevel, Method*) (2 samples, 0.94%)</title><rect x="10.0" y="1187.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.47%)</title><rect x="15.6" y="1171.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="18.6" y="1182.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.47%)</title><rect x="21.1" y="1219.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.1" y="1230.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.47%)</title><rect x="26.7" y="1235.0" width="5.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="29.7" y="1246.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.94%)</title><rect x="32.3" y="1235.0" width="11.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="35.3" y="1246.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.47%)</title><rect x="32.3" y="1219.0" width="5.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="35.3" y="1230.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.47%)</title><rect x="37.8" y="1219.0" width="5.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="40.8" y="1230.0"></text>
</g>
<g>
<title>__GI__IO_default_xsputn (1 samples, 0.47%)</title><rect x="43.4" y="1235.0" width="5.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="46.4" y="1246.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.47%)</title><rect x="49.0" y="1235.0" width="5.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="52.0" y="1246.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.47%)</title><rect x="49.0" y="1219.0" width="5.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="52.0" y="1230.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.47%)</title><rect x="49.0" y="1203.0" width="5.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="52.0" y="1214.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.47%)</title><rect x="49.0" y="1187.0" width="5.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="52.0" y="1198.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.47%)</title><rect x="49.0" y="1171.0" width="5.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="52.0" y="1182.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.47%)</title><rect x="49.0" y="1155.0" width="5.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="52.0" y="1166.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.47%)</title><rect x="49.0" y="1139.0" width="5.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="52.0" y="1150.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.47%)</title><rect x="49.0" y="1123.0" width="5.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="52.0" y="1134.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.47%)</title><rect x="49.0" y="1107.0" width="5.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="52.0" y="1118.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.47%)</title><rect x="49.0" y="1091.0" width="5.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="52.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (90 samples, 42.45%)</title><rect x="54.5" y="1235.0" width="501.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="57.5" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection$MainLoop.run (30 samples, 14.15%)</title><rect x="54.5" y="1219.0" width="167.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.5" y="1230.0">com/rabbitmq/client/i..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection.access$300 (15 samples, 7.08%)</title><rect x="54.5" y="1203.0" width="83.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="57.5" y="1214.0">com/rabbi..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection.readFrame (15 samples, 7.08%)</title><rect x="54.5" y="1187.0" width="83.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.5" y="1198.0">com/rabbi..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQChannel.handleFrame (15 samples, 7.08%)</title><rect x="54.5" y="1171.0" width="83.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="57.5" y="1182.0">com/rabbi..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQChannel.handleCompleteInboundCommand (9 samples, 4.25%)</title><rect x="54.5" y="1155.0" width="50.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="57.5" y="1166.0">com/r..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ChannelN.processAsync (8 samples, 3.77%)</title><rect x="60.1" y="1139.0" width="44.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.1" y="1150.0">com/..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ShutdownNotifierComponent.isOpen (1 samples, 0.47%)</title><rect x="60.1" y="1123.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="63.1" y="1134.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/recovery/RecoveryAwareChannelN.processDelivery (7 samples, 3.30%)</title><rect x="65.7" y="1123.0" width="38.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.7" y="1134.0">com..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ChannelN.processDelivery (7 samples, 3.30%)</title><rect x="65.7" y="1107.0" width="38.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.7" y="1118.0">com..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQCommand.getContentBody (1 samples, 0.47%)</title><rect x="65.7" y="1091.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.7" y="1102.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/CommandAssembler.getContentBody (1 samples, 0.47%)</title><rect x="65.7" y="1075.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.7" y="1086.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/CommandAssembler.coalesceContentBody (1 samples, 0.47%)</title><rect x="65.7" y="1059.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.7" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.47%)</title><rect x="65.7" y="1043.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.7" y="1054.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.handleDelivery (5 samples, 2.36%)</title><rect x="71.2" y="1091.0" width="27.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="74.2" y="1102.0">c..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.executeUnlessShuttingDown (5 samples, 2.36%)</title><rect x="71.2" y="1075.0" width="27.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.2" y="1086.0">c..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.execute (5 samples, 2.36%)</title><rect x="71.2" y="1059.0" width="27.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.2" y="1070.0">c..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.checkShutdown (1 samples, 0.47%)</title><rect x="71.2" y="1043.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.2" y="1054.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService.addWork (4 samples, 1.89%)</title><rect x="76.8" y="1043.0" width="22.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.8" y="1054.0">c..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool.addWorkItem (3 samples, 1.42%)</title><rect x="76.8" y="1027.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.8" y="1038.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool$$Lambda$169/1021184932.accept (1 samples, 0.47%)</title><rect x="76.8" y="1011.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.8" y="1022.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool.lambda$new$1 (1 samples, 0.47%)</title><rect x="76.8" y="995.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.8" y="1006.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/VariableLinkedBlockingQueue.put (1 samples, 0.47%)</title><rect x="76.8" y="979.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.8" y="990.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/VariableLinkedBlockingQueue.signalNotEmpty (1 samples, 0.47%)</title><rect x="76.8" y="963.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.47%)</title><rect x="76.8" y="947.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.47%)</title><rect x="76.8" y="931.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.47%)</title><rect x="76.8" y="915.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.47%)</title><rect x="76.8" y="899.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.47%)</title><rect x="76.8" y="883.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.8" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.47%)</title><rect x="76.8" y="867.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.8" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.47%)</title><rect x="76.8" y="851.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.8" y="862.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool.dormantToReady (2 samples, 0.94%)</title><rect x="82.4" y="1011.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.4" y="1022.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/SetQueue.addIfNotPresent (2 samples, 0.94%)</title><rect x="82.4" y="995.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.4" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedList.offer (1 samples, 0.47%)</title><rect x="87.9" y="979.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.9" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (1 samples, 0.47%)</title><rect x="87.9" y="963.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="90.9" y="974.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (1 samples, 0.47%)</title><rect x="87.9" y="947.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.47%)</title><rect x="93.5" y="1027.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.47%)</title><rect x="93.5" y="1011.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.47%)</title><rect x="93.5" y="995.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.47%)</title><rect x="93.5" y="979.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.47%)</title><rect x="93.5" y="963.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.47%)</title><rect x="93.5" y="947.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.47%)</title><rect x="93.5" y="931.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.5" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.47%)</title><rect x="93.5" y="915.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="96.5" y="926.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.47%)</title><rect x="93.5" y="899.0" width="5.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="96.5" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.47%)</title><rect x="93.5" y="883.0" width="5.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="96.5" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.47%)</title><rect x="93.5" y="867.0" width="5.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="96.5" y="878.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.47%)</title><rect x="93.5" y="851.0" width="5.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="96.5" y="862.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.47%)</title><rect x="93.5" y="835.0" width="5.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="96.5" y="846.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.47%)</title><rect x="93.5" y="819.0" width="5.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="96.5" y="830.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.15 (1 samples, 0.47%)</title><rect x="93.5" y="803.0" width="5.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="96.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.get (1 samples, 0.47%)</title><rect x="99.1" y="1091.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.47%)</title><rect x="99.1" y="1075.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.47%)</title><rect x="99.1" y="1059.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="102.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.47%)</title><rect x="99.1" y="1043.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.1" y="1054.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQCommand.handleFrame (6 samples, 2.83%)</title><rect x="104.6" y="1155.0" width="33.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.6" y="1166.0">co..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/CommandAssembler.handleFrame (6 samples, 2.83%)</title><rect x="104.6" y="1139.0" width="33.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.6" y="1150.0">co..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/CommandAssembler.consumeHeaderFrame (3 samples, 1.42%)</title><rect x="104.6" y="1123.0" width="16.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.6" y="1134.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQImpl.readContentHeaderFrom (2 samples, 0.94%)</title><rect x="110.2" y="1107.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.2" y="1118.0"></text>
</g>
<g>
<title>com/rabbitmq/client/AMQP$BasicProperties.&lt;init&gt; (2 samples, 0.94%)</title><rect x="110.2" y="1091.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.2" y="1102.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/CommandAssembler.consumeMethodFrame (2 samples, 0.94%)</title><rect x="121.3" y="1123.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.3" y="1134.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQImpl.readMethodFrom (2 samples, 0.94%)</title><rect x="121.3" y="1107.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.3" y="1118.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQImpl$Basic$Deliver.&lt;init&gt; (2 samples, 0.94%)</title><rect x="121.3" y="1091.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.3" y="1102.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/MethodArgumentReader.readShortstr (2 samples, 0.94%)</title><rect x="121.3" y="1075.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.3" y="1086.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ValueReader.readShortstr (2 samples, 0.94%)</title><rect x="121.3" y="1059.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.3" y="1070.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ValueReader.readShortstr (2 samples, 0.94%)</title><rect x="121.3" y="1043.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.3" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.47%)</title><rect x="121.3" y="1027.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="124.3" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.47%)</title><rect x="121.3" y="1011.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="124.3" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.47%)</title><rect x="121.3" y="995.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="124.3" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.47%)</title><rect x="121.3" y="979.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="124.3" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.47%)</title><rect x="121.3" y="963.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="124.3" y="974.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.47%)</title><rect x="121.3" y="947.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="124.3" y="958.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.47%)</title><rect x="121.3" y="931.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="124.3" y="942.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readFully (1 samples, 0.47%)</title><rect x="126.9" y="1027.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.9" y="1038.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readFully (1 samples, 0.47%)</title><rect x="126.9" y="1011.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="129.9" y="1022.0"></text>
</g>
<g>
<title>java/io/ByteArrayInputStream.read (1 samples, 0.47%)</title><rect x="126.9" y="995.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="129.9" y="1006.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/CommandAssembler.isComplete (1 samples, 0.47%)</title><rect x="132.5" y="1123.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.5" y="1134.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/SocketFrameHandler.readFrame (15 samples, 7.08%)</title><rect x="138.0" y="1203.0" width="83.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.0" y="1214.0">com/rabbi..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/Frame.readFrom (15 samples, 7.08%)</title><rect x="138.0" y="1187.0" width="83.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="141.0" y="1198.0">com/rabbi..</text>
</g>
<g>
<title>java/io/DataInputStream.readFully (1 samples, 0.47%)</title><rect x="138.0" y="1171.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.0" y="1182.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readFully (1 samples, 0.47%)</title><rect x="138.0" y="1155.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.0" y="1166.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (1 samples, 0.47%)</title><rect x="138.0" y="1139.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.0" y="1150.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.getBufIfOpen (1 samples, 0.47%)</title><rect x="138.0" y="1123.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.0" y="1134.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readUnsignedByte (14 samples, 6.60%)</title><rect x="143.6" y="1171.0" width="77.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.6" y="1182.0">java/io/D..</text>
</g>
<g>
<title>java/io/BufferedInputStream.read (14 samples, 6.60%)</title><rect x="143.6" y="1155.0" width="77.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.6" y="1166.0">java/io/B..</text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (14 samples, 6.60%)</title><rect x="143.6" y="1139.0" width="77.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.6" y="1150.0">java/io/B..</text>
</g>
<g>
<title>java/net/SocketInputStream.read (14 samples, 6.60%)</title><rect x="143.6" y="1123.0" width="77.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="146.6" y="1134.0">java/net/..</text>
</g>
<g>
<title>java/net/SocketInputStream.read (14 samples, 6.60%)</title><rect x="143.6" y="1107.0" width="77.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="146.6" y="1118.0">java/net/..</text>
</g>
<g>
<title>java/net/AbstractPlainSocketImpl.releaseFD (1 samples, 0.47%)</title><rect x="143.6" y="1091.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="146.6" y="1102.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (13 samples, 6.13%)</title><rect x="149.2" y="1091.0" width="72.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.2" y="1102.0">java/net..</text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (13 samples, 6.13%)</title><rect x="149.2" y="1075.0" width="72.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.2" y="1086.0">java/net..</text>
</g>
<g>
<title>__poll (7 samples, 3.30%)</title><rect x="149.2" y="1059.0" width="38.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="152.2" y="1070.0">__p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 2.83%)</title><rect x="154.7" y="1043.0" width="33.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="157.7" y="1054.0">en..</text>
</g>
<g>
<title>do_syscall_64 (6 samples, 2.83%)</title><rect x="154.7" y="1027.0" width="33.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="157.7" y="1038.0">do..</text>
</g>
<g>
<title>sys_poll (6 samples, 2.83%)</title><rect x="154.7" y="1011.0" width="33.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="157.7" y="1022.0">sy..</text>
</g>
<g>
<title>do_sys_poll (6 samples, 2.83%)</title><rect x="154.7" y="995.0" width="33.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="157.7" y="1006.0">do..</text>
</g>
<g>
<title>__fdget (1 samples, 0.47%)</title><rect x="154.7" y="979.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="157.7" y="990.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.47%)</title><rect x="154.7" y="963.0" width="5.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="157.7" y="974.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.47%)</title><rect x="154.7" y="947.0" width="5.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="157.7" y="958.0"></text>
</g>
<g>
<title>poll_schedule_timeout (1 samples, 0.47%)</title><rect x="160.3" y="979.0" width="5.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="163.3" y="990.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.47%)</title><rect x="160.3" y="963.0" width="5.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="163.3" y="974.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.47%)</title><rect x="160.3" y="947.0" width="5.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="163.3" y="958.0"></text>
</g>
<g>
<title>hrtimer_try_to_cancel (1 samples, 0.47%)</title><rect x="160.3" y="931.0" width="5.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="163.3" y="942.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.47%)</title><rect x="160.3" y="915.0" width="5.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="163.3" y="926.0"></text>
</g>
<g>
<title>sock_poll (4 samples, 1.89%)</title><rect x="165.8" y="979.0" width="22.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="168.8" y="990.0">s..</text>
</g>
<g>
<title>tcp_poll (3 samples, 1.42%)</title><rect x="171.4" y="963.0" width="16.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="174.4" y="974.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.47%)</title><rect x="188.1" y="1059.0" width="5.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="191.1" y="1070.0"></text>
</g>
<g>
<title>recv (5 samples, 2.36%)</title><rect x="193.7" y="1059.0" width="27.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="196.7" y="1070.0">r..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 2.36%)</title><rect x="193.7" y="1043.0" width="27.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="196.7" y="1054.0">e..</text>
</g>
<g>
<title>do_syscall_64 (5 samples, 2.36%)</title><rect x="193.7" y="1027.0" width="27.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="196.7" y="1038.0">d..</text>
</g>
<g>
<title>sys_recvfrom (5 samples, 2.36%)</title><rect x="193.7" y="1011.0" width="27.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="196.7" y="1022.0">s..</text>
</g>
<g>
<title>SYSC_recvfrom (5 samples, 2.36%)</title><rect x="193.7" y="995.0" width="27.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="196.7" y="1006.0">S..</text>
</g>
<g>
<title>sock_recvmsg (5 samples, 2.36%)</title><rect x="193.7" y="979.0" width="27.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="196.7" y="990.0">s..</text>
</g>
<g>
<title>inet_recvmsg (4 samples, 1.89%)</title><rect x="199.2" y="963.0" width="22.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="202.2" y="974.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (4 samples, 1.89%)</title><rect x="199.2" y="947.0" width="22.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="202.2" y="958.0">t..</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.47%)</title><rect x="199.2" y="931.0" width="5.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="202.2" y="942.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.47%)</title><rect x="199.2" y="915.0" width="5.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="202.2" y="926.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 1.42%)</title><rect x="204.8" y="931.0" width="16.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="207.8" y="942.0"></text>
</g>
<g>
<title>tcp_send_ack (2 samples, 0.94%)</title><rect x="210.4" y="915.0" width="11.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="213.4" y="926.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.39 (2 samples, 0.94%)</title><rect x="210.4" y="899.0" width="11.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="213.4" y="910.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (2 samples, 0.94%)</title><rect x="210.4" y="883.0" width="11.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="213.4" y="894.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.94%)</title><rect x="210.4" y="867.0" width="11.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="213.4" y="878.0"></text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.47%)</title><rect x="210.4" y="851.0" width="5.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="213.4" y="862.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.47%)</title><rect x="215.9" y="851.0" width="5.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="218.9" y="862.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.47%)</title><rect x="215.9" y="835.0" width="5.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="218.9" y="846.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.47%)</title><rect x="215.9" y="819.0" width="5.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="218.9" y="830.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.47%)</title><rect x="215.9" y="803.0" width="5.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="218.9" y="814.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.47%)</title><rect x="215.9" y="787.0" width="5.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="218.9" y="798.0"></text>
</g>
<g>
<title>do_softirq.part.17 (1 samples, 0.47%)</title><rect x="215.9" y="771.0" width="5.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="218.9" y="782.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.47%)</title><rect x="215.9" y="755.0" width="5.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="218.9" y="766.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.47%)</title><rect x="215.9" y="739.0" width="5.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="218.9" y="750.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.47%)</title><rect x="215.9" y="723.0" width="5.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="218.9" y="734.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.47%)</title><rect x="215.9" y="707.0" width="5.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="218.9" y="718.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.47%)</title><rect x="215.9" y="691.0" width="5.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="218.9" y="702.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.47%)</title><rect x="215.9" y="675.0" width="5.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="218.9" y="686.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.47%)</title><rect x="215.9" y="659.0" width="5.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="218.9" y="670.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.47%)</title><rect x="215.9" y="643.0" width="5.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="218.9" y="654.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.47%)</title><rect x="215.9" y="627.0" width="5.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="218.9" y="638.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.47%)</title><rect x="215.9" y="611.0" width="5.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="218.9" y="622.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.47%)</title><rect x="215.9" y="595.0" width="5.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="218.9" y="606.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.47%)</title><rect x="215.9" y="579.0" width="5.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="218.9" y="590.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.47%)</title><rect x="215.9" y="563.0" width="5.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="218.9" y="574.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.47%)</title><rect x="215.9" y="547.0" width="5.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="218.9" y="558.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.47%)</title><rect x="215.9" y="531.0" width="5.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="218.9" y="542.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.47%)</title><rect x="215.9" y="515.0" width="5.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="218.9" y="526.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.47%)</title><rect x="215.9" y="499.0" width="5.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="218.9" y="510.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.47%)</title><rect x="215.9" y="483.0" width="5.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="218.9" y="494.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (44 samples, 20.75%)</title><rect x="221.5" y="1219.0" width="244.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.5" y="1230.0">io/netty/util/concurrent/FastThr..</text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (44 samples, 20.75%)</title><rect x="221.5" y="1203.0" width="244.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.5" y="1214.0">io/netty/util/internal/ThreadExe..</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$5.run (44 samples, 20.75%)</title><rect x="221.5" y="1187.0" width="244.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.5" y="1198.0">io/netty/util/concurrent/SingleT..</text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.run (44 samples, 20.75%)</title><rect x="221.5" y="1171.0" width="244.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.5" y="1182.0">io/netty/channel/epoll/EpollEven..</text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.processReady (15 samples, 7.08%)</title><rect x="221.5" y="1155.0" width="83.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.5" y="1166.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady (15 samples, 7.08%)</title><rect x="221.5" y="1139.0" width="83.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.5" y="1150.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="1123.0" width="83.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.5" y="1134.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="1107.0" width="83.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.5" y="1118.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="1091.0" width="83.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.5" y="1102.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (15 samples, 7.08%)</title><rect x="221.5" y="1075.0" width="83.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.5" y="1086.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="1059.0" width="83.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.5" y="1070.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="1043.0" width="83.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.5" y="1054.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="1027.0" width="83.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="224.5" y="1038.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.channelRead (15 samples, 7.08%)</title><rect x="221.5" y="1011.0" width="83.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.5" y="1022.0">io/netty/..</text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelRead (15 samples, 7.08%)</title><rect x="221.5" y="995.0" width="83.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.5" y="1006.0">io/netty/..</text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.fireChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="979.0" width="83.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.5" y="990.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="963.0" width="83.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.5" y="974.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="947.0" width="83.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.5" y="958.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="931.0" width="83.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.5" y="942.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="915.0" width="83.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.5" y="926.0">io/netty/..</text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageDecoder.channelRead (15 samples, 7.08%)</title><rect x="221.5" y="899.0" width="83.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.5" y="910.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="883.0" width="83.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.5" y="894.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="867.0" width="83.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.5" y="878.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (15 samples, 7.08%)</title><rect x="221.5" y="851.0" width="83.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.5" y="862.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/SimpleChannelInboundHandler.channelRead (15 samples, 7.08%)</title><rect x="221.5" y="835.0" width="83.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.5" y="846.0">io/netty/..</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/HttpRequestHandler.channelRead0 (15 samples, 7.08%)</title><rect x="221.5" y="819.0" width="83.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.5" y="830.0">pbouda/br..</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/HttpRequestHandler.channelRead0 (15 samples, 7.08%)</title><rect x="221.5" y="803.0" width="83.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.5" y="814.0">pbouda/br..</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/route/PrometheusRoute.process (15 samples, 7.08%)</title><rect x="221.5" y="787.0" width="83.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.5" y="798.0">pbouda/br..</text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.scrape (15 samples, 7.08%)</title><rect x="221.5" y="771.0" width="83.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.5" y="782.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.scrape (15 samples, 7.08%)</title><rect x="221.5" y="755.0" width="83.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.5" y="766.0">io/microm..</text>
</g>
<g>
<title>io/prometheus/client/exporter/common/TextFormat.write004 (15 samples, 7.08%)</title><rect x="221.5" y="739.0" width="83.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.5" y="750.0">io/promet..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.47%)</title><rect x="221.5" y="723.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.5" y="734.0"></text>
</g>
<g>
<title>io/prometheus/client/CollectorRegistry$MetricFamilySamplesEnumeration.nextElement (14 samples, 6.60%)</title><rect x="227.1" y="723.0" width="77.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.1" y="734.0">io/promet..</text>
</g>
<g>
<title>io/prometheus/client/CollectorRegistry$MetricFamilySamplesEnumeration.nextElement (14 samples, 6.60%)</title><rect x="227.1" y="707.0" width="77.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.1" y="718.0">io/promet..</text>
</g>
<g>
<title>io/prometheus/client/CollectorRegistry$MetricFamilySamplesEnumeration.findNextElement (14 samples, 6.60%)</title><rect x="227.1" y="691.0" width="77.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.1" y="702.0">io/promet..</text>
</g>
<g>
<title>io/micrometer/prometheus/MicrometerCollector.collect (14 samples, 6.60%)</title><rect x="227.1" y="675.0" width="77.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.1" y="686.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry$$Lambda$122/841262455.samples (14 samples, 6.60%)</title><rect x="227.1" y="659.0" width="77.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.1" y="670.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.lambda$newGauge$3 (14 samples, 6.60%)</title><rect x="227.1" y="643.0" width="77.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.1" y="654.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/internal/DefaultGauge.value (14 samples, 6.60%)</title><rect x="227.1" y="627.0" width="77.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.1" y="638.0">io/microm..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/ProcessMemoryMetrics$$Lambda$154/1168420930.applyAsDouble (13 samples, 6.13%)</title><rect x="227.1" y="611.0" width="72.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.1" y="622.0">io/githu..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/ProcessMemoryMetrics.lambda$bindTo$0 (13 samples, 6.13%)</title><rect x="227.1" y="595.0" width="72.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.1" y="606.0">io/githu..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/ProcessMemoryMetrics.value (13 samples, 6.13%)</title><rect x="227.1" y="579.0" width="72.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.1" y="590.0">io/githu..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsSmaps.get (13 samples, 6.13%)</title><rect x="227.1" y="563.0" width="72.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.1" y="574.0">io/githu..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry.get (13 samples, 6.13%)</title><rect x="227.1" y="547.0" width="72.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.1" y="558.0">io/githu..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry.collect (13 samples, 6.13%)</title><rect x="227.1" y="531.0" width="72.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.1" y="542.0">io/githu..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsReader.read (13 samples, 6.13%)</title><rect x="227.1" y="515.0" width="72.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.1" y="526.0">io/githu..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsReader.readPath (13 samples, 6.13%)</title><rect x="227.1" y="499.0" width="72.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.1" y="510.0">io/githu..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry$$Lambda$183/819124446.accept (2 samples, 0.94%)</title><rect x="227.1" y="483.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.1" y="494.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry.lambda$collect$0 (2 samples, 0.94%)</title><rect x="227.1" y="467.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.1" y="478.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsSmaps.handle (2 samples, 0.94%)</title><rect x="227.1" y="451.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.1" y="462.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsSmaps.parseKiloBytes (2 samples, 0.94%)</title><rect x="227.1" y="435.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.1" y="446.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.matches (2 samples, 0.94%)</title><rect x="227.1" y="419.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.1" y="430.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.match (2 samples, 0.94%)</title><rect x="227.1" y="403.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.1" y="414.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Begin.match (2 samples, 0.94%)</title><rect x="227.1" y="387.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.1" y="398.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (2 samples, 0.94%)</title><rect x="227.1" y="371.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.1" y="382.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (2 samples, 0.94%)</title><rect x="227.1" y="355.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.1" y="366.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (2 samples, 0.94%)</title><rect x="227.1" y="339.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.1" y="350.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="232.6" y="323.0" width="5.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="235.6" y="334.0"></text>
</g>
<g>
<title>java/io/BufferedReader.readLine (11 samples, 5.19%)</title><rect x="238.2" y="483.0" width="61.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.2" y="494.0">java/i..</text>
</g>
<g>
<title>java/io/BufferedReader.readLine (11 samples, 5.19%)</title><rect x="238.2" y="467.0" width="61.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.2" y="478.0">java/i..</text>
</g>
<g>
<title>java/io/BufferedReader.fill (10 samples, 4.72%)</title><rect x="238.2" y="451.0" width="55.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.2" y="462.0">java/..</text>
</g>
<g>
<title>java/io/InputStreamReader.read (10 samples, 4.72%)</title><rect x="238.2" y="435.0" width="55.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.2" y="446.0">java/..</text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.read (10 samples, 4.72%)</title><rect x="238.2" y="419.0" width="55.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.2" y="430.0">sun/n..</text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.implRead (10 samples, 4.72%)</title><rect x="238.2" y="403.0" width="55.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.2" y="414.0">sun/n..</text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.readBytes (10 samples, 4.72%)</title><rect x="238.2" y="387.0" width="55.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.2" y="398.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.read (9 samples, 4.25%)</title><rect x="243.8" y="371.0" width="50.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.8" y="382.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.read (9 samples, 4.25%)</title><rect x="243.8" y="355.0" width="50.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.8" y="366.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.read (9 samples, 4.25%)</title><rect x="243.8" y="339.0" width="50.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.8" y="350.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (9 samples, 4.25%)</title><rect x="243.8" y="323.0" width="50.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.8" y="334.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 4.25%)</title><rect x="243.8" y="307.0" width="50.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.8" y="318.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 4.25%)</title><rect x="243.8" y="291.0" width="50.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.8" y="302.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read (9 samples, 4.25%)</title><rect x="243.8" y="275.0" width="50.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.8" y="286.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (9 samples, 4.25%)</title><rect x="243.8" y="259.0" width="50.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.8" y="270.0">sun/n..</text>
</g>
<g>
<title>[unknown] (9 samples, 4.25%)</title><rect x="243.8" y="243.0" width="50.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="246.8" y="254.0">[unkn..</text>
</g>
<g>
<title>__libc_read (9 samples, 4.25%)</title><rect x="243.8" y="227.0" width="50.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="246.8" y="238.0">__lib..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 4.25%)</title><rect x="243.8" y="211.0" width="50.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="246.8" y="222.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (9 samples, 4.25%)</title><rect x="243.8" y="195.0" width="50.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="246.8" y="206.0">do_sy..</text>
</g>
<g>
<title>sys_read (9 samples, 4.25%)</title><rect x="243.8" y="179.0" width="50.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="246.8" y="190.0">sys_r..</text>
</g>
<g>
<title>vfs_read (9 samples, 4.25%)</title><rect x="243.8" y="163.0" width="50.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="246.8" y="174.0">vfs_r..</text>
</g>
<g>
<title>__vfs_read (9 samples, 4.25%)</title><rect x="243.8" y="147.0" width="50.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="246.8" y="158.0">__vfs..</text>
</g>
<g>
<title>seq_read (9 samples, 4.25%)</title><rect x="243.8" y="131.0" width="50.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="246.8" y="142.0">seq_r..</text>
</g>
<g>
<title>show_pid_smap (9 samples, 4.25%)</title><rect x="243.8" y="115.0" width="50.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="246.8" y="126.0">show_..</text>
</g>
<g>
<title>seq_printf (1 samples, 0.47%)</title><rect x="243.8" y="99.0" width="5.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="246.8" y="110.0"></text>
</g>
<g>
<title>show_smap.isra.31 (8 samples, 3.77%)</title><rect x="249.3" y="99.0" width="44.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="252.3" y="110.0">show..</text>
</g>
<g>
<title>seq_printf (1 samples, 0.47%)</title><rect x="249.3" y="83.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="252.3" y="94.0"></text>
</g>
<g>
<title>seq_vprintf (1 samples, 0.47%)</title><rect x="249.3" y="67.0" width="5.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="252.3" y="78.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.47%)</title><rect x="249.3" y="51.0" width="5.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="252.3" y="62.0"></text>
</g>
<g>
<title>format_decode (1 samples, 0.47%)</title><rect x="249.3" y="35.0" width="5.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="252.3" y="46.0"></text>
</g>
<g>
<title>show_map_vma.isra.19 (1 samples, 0.47%)</title><rect x="254.9" y="83.0" width="5.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="257.9" y="94.0"></text>
</g>
<g>
<title>seq_file_path (1 samples, 0.47%)</title><rect x="254.9" y="67.0" width="5.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="257.9" y="78.0"></text>
</g>
<g>
<title>seq_path (1 samples, 0.47%)</title><rect x="254.9" y="51.0" width="5.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="257.9" y="62.0"></text>
</g>
<g>
<title>strchr (1 samples, 0.47%)</title><rect x="254.9" y="35.0" width="5.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="257.9" y="46.0"></text>
</g>
<g>
<title>walk_page_vma (6 samples, 2.83%)</title><rect x="260.5" y="83.0" width="33.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="263.5" y="94.0">wa..</text>
</g>
<g>
<title>__walk_page_range (6 samples, 2.83%)</title><rect x="260.5" y="67.0" width="33.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="263.5" y="78.0">__..</text>
</g>
<g>
<title>smaps_pte_range (6 samples, 2.83%)</title><rect x="260.5" y="51.0" width="33.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="263.5" y="62.0">sm..</text>
</g>
<g>
<title>_vm_normal_page (1 samples, 0.47%)</title><rect x="260.5" y="35.0" width="5.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="263.5" y="46.0"></text>
</g>
<g>
<title>smaps_account (5 samples, 2.36%)</title><rect x="266.0" y="35.0" width="27.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="269.0" y="46.0">s..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.47%)</title><rect x="293.9" y="451.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.9" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.47%)</title><rect x="293.9" y="435.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.9" y="446.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.47%)</title><rect x="293.9" y="419.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.9" y="430.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics$$Lambda$140/1472216456.applyAsDouble (1 samples, 0.47%)</title><rect x="299.4" y="611.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.4" y="622.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.lambda$bindTo$0 (1 samples, 0.47%)</title><rect x="299.4" y="595.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.4" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.getThreadStateCount (1 samples, 0.47%)</title><rect x="299.4" y="579.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.count (1 samples, 0.47%)</title><rect x="299.4" y="563.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.47%)</title><rect x="299.4" y="547.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$5.evaluateSequential (1 samples, 0.47%)</title><rect x="299.4" y="531.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$5.evaluateSequential (1 samples, 0.47%)</title><rect x="299.4" y="515.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.47%)</title><rect x="299.4" y="499.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.4" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="299.4" y="483.0" width="5.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="302.4" y="494.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (29 samples, 13.68%)</title><rect x="305.0" y="1155.0" width="161.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.0" y="1166.0">io/netty/util/concurr..</text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.safeExecute (29 samples, 13.68%)</title><rect x="305.0" y="1139.0" width="161.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="1150.0">io/netty/util/concurr..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.run (29 samples, 13.68%)</title><rect x="305.0" y="1123.0" width="161.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.0" y="1134.0">io/netty/channel/Abst..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.recycle (1 samples, 0.47%)</title><rect x="305.0" y="1107.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.0" y="1118.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (1 samples, 0.47%)</title><rect x="305.0" y="1091.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.0" y="1102.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (1 samples, 0.47%)</title><rect x="305.0" y="1075.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.0" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pushLater (1 samples, 0.47%)</title><rect x="305.0" y="1059.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.add (1 samples, 0.47%)</title><rect x="305.0" y="1043.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.0" y="1054.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.write (28 samples, 13.21%)</title><rect x="310.6" y="1107.0" width="155.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.6" y="1118.0">io/netty/channel/Abs..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.access$1700 (28 samples, 13.21%)</title><rect x="310.6" y="1091.0" width="155.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.6" y="1102.0">io/netty/channel/Abs..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (28 samples, 13.21%)</title><rect x="310.6" y="1075.0" width="155.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.6" y="1086.0">io/netty/channel/Abs..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (28 samples, 13.21%)</title><rect x="310.6" y="1059.0" width="155.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.6" y="1070.0">io/netty/channel/Abs..</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/SlowConsumerDisconnectHandler.write (28 samples, 13.21%)</title><rect x="310.6" y="1043.0" width="155.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.6" y="1054.0">pbouda/broadcaster/s..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (28 samples, 13.21%)</title><rect x="310.6" y="1027.0" width="155.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.6" y="1038.0">io/netty/channel/Abs..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.newPromise (1 samples, 0.47%)</title><rect x="310.6" y="1011.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.6" y="1022.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.&lt;init&gt; (1 samples, 0.47%)</title><rect x="310.6" y="995.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.6" y="1006.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectUtil.checkNotNull (1 samples, 0.47%)</title><rect x="310.6" y="979.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.6" y="990.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.47%)</title><rect x="310.6" y="963.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="313.6" y="974.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (27 samples, 12.74%)</title><rect x="316.1" y="1011.0" width="150.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.1" y="1022.0">io/netty/channel/Ab..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (27 samples, 12.74%)</title><rect x="316.1" y="995.0" width="150.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.1" y="1006.0">io/netty/channel/Ab..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (27 samples, 12.74%)</title><rect x="316.1" y="979.0" width="150.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.1" y="990.0">io/netty/channel/Ab..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (27 samples, 12.74%)</title><rect x="316.1" y="963.0" width="150.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="319.1" y="974.0">io/netty/channel/Ab..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.flush (27 samples, 12.74%)</title><rect x="316.1" y="947.0" width="150.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="319.1" y="958.0">io/netty/handler/st..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.doFlush (27 samples, 12.74%)</title><rect x="316.1" y="931.0" width="150.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.1" y="942.0">io/netty/handler/st..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.isWritable (1 samples, 0.47%)</title><rect x="316.1" y="915.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.1" y="926.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (17 samples, 8.02%)</title><rect x="321.7" y="915.0" width="94.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.7" y="926.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (17 samples, 8.02%)</title><rect x="321.7" y="899.0" width="94.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.7" y="910.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (17 samples, 8.02%)</title><rect x="321.7" y="883.0" width="94.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.7" y="894.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (17 samples, 8.02%)</title><rect x="321.7" y="867.0" width="94.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.7" y="878.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (17 samples, 8.02%)</title><rect x="321.7" y="851.0" width="94.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="324.7" y="862.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.flush0 (17 samples, 8.02%)</title><rect x="321.7" y="835.0" width="94.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="324.7" y="846.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (17 samples, 8.02%)</title><rect x="321.7" y="819.0" width="94.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.7" y="830.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.doWrite (17 samples, 8.02%)</title><rect x="321.7" y="803.0" width="94.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.7" y="814.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.doWriteSingle (17 samples, 8.02%)</title><rect x="321.7" y="787.0" width="94.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="324.7" y="798.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.writeBytes (17 samples, 8.02%)</title><rect x="321.7" y="771.0" width="94.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.7" y="782.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollChannel.doWriteBytes (16 samples, 7.55%)</title><rect x="327.3" y="755.0" width="89.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.3" y="766.0">io/netty/c..</text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.removeBytes (2 samples, 0.94%)</title><rect x="327.3" y="739.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.3" y="750.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.remove (2 samples, 0.94%)</title><rect x="327.3" y="723.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.3" y="734.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.safeRelease (2 samples, 0.94%)</title><rect x="327.3" y="707.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.3" y="718.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (1 samples, 0.47%)</title><rect x="332.8" y="691.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.8" y="702.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (1 samples, 0.47%)</title><rect x="332.8" y="675.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="335.8" y="686.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (1 samples, 0.47%)</title><rect x="332.8" y="659.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.8" y="670.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (1 samples, 0.47%)</title><rect x="332.8" y="643.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="335.8" y="654.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (1 samples, 0.47%)</title><rect x="332.8" y="627.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="335.8" y="638.0"></text>
</g>
<g>
<title>io/netty/channel/unix/FileDescriptor.writeAddress (14 samples, 6.60%)</title><rect x="338.4" y="739.0" width="77.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.4" y="750.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/unix/FileDescriptor.writeAddress (14 samples, 6.60%)</title><rect x="338.4" y="723.0" width="77.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="341.4" y="734.0">io/netty/..</text>
</g>
<g>
<title>[unknown] (13 samples, 6.13%)</title><rect x="344.0" y="707.0" width="72.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="347.0" y="718.0">[unknown]</text>
</g>
<g>
<title>__write (13 samples, 6.13%)</title><rect x="344.0" y="691.0" width="72.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="347.0" y="702.0">__write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 6.13%)</title><rect x="344.0" y="675.0" width="72.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="347.0" y="686.0">entry_SY..</text>
</g>
<g>
<title>do_syscall_64 (13 samples, 6.13%)</title><rect x="344.0" y="659.0" width="72.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="347.0" y="670.0">do_sysca..</text>
</g>
<g>
<title>sys_write (13 samples, 6.13%)</title><rect x="344.0" y="643.0" width="72.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="347.0" y="654.0">sys_write</text>
</g>
<g>
<title>vfs_write (13 samples, 6.13%)</title><rect x="344.0" y="627.0" width="72.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="347.0" y="638.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (13 samples, 6.13%)</title><rect x="344.0" y="611.0" width="72.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="347.0" y="622.0">__vfs_wr..</text>
</g>
<g>
<title>new_sync_write (13 samples, 6.13%)</title><rect x="344.0" y="595.0" width="72.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="347.0" y="606.0">new_sync..</text>
</g>
<g>
<title>sock_write_iter (13 samples, 6.13%)</title><rect x="344.0" y="579.0" width="72.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="347.0" y="590.0">sock_wri..</text>
</g>
<g>
<title>sock_sendmsg (13 samples, 6.13%)</title><rect x="344.0" y="563.0" width="72.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="347.0" y="574.0">sock_sen..</text>
</g>
<g>
<title>inet_sendmsg (12 samples, 5.66%)</title><rect x="344.0" y="547.0" width="66.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="347.0" y="558.0">inet_se..</text>
</g>
<g>
<title>tcp_sendmsg (12 samples, 5.66%)</title><rect x="344.0" y="531.0" width="66.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="347.0" y="542.0">tcp_sen..</text>
</g>
<g>
<title>release_sock (1 samples, 0.47%)</title><rect x="344.0" y="515.0" width="5.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="347.0" y="526.0"></text>
</g>
<g>
<title>__release_sock (1 samples, 0.47%)</title><rect x="344.0" y="499.0" width="5.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="347.0" y="510.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.47%)</title><rect x="344.0" y="483.0" width="5.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="347.0" y="494.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.47%)</title><rect x="344.0" y="467.0" width="5.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="347.0" y="478.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.47%)</title><rect x="344.0" y="451.0" width="5.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="347.0" y="462.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (11 samples, 5.19%)</title><rect x="349.5" y="515.0" width="61.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="352.5" y="526.0">tcp_se..</text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.94%)</title><rect x="349.5" y="499.0" width="11.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="352.5" y="510.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.94%)</title><rect x="349.5" y="483.0" width="11.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="352.5" y="494.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.43 (2 samples, 0.94%)</title><rect x="349.5" y="467.0" width="11.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="352.5" y="478.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (2 samples, 0.94%)</title><rect x="349.5" y="451.0" width="11.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="352.5" y="462.0"></text>
</g>
<g>
<title>tcp_push (9 samples, 4.25%)</title><rect x="360.7" y="499.0" width="50.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="363.7" y="510.0">tcp_p..</text>
</g>
<g>
<title>__tcp_push_pending_frames (8 samples, 3.77%)</title><rect x="366.2" y="483.0" width="44.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="369.2" y="494.0">__tc..</text>
</g>
<g>
<title>tcp_write_xmit (8 samples, 3.77%)</title><rect x="366.2" y="467.0" width="44.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="369.2" y="478.0">tcp_..</text>
</g>
<g>
<title>__tcp_transmit_skb (7 samples, 3.30%)</title><rect x="371.8" y="451.0" width="39.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="374.8" y="462.0">__t..</text>
</g>
<g>
<title>ip_queue_xmit (7 samples, 3.30%)</title><rect x="371.8" y="435.0" width="39.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="374.8" y="446.0">ip_..</text>
</g>
<g>
<title>ip_local_out (7 samples, 3.30%)</title><rect x="371.8" y="419.0" width="39.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="374.8" y="430.0">ip_..</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.94%)</title><rect x="371.8" y="403.0" width="11.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="374.8" y="414.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.47%)</title><rect x="377.4" y="387.0" width="5.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="380.4" y="398.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack_ipv4] (1 samples, 0.47%)</title><rect x="377.4" y="371.0" width="5.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="380.4" y="382.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (1 samples, 0.47%)</title><rect x="377.4" y="355.0" width="5.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="380.4" y="366.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (1 samples, 0.47%)</title><rect x="377.4" y="339.0" width="5.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="380.4" y="350.0"></text>
</g>
<g>
<title>ip_output (5 samples, 2.36%)</title><rect x="382.9" y="403.0" width="27.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="385.9" y="414.0">i..</text>
</g>
<g>
<title>ip_finish_output (5 samples, 2.36%)</title><rect x="382.9" y="387.0" width="27.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="385.9" y="398.0">i..</text>
</g>
<g>
<title>ip_finish_output2 (5 samples, 2.36%)</title><rect x="382.9" y="371.0" width="27.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="385.9" y="382.0">i..</text>
</g>
<g>
<title>__local_bh_enable_ip (5 samples, 2.36%)</title><rect x="382.9" y="355.0" width="27.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="385.9" y="366.0">_..</text>
</g>
<g>
<title>do_softirq.part.17 (5 samples, 2.36%)</title><rect x="382.9" y="339.0" width="27.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="385.9" y="350.0">d..</text>
</g>
<g>
<title>do_softirq_own_stack (5 samples, 2.36%)</title><rect x="382.9" y="323.0" width="27.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="385.9" y="334.0">d..</text>
</g>
<g>
<title>__softirqentry_text_start (5 samples, 2.36%)</title><rect x="382.9" y="307.0" width="27.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="385.9" y="318.0">_..</text>
</g>
<g>
<title>net_rx_action (5 samples, 2.36%)</title><rect x="382.9" y="291.0" width="27.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="385.9" y="302.0">n..</text>
</g>
<g>
<title>process_backlog (5 samples, 2.36%)</title><rect x="382.9" y="275.0" width="27.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="385.9" y="286.0">p..</text>
</g>
<g>
<title>__netif_receive_skb (4 samples, 1.89%)</title><rect x="388.5" y="259.0" width="22.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="391.5" y="270.0">_..</text>
</g>
<g>
<title>__netif_receive_skb_core (4 samples, 1.89%)</title><rect x="388.5" y="243.0" width="22.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="391.5" y="254.0">_..</text>
</g>
<g>
<title>ip_rcv (4 samples, 1.89%)</title><rect x="388.5" y="227.0" width="22.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="391.5" y="238.0">i..</text>
</g>
<g>
<title>ip_rcv_finish (3 samples, 1.42%)</title><rect x="388.5" y="211.0" width="16.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="391.5" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver (3 samples, 1.42%)</title><rect x="388.5" y="195.0" width="16.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="391.5" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 1.42%)</title><rect x="388.5" y="179.0" width="16.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="391.5" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (3 samples, 1.42%)</title><rect x="388.5" y="163.0" width="16.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="391.5" y="174.0"></text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.47%)</title><rect x="388.5" y="147.0" width="5.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="391.5" y="158.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.47%)</title><rect x="394.1" y="147.0" width="5.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="397.1" y="158.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.47%)</title><rect x="394.1" y="131.0" width="5.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="397.1" y="142.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.47%)</title><rect x="399.6" y="147.0" width="5.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="402.6" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.47%)</title><rect x="399.6" y="131.0" width="5.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="402.6" y="142.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.47%)</title><rect x="399.6" y="115.0" width="5.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="402.6" y="126.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.47%)</title><rect x="399.6" y="99.0" width="5.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="402.6" y="110.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.47%)</title><rect x="405.2" y="211.0" width="5.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="408.2" y="222.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (1 samples, 0.47%)</title><rect x="405.2" y="195.0" width="5.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="408.2" y="206.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.47%)</title><rect x="410.8" y="547.0" width="5.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="413.8" y="558.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.47%)</title><rect x="410.8" y="531.0" width="5.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="413.8" y="542.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.47%)</title><rect x="410.8" y="515.0" width="5.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="413.8" y="526.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.47%)</title><rect x="410.8" y="499.0" width="5.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="413.8" y="510.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.47%)</title><rect x="410.8" y="483.0" width="5.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="413.8" y="494.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (9 samples, 4.25%)</title><rect x="416.3" y="915.0" width="50.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.3" y="926.0">io/ne..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (9 samples, 4.25%)</title><rect x="416.3" y="899.0" width="50.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.3" y="910.0">io/ne..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (9 samples, 4.25%)</title><rect x="416.3" y="883.0" width="50.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="419.3" y="894.0">io/ne..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (9 samples, 4.25%)</title><rect x="416.3" y="867.0" width="50.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.3" y="878.0">io/ne..</text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (9 samples, 4.25%)</title><rect x="416.3" y="851.0" width="50.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.3" y="862.0">io/ne..</text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.encode (8 samples, 3.77%)</title><rect x="416.3" y="835.0" width="44.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.3" y="846.0">io/n..</text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.encode (8 samples, 3.77%)</title><rect x="416.3" y="819.0" width="44.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="419.3" y="830.0">io/n..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (3 samples, 1.42%)</title><rect x="416.3" y="803.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="419.3" y="814.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (3 samples, 1.42%)</title><rect x="416.3" y="787.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="419.3" y="798.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (2 samples, 0.94%)</title><rect x="421.9" y="771.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.9" y="782.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.setBytes (2 samples, 0.94%)</title><rect x="421.9" y="755.0" width="11.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="424.9" y="766.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setBytes (2 samples, 0.94%)</title><rect x="421.9" y="739.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.9" y="750.0"></text>
</g>
<g>
<title>io/netty/util/internal/MathUtil.isOutOfBounds (1 samples, 0.47%)</title><rect x="421.9" y="723.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.9" y="734.0"></text>
</g>
<g>
<title>io/netty/buffer/DuplicatedByteBuf.capacity (1 samples, 0.47%)</title><rect x="421.9" y="707.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="424.9" y="718.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.copyMemory (1 samples, 0.47%)</title><rect x="427.5" y="723.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.5" y="734.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.copyMemory (1 samples, 0.47%)</title><rect x="427.5" y="707.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.5" y="718.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.buffer (5 samples, 2.36%)</title><rect x="433.0" y="803.0" width="27.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="436.0" y="814.0">i..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (5 samples, 2.36%)</title><rect x="433.0" y="787.0" width="27.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.0" y="798.0">i..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (5 samples, 2.36%)</title><rect x="433.0" y="771.0" width="27.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.0" y="782.0">i..</text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (5 samples, 2.36%)</title><rect x="433.0" y="755.0" width="27.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.0" y="766.0">i..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (1 samples, 0.47%)</title><rect x="433.0" y="739.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="436.0" y="750.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (1 samples, 0.47%)</title><rect x="433.0" y="723.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="436.0" y="734.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (1 samples, 0.47%)</title><rect x="433.0" y="707.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.0" y="718.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (4 samples, 1.89%)</title><rect x="438.6" y="739.0" width="22.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.6" y="750.0">i..</text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (4 samples, 1.89%)</title><rect x="438.6" y="723.0" width="22.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="441.6" y="734.0">i..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.47%)</title><rect x="438.6" y="707.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.6" y="718.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateTiny (3 samples, 1.42%)</title><rect x="444.2" y="707.0" width="16.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="447.2" y="718.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocate (3 samples, 1.42%)</title><rect x="444.2" y="691.0" width="16.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="447.2" y="702.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (3 samples, 1.42%)</title><rect x="444.2" y="675.0" width="16.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.2" y="686.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$SubPageMemoryRegionCache.initBuf (2 samples, 0.94%)</title><rect x="444.2" y="659.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="447.2" y="670.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (2 samples, 0.94%)</title><rect x="444.2" y="643.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="447.2" y="654.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (2 samples, 0.94%)</title><rect x="444.2" y="627.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="447.2" y="638.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.runOffset (1 samples, 0.47%)</title><rect x="444.2" y="611.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="447.2" y="622.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.runLength (1 samples, 0.47%)</title><rect x="444.2" y="595.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.2" y="606.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.threadCache (1 samples, 0.47%)</title><rect x="449.7" y="611.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.7" y="622.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (1 samples, 0.47%)</title><rect x="449.7" y="595.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.7" y="606.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (1 samples, 0.47%)</title><rect x="449.7" y="579.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.7" y="590.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueue.poll (1 samples, 0.47%)</title><rect x="455.3" y="659.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.3" y="670.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (1 samples, 0.47%)</title><rect x="460.8" y="835.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="463.8" y="846.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.encode (1 samples, 0.47%)</title><rect x="460.8" y="819.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (16 samples, 7.55%)</title><rect x="466.4" y="1219.0" width="89.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.4" y="1230.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (16 samples, 7.55%)</title><rect x="466.4" y="1203.0" width="89.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.4" y="1214.0">java/util/..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.47%)</title><rect x="472.0" y="1187.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.0" y="1198.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService$WorkPoolRunnable.run (10 samples, 4.72%)</title><rect x="477.5" y="1187.0" width="55.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.5" y="1198.0">com/r..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher$5.run (9 samples, 4.25%)</title><rect x="483.1" y="1171.0" width="50.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="486.1" y="1182.0">com/r..</text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDelivery (9 samples, 4.25%)</title><rect x="483.1" y="1155.0" width="50.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="486.1" y="1166.0">pboud..</text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDeliveryInternal (9 samples, 4.25%)</title><rect x="483.1" y="1139.0" width="50.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.1" y="1150.0">pboud..</text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (3 samples, 1.42%)</title><rect x="483.1" y="1123.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.1" y="1134.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (3 samples, 1.42%)</title><rect x="483.1" y="1107.0" width="16.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.1" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (3 samples, 1.42%)</title><rect x="483.1" y="1091.0" width="16.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="486.1" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.safeDuplicate (1 samples, 0.47%)</title><rect x="483.1" y="1075.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="486.1" y="1086.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.retainedDuplicate (1 samples, 0.47%)</title><rect x="483.1" y="1059.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.1" y="1070.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.retainedDuplicate (1 samples, 0.47%)</title><rect x="483.1" y="1043.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="486.1" y="1054.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocketFrame.retainedDuplicate (1 samples, 0.47%)</title><rect x="483.1" y="1027.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="486.1" y="1038.0"></text>
</g>
<g>
<title>io/netty/buffer/DefaultByteBufHolder.retainedDuplicate (1 samples, 0.47%)</title><rect x="483.1" y="1011.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="486.1" y="1022.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.retainedDuplicate (1 samples, 0.47%)</title><rect x="483.1" y="995.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.1" y="1006.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractDerivedByteBuf.retain (1 samples, 0.47%)</title><rect x="483.1" y="979.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="486.1" y="990.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroupFuture.&lt;init&gt; (2 samples, 0.94%)</title><rect x="488.7" y="1075.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.7" y="1086.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.addListener (1 samples, 0.47%)</title><rect x="488.7" y="1059.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="491.7" y="1070.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.addListener (1 samples, 0.47%)</title><rect x="488.7" y="1043.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="491.7" y="1054.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.addListener (1 samples, 0.47%)</title><rect x="488.7" y="1027.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.7" y="1038.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.isDone (1 samples, 0.47%)</title><rect x="488.7" y="1011.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="491.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.47%)</title><rect x="494.2" y="1059.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.2" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.47%)</title><rect x="494.2" y="1043.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="497.2" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="494.2" y="1027.0" width="5.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="497.2" y="1038.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.&lt;init&gt; (4 samples, 1.89%)</title><rect x="499.8" y="1123.0" width="22.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="502.8" y="1134.0">i..</text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.fromText (4 samples, 1.89%)</title><rect x="499.8" y="1107.0" width="22.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="502.8" y="1118.0">i..</text>
</g>
<g>
<title>io/netty/buffer/Unpooled.copiedBuffer (4 samples, 1.89%)</title><rect x="499.8" y="1091.0" width="22.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.8" y="1102.0">i..</text>
</g>
<g>
<title>io/netty/buffer/Unpooled.copiedBuffer (2 samples, 0.94%)</title><rect x="505.4" y="1075.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="508.4" y="1086.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.encodeString0 (2 samples, 0.94%)</title><rect x="505.4" y="1059.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="508.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (2 samples, 0.94%)</title><rect x="505.4" y="1043.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.4" y="1054.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (2 samples, 0.94%)</title><rect x="505.4" y="1027.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.4" y="1038.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeBufferLoop (2 samples, 0.94%)</title><rect x="505.4" y="1011.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.4" y="1022.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (1 samples, 0.47%)</title><rect x="516.5" y="1075.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.5" y="1086.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (1 samples, 0.47%)</title><rect x="516.5" y="1059.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.5" y="1070.0"></text>
</g>
<g>
<title>java/nio/StringCharBuffer.&lt;init&gt; (1 samples, 0.47%)</title><rect x="516.5" y="1043.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.5" y="1054.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.&lt;init&gt; (1 samples, 0.47%)</title><rect x="516.5" y="1027.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.5" y="1038.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.&lt;init&gt; (1 samples, 0.47%)</title><rect x="516.5" y="1011.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.5" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.47%)</title><rect x="516.5" y="995.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.5" y="1006.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.47%)</title><rect x="516.5" y="979.0" width="5.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="519.5" y="990.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.94%)</title><rect x="522.1" y="1123.0" width="11.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="525.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.94%)</title><rect x="522.1" y="1107.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="525.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (2 samples, 0.94%)</title><rect x="522.1" y="1091.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (1 samples, 0.47%)</title><rect x="527.6" y="1075.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="530.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8_0 (1 samples, 0.47%)</title><rect x="527.6" y="1059.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="530.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.89%)</title><rect x="533.2" y="1187.0" width="22.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="536.2" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.89%)</title><rect x="533.2" y="1171.0" width="22.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="536.2" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.89%)</title><rect x="533.2" y="1155.0" width="22.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="536.2" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.47%)</title><rect x="533.2" y="1139.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 1.42%)</title><rect x="538.8" y="1139.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="541.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 1.42%)</title><rect x="538.8" y="1123.0" width="16.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="541.8" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 1.42%)</title><rect x="538.8" y="1107.0" width="16.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="541.8" y="1118.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.47%)</title><rect x="544.3" y="1091.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="547.3" y="1102.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.47%)</title><rect x="544.3" y="1075.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="547.3" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.47%)</title><rect x="549.9" y="1091.0" width="5.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="552.9" y="1102.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.47%)</title><rect x="549.9" y="1075.0" width="5.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="552.9" y="1086.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.47%)</title><rect x="549.9" y="1059.0" width="5.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="552.9" y="1070.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.47%)</title><rect x="555.5" y="1235.0" width="5.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="558.5" y="1246.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.47%)</title><rect x="555.5" y="1219.0" width="5.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="558.5" y="1230.0"></text>
</g>
<g>
<title>start_thread (113 samples, 53.30%)</title><rect x="561.0" y="1235.0" width="629.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="564.0" y="1246.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (113 samples, 53.30%)</title><rect x="561.0" y="1219.0" width="629.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="564.0" y="1230.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (113 samples, 53.30%)</title><rect x="561.0" y="1203.0" width="629.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="564.0" y="1214.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::run() (111 samples, 52.36%)</title><rect x="561.0" y="1187.0" width="617.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="564.0" y="1198.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (111 samples, 52.36%)</title><rect x="561.0" y="1171.0" width="617.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="564.0" y="1182.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (109 samples, 51.42%)</title><rect x="561.0" y="1155.0" width="606.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="564.0" y="1166.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (109 samples, 51.42%)</title><rect x="561.0" y="1139.0" width="606.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="564.0" y="1150.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (85 samples, 40.09%)</title><rect x="561.0" y="1123.0" width="473.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="564.0" y="1134.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (85 samples, 40.09%)</title><rect x="561.0" y="1107.0" width="473.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="564.0" y="1118.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 23.11%)</title><rect x="561.0" y="1091.0" width="272.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="564.0" y="1102.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.47%)</title><rect x="561.0" y="1075.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="564.0" y="1086.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.47%)</title><rect x="561.0" y="1059.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="564.0" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.47%)</title><rect x="566.6" y="1075.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="569.6" y="1086.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.47%)</title><rect x="566.6" y="1059.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="569.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::end_scopes(int, bool) (1 samples, 0.47%)</title><rect x="566.6" y="1043.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="569.6" y="1054.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.47%)</title><rect x="572.2" y="1075.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="575.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.83%)</title><rect x="577.7" y="1075.0" width="33.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="580.7" y="1086.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.47%)</title><rect x="577.7" y="1059.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="580.7" y="1070.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.47%)</title><rect x="577.7" y="1043.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="580.7" y="1054.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.36%)</title><rect x="583.3" y="1059.0" width="27.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="586.3" y="1070.0">M..</text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.47%)</title><rect x="583.3" y="1043.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="586.3" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.47%)</title><rect x="583.3" y="1027.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="586.3" y="1038.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.47%)</title><rect x="583.3" y="1011.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="586.3" y="1022.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 1.89%)</title><rect x="588.9" y="1043.0" width="22.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="591.9" y="1054.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.94%)</title><rect x="594.4" y="1027.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="597.4" y="1038.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.47%)</title><rect x="594.4" y="1011.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="597.4" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.47%)</title><rect x="594.4" y="995.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="597.4" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.47%)</title><rect x="594.4" y="979.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="597.4" y="990.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.47%)</title><rect x="594.4" y="963.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="597.4" y="974.0"></text>
</g>
<g>
<title>TypeLong::singleton() const (1 samples, 0.47%)</title><rect x="600.0" y="1011.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="603.0" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.47%)</title><rect x="605.6" y="1027.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="608.6" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.47%)</title><rect x="605.6" y="1011.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="608.6" y="1022.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.47%)</title><rect x="605.6" y="995.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="608.6" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (11 samples, 5.19%)</title><rect x="611.1" y="1075.0" width="61.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="614.1" y="1086.0">PhaseC..</text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.47%)</title><rect x="611.1" y="1059.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="614.1" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.47%)</title><rect x="616.7" y="1059.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="619.7" y="1070.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.47%)</title><rect x="616.7" y="1043.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="619.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 4.25%)</title><rect x="622.3" y="1059.0" width="50.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="625.3" y="1070.0">Phase..</text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.47%)</title><rect x="622.3" y="1043.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="625.3" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (4 samples, 1.89%)</title><rect x="627.8" y="1043.0" width="22.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="630.8" y="1054.0">P..</text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 1.42%)</title><rect x="627.8" y="1027.0" width="16.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="630.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.47%)</title><rect x="644.5" y="1027.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="647.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.94%)</title><rect x="650.1" y="1043.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="653.1" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.47%)</title><rect x="655.7" y="1027.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="658.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.47%)</title><rect x="661.2" y="1043.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="664.2" y="1054.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.47%)</title><rect x="666.8" y="1043.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="669.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (29 samples, 13.68%)</title><rect x="672.4" y="1075.0" width="161.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="675.4" y="1086.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (2 samples, 0.94%)</title><rect x="672.4" y="1059.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="675.4" y="1070.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.47%)</title><rect x="683.5" y="1059.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="686.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.47%)</title><rect x="689.1" y="1059.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="692.1" y="1070.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.47%)</title><rect x="689.1" y="1043.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="692.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.47%)</title><rect x="694.6" y="1059.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="697.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.47%)</title><rect x="694.6" y="1043.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="697.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.83%)</title><rect x="700.2" y="1059.0" width="33.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="703.2" y="1070.0">Ph..</text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.47%)</title><rect x="722.5" y="1043.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="725.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::prompt_use(Block*, unsigned int) (1 samples, 0.47%)</title><rect x="728.0" y="1043.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="731.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.42%)</title><rect x="733.6" y="1059.0" width="16.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="736.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.47%)</title><rect x="733.6" y="1043.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="736.6" y="1054.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.47%)</title><rect x="733.6" y="1027.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="736.6" y="1038.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.47%)</title><rect x="733.6" y="1011.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="736.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.94%)</title><rect x="739.2" y="1043.0" width="11.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="742.2" y="1054.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.47%)</title><rect x="744.7" y="1027.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="747.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.94%)</title><rect x="750.3" y="1059.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="753.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.94%)</title><rect x="750.3" y="1043.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="753.3" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="755.8" y="1027.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="758.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.42%)</title><rect x="761.4" y="1059.0" width="16.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="764.4" y="1070.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.94%)</title><rect x="767.0" y="1043.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="770.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 2.83%)</title><rect x="778.1" y="1059.0" width="33.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="781.1" y="1070.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.42%)</title><rect x="794.8" y="1043.0" width="16.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="797.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.47%)</title><rect x="811.5" y="1059.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="814.5" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.47%)</title><rect x="811.5" y="1043.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="814.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.94%)</title><rect x="817.1" y="1059.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="820.1" y="1070.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.47%)</title><rect x="817.1" y="1043.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.1" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="822.6" y="1043.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="825.6" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.47%)</title><rect x="828.2" y="1059.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="831.2" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.47%)</title><rect x="828.2" y="1043.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="831.2" y="1054.0"></text>
</g>
<g>
<title>Compile::Init(int) (1 samples, 0.47%)</title><rect x="833.8" y="1091.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="836.8" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::DebugInformationRecorder(OopRecorder*) (1 samples, 0.47%)</title><rect x="833.8" y="1075.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="836.8" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 8.02%)</title><rect x="839.3" y="1091.0" width="94.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.3" y="1102.0">Compile::Op..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.94%)</title><rect x="839.3" y="1075.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="842.3" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.94%)</title><rect x="839.3" y="1059.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.3" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) [clone .part.252] (1 samples, 0.47%)</title><rect x="844.9" y="1043.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="847.9" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.256] (1 samples, 0.47%)</title><rect x="850.5" y="1075.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.5" y="1086.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.47%)</title><rect x="850.5" y="1059.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="853.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.94%)</title><rect x="856.0" y="1075.0" width="11.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="859.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.94%)</title><rect x="856.0" y="1059.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="859.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.94%)</title><rect x="867.2" y="1075.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="870.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (5 samples, 2.36%)</title><rect x="878.3" y="1075.0" width="27.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="881.3" y="1086.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.94%)</title><rect x="878.3" y="1059.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="881.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.47%)</title><rect x="889.4" y="1059.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.47%)</title><rect x="895.0" y="1059.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.47%)</title><rect x="895.0" y="1043.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="898.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.47%)</title><rect x="895.0" y="1027.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.47%)</title><rect x="895.0" y="1011.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="898.0" y="1022.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.47%)</title><rect x="895.0" y="995.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="898.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.47%)</title><rect x="900.6" y="1059.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="903.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.89%)</title><rect x="906.1" y="1075.0" width="22.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="909.1" y="1086.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.42%)</title><rect x="911.7" y="1059.0" width="16.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="914.7" y="1070.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="911.7" y="1043.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="914.7" y="1054.0"></text>
</g>
<g>
<title>IfNode::search_identical(int) (1 samples, 0.47%)</title><rect x="911.7" y="1027.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="914.7" y="1038.0"></text>
</g>
<g>
<title>IfNode::search_identical(int) (1 samples, 0.47%)</title><rect x="917.3" y="1043.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="920.3" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="922.8" y="1043.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="925.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.47%)</title><rect x="922.8" y="1027.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="925.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.47%)</title><rect x="922.8" y="1011.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.8" y="1022.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.47%)</title><rect x="922.8" y="995.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="925.8" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.47%)</title><rect x="928.4" y="1075.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.4" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (1 samples, 0.47%)</title><rect x="928.4" y="1059.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="931.4" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (1 samples, 0.47%)</title><rect x="928.4" y="1043.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="931.4" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_unchecked_arraycopy(Node**, MergeMemNode**, TypePtr const*, BasicType, bool, Node*, Node*, Node*, Node*, Node*, bool) (1 samples, 0.47%)</title><rect x="928.4" y="1027.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.4" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::array_element_address(Node*, Node*, BasicType) (1 samples, 0.47%)</title><rect x="928.4" y="1011.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.4" y="1022.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.47%)</title><rect x="928.4" y="995.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.4" y="1006.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.47%)</title><rect x="928.4" y="979.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="931.4" y="990.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.47%)</title><rect x="928.4" y="963.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.4" y="974.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.47%)</title><rect x="934.0" y="1091.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.0" y="1102.0"></text>
</g>
<g>
<title>DictI::operator++() (1 samples, 0.47%)</title><rect x="934.0" y="1075.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="937.0" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 6.60%)</title><rect x="939.5" y="1091.0" width="78.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="942.5" y="1102.0">ParseGene..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 6.60%)</title><rect x="939.5" y="1075.0" width="78.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.5" y="1086.0">Parse::Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 6.60%)</title><rect x="939.5" y="1059.0" width="78.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.5" y="1070.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 6.60%)</title><rect x="939.5" y="1043.0" width="78.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="942.5" y="1054.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 6.60%)</title><rect x="939.5" y="1027.0" width="78.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="942.5" y="1038.0">Parse::do..</text>
</g>
<g>
<title>Parse::do_call() (13 samples, 6.13%)</title><rect x="939.5" y="1011.0" width="72.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="942.5" y="1022.0">Parse::d..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="939.5" y="995.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="942.5" y="1006.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.47%)</title><rect x="939.5" y="979.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.5" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="939.5" y="963.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.5" y="974.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.47%)</title><rect x="939.5" y="947.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.5" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.30%)</title><rect x="945.1" y="995.0" width="39.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.1" y="1006.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.30%)</title><rect x="945.1" y="979.0" width="39.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.1" y="990.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.30%)</title><rect x="945.1" y="963.0" width="39.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="948.1" y="974.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.30%)</title><rect x="945.1" y="947.0" width="39.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="948.1" y="958.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.30%)</title><rect x="945.1" y="931.0" width="39.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.1" y="942.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.30%)</title><rect x="945.1" y="915.0" width="39.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.1" y="926.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="945.1" y="899.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="948.1" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="945.1" y="883.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.1" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.47%)</title><rect x="945.1" y="867.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.1" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.47%)</title><rect x="945.1" y="851.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.1" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.47%)</title><rect x="945.1" y="835.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.1" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="945.1" y="819.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.1" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="945.1" y="803.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.1" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.47%)</title><rect x="945.1" y="787.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.1" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.47%)</title><rect x="945.1" y="771.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.1" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.47%)</title><rect x="945.1" y="755.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="948.1" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="945.1" y="739.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.1" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="945.1" y="723.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="948.1" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="945.1" y="707.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.1" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="945.1" y="691.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="948.1" y="702.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="945.1" y="675.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.1" y="686.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.47%)</title><rect x="945.1" y="659.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="948.1" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.47%)</title><rect x="945.1" y="643.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.1" y="654.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.47%)</title><rect x="945.1" y="627.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="948.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.83%)</title><rect x="950.7" y="899.0" width="33.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="953.7" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.83%)</title><rect x="950.7" y="883.0" width="33.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="953.7" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.83%)</title><rect x="950.7" y="867.0" width="33.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.7" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.83%)</title><rect x="950.7" y="851.0" width="33.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.7" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.83%)</title><rect x="950.7" y="835.0" width="33.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="953.7" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.83%)</title><rect x="950.7" y="819.0" width="33.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="953.7" y="830.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="950.7" y="803.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.7" y="814.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.47%)</title><rect x="950.7" y="787.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="953.7" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="950.7" y="771.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="953.7" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="950.7" y="755.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="953.7" y="766.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="950.7" y="739.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.7" y="750.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.47%)</title><rect x="950.7" y="723.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="953.7" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.47%)</title><rect x="950.7" y="707.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.7" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="950.7" y="691.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="953.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.36%)</title><rect x="956.2" y="803.0" width="27.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="959.2" y="814.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.36%)</title><rect x="956.2" y="787.0" width="27.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="959.2" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.36%)</title><rect x="956.2" y="771.0" width="27.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.2" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.36%)</title><rect x="956.2" y="755.0" width="27.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="959.2" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.36%)</title><rect x="956.2" y="739.0" width="27.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.2" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.89%)</title><rect x="956.2" y="723.0" width="22.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="959.2" y="734.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.89%)</title><rect x="956.2" y="707.0" width="22.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="959.2" y="718.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.89%)</title><rect x="956.2" y="691.0" width="22.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="959.2" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.89%)</title><rect x="956.2" y="675.0" width="22.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="959.2" y="686.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.89%)</title><rect x="956.2" y="659.0" width="22.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.2" y="670.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.89%)</title><rect x="956.2" y="643.0" width="22.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="959.2" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.42%)</title><rect x="956.2" y="627.0" width="16.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="959.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="956.2" y="611.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="959.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="956.2" y="595.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="959.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="956.2" y="579.0" width="11.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="959.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="956.2" y="563.0" width="11.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="959.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="956.2" y="547.0" width="11.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="959.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="961.8" y="531.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="961.8" y="515.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="961.8" y="499.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="964.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="961.8" y="483.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="961.8" y="467.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="961.8" y="451.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="961.8" y="435.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="964.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="961.8" y="419.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="964.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="961.8" y="403.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="964.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="961.8" y="387.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="964.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="961.8" y="371.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="964.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="961.8" y="355.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="964.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="961.8" y="339.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="964.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="961.8" y="323.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="964.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="961.8" y="307.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="964.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="961.8" y="291.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="964.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="961.8" y="275.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="964.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="961.8" y="259.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="964.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.47%)</title><rect x="961.8" y="243.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.47%)</title><rect x="961.8" y="227.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="964.8" y="238.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.47%)</title><rect x="961.8" y="211.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="964.8" y="222.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.47%)</title><rect x="961.8" y="195.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.8" y="206.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.47%)</title><rect x="961.8" y="179.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="964.8" y="190.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.47%)</title><rect x="961.8" y="163.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.8" y="174.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.47%)</title><rect x="961.8" y="147.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="964.8" y="158.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.47%)</title><rect x="961.8" y="131.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.8" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="961.8" y="115.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.8" y="126.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.47%)</title><rect x="961.8" y="99.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.8" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_appendix() (1 samples, 0.47%)</title><rect x="967.4" y="611.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="970.4" y="622.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.47%)</title><rect x="967.4" y="595.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="970.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_instanceof() (1 samples, 0.47%)</title><rect x="972.9" y="627.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.9" y="638.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.47%)</title><rect x="972.9" y="611.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.47%)</title><rect x="972.9" y="595.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.9" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="972.9" y="579.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.9" y="590.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.47%)</title><rect x="972.9" y="563.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.47%)</title><rect x="978.5" y="723.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.47%)</title><rect x="978.5" y="707.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.5" y="718.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.47%)</title><rect x="978.5" y="691.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.5" y="702.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.47%)</title><rect x="978.5" y="675.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.5" y="686.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.47%)</title><rect x="978.5" y="659.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.5" y="670.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.47%)</title><rect x="978.5" y="643.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.5" y="654.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.47%)</title><rect x="978.5" y="627.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="981.5" y="638.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.47%)</title><rect x="978.5" y="611.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.5" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="978.5" y="595.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.5" y="606.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="978.5" y="579.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.5" y="590.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="978.5" y="563.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.5" y="574.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.239] (1 samples, 0.47%)</title><rect x="978.5" y="547.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.5" y="558.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.47%)</title><rect x="978.5" y="531.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="981.5" y="542.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.47%)</title><rect x="978.5" y="515.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.5" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 2.36%)</title><rect x="984.1" y="995.0" width="27.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.1" y="1006.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.89%)</title><rect x="984.1" y="979.0" width="22.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.1" y="990.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.89%)</title><rect x="984.1" y="963.0" width="22.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.1" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.89%)</title><rect x="984.1" y="947.0" width="22.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.1" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.89%)</title><rect x="984.1" y="931.0" width="22.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="987.1" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.89%)</title><rect x="984.1" y="915.0" width="22.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.1" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.89%)</title><rect x="984.1" y="899.0" width="22.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.1" y="910.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="984.1" y="883.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.1" y="894.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="984.1" y="867.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.1" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.47%)</title><rect x="984.1" y="851.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.1" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.47%)</title><rect x="984.1" y="835.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.1" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.47%)</title><rect x="984.1" y="819.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.1" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="984.1" y="803.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.1" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="984.1" y="787.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.1" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.47%)</title><rect x="984.1" y="771.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.1" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.47%)</title><rect x="984.1" y="755.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="987.1" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.47%)</title><rect x="984.1" y="739.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.1" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="984.1" y="723.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="987.1" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="984.1" y="707.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.1" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="984.1" y="691.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.1" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="984.1" y="675.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.1" y="686.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="984.1" y="659.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.1" y="670.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.47%)</title><rect x="984.1" y="643.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.1" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.47%)</title><rect x="984.1" y="627.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.1" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="984.1" y="611.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="989.6" y="883.0" width="11.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="989.6" y="867.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="989.6" y="851.0" width="11.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="989.6" y="835.0" width="11.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="992.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="989.6" y="819.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="989.6" y="803.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="989.6" y="787.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="989.6" y="771.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="989.6" y="755.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="989.6" y="739.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="989.6" y="723.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="989.6" y="707.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="989.6" y="691.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="989.6" y="675.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="989.6" y="659.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="989.6" y="643.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="989.6" y="627.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="989.6" y="611.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="989.6" y="595.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="989.6" y="579.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="989.6" y="563.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="989.6" y="547.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="989.6" y="531.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="989.6" y="515.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.6" y="526.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.47%)</title><rect x="989.6" y="499.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.6" y="510.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.47%)</title><rect x="989.6" y="483.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.6" y="494.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.47%)</title><rect x="989.6" y="467.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.6" y="478.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="989.6" y="451.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.6" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="989.6" y="435.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.6" y="446.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.47%)</title><rect x="989.6" y="419.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.47%)</title><rect x="995.2" y="803.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="998.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.47%)</title><rect x="995.2" y="787.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="998.2" y="798.0"></text>
</g>
<g>
<title>ciMetadata::is_instance_klass() const (1 samples, 0.47%)</title><rect x="995.2" y="771.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="998.2" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1000.8" y="883.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1003.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1000.8" y="867.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1003.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1000.8" y="851.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1000.8" y="835.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1003.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1000.8" y="819.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1003.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1000.8" y="803.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1003.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1000.8" y="787.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1003.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1000.8" y="771.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1000.8" y="755.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1003.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1000.8" y="739.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1003.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1000.8" y="723.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1003.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1000.8" y="707.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1003.8" y="718.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.47%)</title><rect x="1000.8" y="691.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.8" y="702.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.47%)</title><rect x="1000.8" y="675.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.8" y="686.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.47%)</title><rect x="1000.8" y="659.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1003.8" y="670.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.47%)</title><rect x="1000.8" y="643.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1003.8" y="654.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.47%)</title><rect x="1000.8" y="627.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1003.8" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1006.3" y="979.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1006.3" y="963.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1009.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1006.3" y="947.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1006.3" y="931.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1006.3" y="915.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1006.3" y="899.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1009.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1006.3" y="883.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1006.3" y="867.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1006.3" y="851.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1006.3" y="835.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1006.3" y="819.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1006.3" y="803.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1006.3" y="787.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1009.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1006.3" y="771.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1006.3" y="755.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1006.3" y="739.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1009.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1006.3" y="723.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1006.3" y="707.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1006.3" y="691.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1006.3" y="675.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1006.3" y="659.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1009.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1006.3" y="643.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1009.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1006.3" y="627.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1006.3" y="611.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1006.3" y="595.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1009.3" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1006.3" y="579.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.3" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="1006.3" y="563.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.3" y="574.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.47%)</title><rect x="1006.3" y="547.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.47%)</title><rect x="1006.3" y="531.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1009.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.47%)</title><rect x="1006.3" y="515.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1009.3" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1006.3" y="499.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.3" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1006.3" y="483.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.3" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.47%)</title><rect x="1006.3" y="467.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1009.3" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.47%)</title><rect x="1006.3" y="451.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.3" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.47%)</title><rect x="1006.3" y="435.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.3" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.47%)</title><rect x="1006.3" y="419.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.3" y="430.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.47%)</title><rect x="1006.3" y="403.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1009.3" y="414.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.47%)</title><rect x="1006.3" y="387.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.3" y="398.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_in_package(char const*, int) (1 samples, 0.47%)</title><rect x="1006.3" y="371.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.47%)</title><rect x="1011.9" y="1011.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.47%)</title><rect x="1011.9" y="995.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.9" y="1006.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.47%)</title><rect x="1011.9" y="979.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.9" y="990.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.47%)</title><rect x="1011.9" y="963.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.9" y="974.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.94%)</title><rect x="1017.5" y="1091.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1020.5" y="1102.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.47%)</title><rect x="1017.5" y="1075.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.5" y="1086.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.47%)</title><rect x="1017.5" y="1059.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.5" y="1070.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.47%)</title><rect x="1023.0" y="1075.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.0" y="1086.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.47%)</title><rect x="1028.6" y="1091.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1031.6" y="1102.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.47%)</title><rect x="1028.6" y="1075.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.6" y="1086.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.47%)</title><rect x="1028.6" y="1059.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.6" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (23 samples, 10.85%)</title><rect x="1034.2" y="1123.0" width="128.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1037.2" y="1134.0">Compiler::compil..</text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.47%)</title><rect x="1034.2" y="1107.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.2" y="1118.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.47%)</title><rect x="1034.2" y="1091.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.2" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (22 samples, 10.38%)</title><rect x="1039.7" y="1107.0" width="122.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1042.7" y="1118.0">Compilation::Co..</text>
</g>
<g>
<title>Compilation::compile_method() (22 samples, 10.38%)</title><rect x="1039.7" y="1091.0" width="122.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.7" y="1102.0">Compilation::co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (21 samples, 9.91%)</title><rect x="1039.7" y="1075.0" width="116.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.7" y="1086.0">Compilation::c..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (10 samples, 4.72%)</title><rect x="1039.7" y="1059.0" width="55.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.7" y="1070.0">Compi..</text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (9 samples, 4.25%)</title><rect x="1039.7" y="1043.0" width="50.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.7" y="1054.0">IR::I..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (9 samples, 4.25%)</title><rect x="1039.7" y="1027.0" width="50.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1042.7" y="1038.0">IRSco..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (9 samples, 4.25%)</title><rect x="1039.7" y="1011.0" width="50.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.7" y="1022.0">Graph..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (7 samples, 3.30%)</title><rect x="1039.7" y="995.0" width="39.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1042.7" y="1006.0">Gra..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (7 samples, 3.30%)</title><rect x="1039.7" y="979.0" width="39.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1042.7" y="990.0">Gra..</text>
</g>
<g>
<title>GraphBuilder::if_zero(ValueType*, Instruction::Condition) (1 samples, 0.47%)</title><rect x="1039.7" y="963.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1042.7" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.47%)</title><rect x="1039.7" y="947.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.7" y="958.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.47%)</title><rect x="1039.7" y="931.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.7" y="942.0"></text>
</g>
<g>
<title>Constant::hash() const (1 samples, 0.47%)</title><rect x="1039.7" y="915.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1042.7" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 2.83%)</title><rect x="1045.3" y="963.0" width="33.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.3" y="974.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 2.36%)</title><rect x="1045.3" y="947.0" width="27.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.3" y="958.0">G..</text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 2.36%)</title><rect x="1045.3" y="931.0" width="27.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.3" y="942.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 2.36%)</title><rect x="1045.3" y="915.0" width="27.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.3" y="926.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 2.36%)</title><rect x="1045.3" y="899.0" width="27.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.3" y="910.0">G..</text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 2.36%)</title><rect x="1045.3" y="883.0" width="27.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.3" y="894.0">G..</text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 1.89%)</title><rect x="1045.3" y="867.0" width="22.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1048.3" y="878.0">G..</text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 1.89%)</title><rect x="1045.3" y="851.0" width="22.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.3" y="862.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 1.42%)</title><rect x="1045.3" y="835.0" width="16.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.3" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 1.42%)</title><rect x="1045.3" y="819.0" width="16.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.3" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.47%)</title><rect x="1045.3" y="803.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1048.3" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.47%)</title><rect x="1045.3" y="787.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.3" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.47%)</title><rect x="1045.3" y="771.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.3" y="782.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.47%)</title><rect x="1045.3" y="755.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.3" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1045.3" y="739.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.3" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.47%)</title><rect x="1045.3" y="723.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.3" y="734.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.47%)</title><rect x="1045.3" y="707.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.3" y="718.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.47%)</title><rect x="1045.3" y="691.0" width="5.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1048.3" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.47%)</title><rect x="1045.3" y="675.0" width="5.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1048.3" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.47%)</title><rect x="1045.3" y="659.0" width="5.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1048.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.94%)</title><rect x="1050.8" y="803.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.8" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.94%)</title><rect x="1050.8" y="787.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.8" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.94%)</title><rect x="1050.8" y="771.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1053.8" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.94%)</title><rect x="1050.8" y="755.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.8" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.94%)</title><rect x="1050.8" y="739.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.8" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.94%)</title><rect x="1050.8" y="723.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.8" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.47%)</title><rect x="1050.8" y="707.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.8" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.47%)</title><rect x="1050.8" y="691.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.8" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.47%)</title><rect x="1050.8" y="675.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.8" y="686.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.47%)</title><rect x="1050.8" y="659.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.8" y="670.0"></text>
</g>
<g>
<title>XHandlers::XHandlers(ciMethod*) (1 samples, 0.47%)</title><rect x="1050.8" y="643.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.8" y="654.0"></text>
</g>
<g>
<title>ciMethod::load_code() (1 samples, 0.47%)</title><rect x="1050.8" y="627.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.8" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.47%)</title><rect x="1056.4" y="707.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1056.4" y="691.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.4" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1056.4" y="675.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1059.4" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1056.4" y="659.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.4" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1056.4" y="643.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.4" y="654.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1056.4" y="627.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.4" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.47%)</title><rect x="1056.4" y="611.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.4" y="622.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.47%)</title><rect x="1056.4" y="595.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.4" y="606.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.47%)</title><rect x="1062.0" y="835.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.0" y="846.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.47%)</title><rect x="1062.0" y="819.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.0" y="830.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.47%)</title><rect x="1062.0" y="803.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1065.0" y="814.0"></text>
</g>
<g>
<title>MethodData::next_data(ProfileData*) const (1 samples, 0.47%)</title><rect x="1062.0" y="787.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.0" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.47%)</title><rect x="1067.5" y="867.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.5" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1067.5" y="851.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.5" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1067.5" y="835.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.5" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1067.5" y="819.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.5" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1067.5" y="803.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.5" y="814.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.47%)</title><rect x="1067.5" y="787.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.5" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.47%)</title><rect x="1073.1" y="947.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.1" y="958.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.47%)</title><rect x="1073.1" y="931.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.1" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::setup_start_block(int, BlockBegin*, BlockBegin*, ValueStack*) (2 samples, 0.94%)</title><rect x="1078.7" y="995.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.7" y="1006.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.47%)</title><rect x="1078.7" y="979.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.7" y="990.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.47%)</title><rect x="1084.2" y="979.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.2" y="990.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.47%)</title><rect x="1084.2" y="963.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.2" y="974.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.47%)</title><rect x="1089.8" y="1043.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.8" y="1054.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.47%)</title><rect x="1089.8" y="1027.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1092.8" y="1038.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.47%)</title><rect x="1089.8" y="1011.0" width="5.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1092.8" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (5 samples, 2.36%)</title><rect x="1095.4" y="1059.0" width="27.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.4" y="1070.0">C..</text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (3 samples, 1.42%)</title><rect x="1095.4" y="1043.0" width="16.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1098.4" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.47%)</title><rect x="1095.4" y="1027.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.4" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.47%)</title><rect x="1100.9" y="1027.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.9" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.47%)</title><rect x="1100.9" y="1011.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.9" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.47%)</title><rect x="1100.9" y="995.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.9" y="1006.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.47%)</title><rect x="1100.9" y="979.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.9" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::safepoint_poll(LIR_OprDesc*, CodeEmitInfo*) (1 samples, 0.47%)</title><rect x="1106.5" y="1027.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.5" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::add_debug_info_for_branch(CodeEmitInfo*) (1 samples, 0.47%)</title><rect x="1106.5" y="1011.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.5" y="1022.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.47%)</title><rect x="1106.5" y="995.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.5" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.47%)</title><rect x="1106.5" y="979.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.5" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.47%)</title><rect x="1106.5" y="963.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.5" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (2 samples, 0.94%)</title><rect x="1112.1" y="1043.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.1" y="1054.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.47%)</title><rect x="1112.1" y="1027.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.1" y="1038.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 0.47%)</title><rect x="1112.1" y="1011.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.1" y="1022.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.47%)</title><rect x="1112.1" y="995.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.1" y="1006.0"></text>
</g>
<g>
<title>ImplicitNullCheckStub::emit_code(LIR_Assembler*) (1 samples, 0.47%)</title><rect x="1117.6" y="1027.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.6" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (6 samples, 2.83%)</title><rect x="1123.2" y="1059.0" width="33.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.2" y="1070.0">Co..</text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.47%)</title><rect x="1123.2" y="1043.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.2" y="1054.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.47%)</title><rect x="1123.2" y="1027.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.2" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::receiverOpr() (1 samples, 0.47%)</title><rect x="1123.2" y="1011.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.2" y="1022.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (5 samples, 2.36%)</title><rect x="1128.8" y="1043.0" width="27.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.8" y="1054.0">L..</text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.94%)</title><rect x="1128.8" y="1027.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.8" y="1038.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.232] (2 samples, 0.94%)</title><rect x="1128.8" y="1011.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.8" y="1022.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (2 samples, 0.94%)</title><rect x="1128.8" y="995.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.8" y="1006.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.47%)</title><rect x="1128.8" y="979.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.8" y="990.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.47%)</title><rect x="1134.3" y="979.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.3" y="990.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (2 samples, 0.94%)</title><rect x="1139.9" y="1027.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.9" y="1038.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (2 samples, 0.94%)</title><rect x="1139.9" y="1011.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.9" y="1022.0"></text>
</g>
<g>
<title>LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode) (1 samples, 0.47%)</title><rect x="1139.9" y="995.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.9" y="1006.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.47%)</title><rect x="1139.9" y="979.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.9" y="990.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (1 samples, 0.47%)</title><rect x="1145.5" y="995.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.5" y="1006.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.47%)</title><rect x="1145.5" y="979.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.5" y="990.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.47%)</title><rect x="1145.5" y="963.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.5" y="974.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.47%)</title><rect x="1151.0" y="1027.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.0" y="1038.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.47%)</title><rect x="1151.0" y="1011.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.0" y="1022.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.47%)</title><rect x="1151.0" y="995.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.0" y="1006.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.47%)</title><rect x="1151.0" y="979.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.0" y="990.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.47%)</title><rect x="1151.0" y="963.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.0" y="974.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.47%)</title><rect x="1151.0" y="947.0" width="5.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1154.0" y="958.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.47%)</title><rect x="1156.6" y="1075.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="1086.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.47%)</title><rect x="1156.6" y="1059.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="1070.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.47%)</title><rect x="1156.6" y="1043.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.47%)</title><rect x="1162.2" y="1123.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.2" y="1134.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1162.2" y="1107.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.2" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1162.2" y="1091.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.2" y="1102.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1162.2" y="1075.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.2" y="1086.0"></text>
</g>
<g>
<title>Method::can_be_statically_bound() const (1 samples, 0.47%)</title><rect x="1162.2" y="1059.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.2" y="1070.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.94%)</title><rect x="1167.7" y="1155.0" width="11.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.7" y="1166.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.94%)</title><rect x="1167.7" y="1139.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="1150.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.94%)</title><rect x="1167.7" y="1123.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.7" y="1134.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.94%)</title><rect x="1167.7" y="1107.0" width="11.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1170.7" y="1118.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.47%)</title><rect x="1173.3" y="1091.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="1102.0"></text>
</g>
<g>
<title>VMError::is_error_reported() (1 samples, 0.47%)</title><rect x="1178.9" y="1187.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="1198.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.47%)</title><rect x="1184.4" y="1187.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="1198.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.47%)</title><rect x="1184.4" y="1171.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="1182.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.47%)</title><rect x="1184.4" y="1155.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="1166.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.47%)</title><rect x="1184.4" y="1139.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="1150.0"></text>
</g>
</g>
</svg>
