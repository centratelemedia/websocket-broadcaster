<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1670" onload="init(evt)" viewBox="0 0 1200 1670" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1653"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1653"> </text>
<g id="frames">
<g>
<title>all (10,810 samples, 100.00%)</title><rect x="10.0" y="1619.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1630.0">all</text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (6 samples, 0.06%)</title><rect x="10.0" y="1603.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (6 samples, 0.06%)</title><rect x="10.0" y="1587.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (6 samples, 0.06%)</title><rect x="10.0" y="1571.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null_helper(Symbol*, Handle, Handle, Thread*) (6 samples, 0.06%)</title><rect x="10.0" y="1555.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (6 samples, 0.06%)</title><rect x="10.0" y="1539.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (6 samples, 0.06%)</title><rect x="10.0" y="1523.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (4 samples, 0.04%)</title><rect x="10.2" y="1507.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.2" y="1518.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (4 samples, 0.04%)</title><rect x="10.2" y="1491.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.2" y="1502.0"></text>
</g>
<g>
<title>CodeCache::flush_dependents_on(InstanceKlass*) (4 samples, 0.04%)</title><rect x="10.2" y="1475.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.2" y="1486.0"></text>
</g>
<g>
<title>CodeCache::mark_for_deoptimization(KlassDepChange&amp;) (4 samples, 0.04%)</title><rect x="10.2" y="1459.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.2" y="1470.0"></text>
</g>
<g>
<title>nmethod::check_all_dependencies(DepChange&amp;) (4 samples, 0.04%)</title><rect x="10.2" y="1443.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.2" y="1454.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (80 samples, 0.74%)</title><rect x="11.1" y="1603.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.1" y="1614.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (75 samples, 0.69%)</title><rect x="11.3" y="1587.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.3" y="1598.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (75 samples, 0.69%)</title><rect x="11.3" y="1571.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.3" y="1582.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (70 samples, 0.65%)</title><rect x="11.6" y="1555.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.6" y="1566.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (19 samples, 0.18%)</title><rect x="13.7" y="1539.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.7" y="1550.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (18 samples, 0.17%)</title><rect x="13.7" y="1523.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.7" y="1534.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (18 samples, 0.17%)</title><rect x="13.7" y="1507.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.7" y="1518.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (18 samples, 0.17%)</title><rect x="13.7" y="1491.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.7" y="1502.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, HeapRegionType, bool) (18 samples, 0.17%)</title><rect x="13.7" y="1475.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.7" y="1486.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_free_region(HeapRegionType) (18 samples, 0.17%)</title><rect x="13.7" y="1459.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.7" y="1470.0"></text>
</g>
<g>
<title>FreeRegionList::verify() (18 samples, 0.17%)</title><rect x="13.7" y="1443.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.7" y="1454.0"></text>
</g>
<g>
<title>FreeRegionList::verify_list() (18 samples, 0.17%)</title><rect x="13.7" y="1427.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.7" y="1438.0"></text>
</g>
<g>
<title>HeapRegionSetBase::verify_region(HeapRegion*) (15 samples, 0.14%)</title><rect x="14.0" y="1411.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.0" y="1422.0"></text>
</g>
<g>
<title>page_fault (32 samples, 0.30%)</title><rect x="15.8" y="1539.0" width="3.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="18.8" y="1550.0"></text>
</g>
<g>
<title>do_page_fault (32 samples, 0.30%)</title><rect x="15.8" y="1523.0" width="3.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="18.8" y="1534.0"></text>
</g>
<g>
<title>__do_page_fault (32 samples, 0.30%)</title><rect x="15.8" y="1507.0" width="3.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="18.8" y="1518.0"></text>
</g>
<g>
<title>handle_mm_fault (19 samples, 0.18%)</title><rect x="17.2" y="1491.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="20.2" y="1502.0"></text>
</g>
<g>
<title>__handle_mm_fault (19 samples, 0.18%)</title><rect x="17.2" y="1475.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="20.2" y="1486.0"></text>
</g>
<g>
<title>alloc_pages_vma (10 samples, 0.09%)</title><rect x="17.3" y="1459.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="20.3" y="1470.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (9 samples, 0.08%)</title><rect x="17.3" y="1443.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="20.3" y="1454.0"></text>
</g>
<g>
<title>clear_page_erms (8 samples, 0.07%)</title><rect x="17.3" y="1427.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="20.3" y="1438.0"></text>
</g>
<g>
<title>lru_cache_add_active_or_unevictable (3 samples, 0.03%)</title><rect x="18.4" y="1459.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="21.4" y="1470.0"></text>
</g>
<g>
<title>__lru_cache_add (3 samples, 0.03%)</title><rect x="18.4" y="1443.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="21.4" y="1454.0"></text>
</g>
<g>
<title>pagevec_lru_move_fn (3 samples, 0.03%)</title><rect x="18.4" y="1427.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="21.4" y="1438.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (4 samples, 0.04%)</title><rect x="18.7" y="1459.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="21.7" y="1470.0"></text>
</g>
<g>
<title>check_compiled_frame(JavaThread*) (3 samples, 0.03%)</title><rect x="19.5" y="1587.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="22.5" y="1598.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (7 samples, 0.06%)</title><rect x="19.8" y="1603.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="22.8" y="1614.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (4 samples, 0.04%)</title><rect x="20.6" y="1603.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="23.6" y="1614.0"></text>
</g>
<g>
<title>[deoptimization] (3 samples, 0.03%)</title><rect x="21.2" y="1603.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="24.2" y="1614.0"></text>
</g>
<g>
<title>[not_walkable_Java] (10 samples, 0.09%)</title><rect x="21.7" y="1603.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="24.7" y="1614.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (3 samples, 0.03%)</title><rect x="22.4" y="1587.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="25.4" y="1598.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oop, BasicLock*, Thread*) (3 samples, 0.03%)</title><rect x="22.4" y="1571.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="25.4" y="1582.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oop, BasicLock*, Thread*) (3 samples, 0.03%)</title><rect x="22.4" y="1555.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="25.4" y="1566.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.10%)</title><rect x="22.8" y="1603.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="25.8" y="1614.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1587.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="25.8" y="1598.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1571.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="25.8" y="1582.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1555.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="25.8" y="1566.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1539.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="25.8" y="1550.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1523.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="25.8" y="1534.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1507.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="25.8" y="1518.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1491.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="25.8" y="1502.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1475.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="25.8" y="1486.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1459.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="25.8" y="1470.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1443.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="25.8" y="1454.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1427.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="25.8" y="1438.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1411.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="25.8" y="1422.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1395.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="25.8" y="1406.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1379.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="25.8" y="1390.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1363.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="25.8" y="1374.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1347.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="25.8" y="1358.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1331.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="25.8" y="1342.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1315.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="25.8" y="1326.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1299.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="25.8" y="1310.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1283.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="25.8" y="1294.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1267.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="25.8" y="1278.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1251.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="25.8" y="1262.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1235.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="25.8" y="1246.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1219.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="25.8" y="1230.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1203.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="25.8" y="1214.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1187.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="25.8" y="1198.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1171.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="25.8" y="1182.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1155.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="25.8" y="1166.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1139.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="25.8" y="1150.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1123.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="25.8" y="1134.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1107.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="25.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1091.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="25.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1075.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="25.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1059.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="25.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1043.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="25.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1027.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="25.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="1011.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="25.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="995.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="25.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="979.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="25.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="963.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="25.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="947.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="25.8" y="958.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="931.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="25.8" y="942.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="22.8" y="915.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="25.8" y="926.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="899.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="25.8" y="910.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="883.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="25.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="867.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="25.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="851.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="25.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="835.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="25.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="819.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="25.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="803.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="25.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="787.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="25.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="771.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="25.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="755.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="25.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="739.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="25.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="723.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="25.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="707.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="25.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="691.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="25.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="675.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="25.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="659.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="25.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="643.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="25.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="627.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="25.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="611.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="25.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="595.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="25.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="579.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="25.8" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="563.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="25.8" y="574.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="547.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="25.8" y="558.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="531.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="25.8" y="542.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="515.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="25.8" y="526.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="499.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="25.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="483.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="25.8" y="494.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="467.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="25.8" y="478.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="451.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="25.8" y="462.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="435.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="25.8" y="446.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="419.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="25.8" y="430.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="403.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="25.8" y="414.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="387.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="25.8" y="398.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="371.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="25.8" y="382.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="355.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="25.8" y="366.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="339.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="25.8" y="350.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="323.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="25.8" y="334.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="307.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="25.8" y="318.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="291.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="25.8" y="302.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="275.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="25.8" y="286.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="259.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="25.8" y="270.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="243.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="25.8" y="254.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="227.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="25.8" y="238.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="211.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="25.8" y="222.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="195.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="25.8" y="206.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="179.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="25.8" y="190.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="163.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="25.8" y="174.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="147.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="25.8" y="158.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="131.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="25.8" y="142.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="115.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="25.8" y="126.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="99.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="25.8" y="110.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="83.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="25.8" y="94.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="67.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="25.8" y="78.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="51.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="25.8" y="62.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="22.8" y="35.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="25.8" y="46.0"></text>
</g>
<g>
<title>__GI___open64 (4 samples, 0.04%)</title><rect x="23.3" y="1587.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="26.3" y="1598.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="23.3" y="1571.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="26.3" y="1582.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.04%)</title><rect x="23.3" y="1555.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="26.3" y="1566.0"></text>
</g>
<g>
<title>sys_openat (4 samples, 0.04%)</title><rect x="23.3" y="1539.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="26.3" y="1550.0"></text>
</g>
<g>
<title>do_sys_open (4 samples, 0.04%)</title><rect x="23.3" y="1523.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="26.3" y="1534.0"></text>
</g>
<g>
<title>[unknown_Java] (107 samples, 0.99%)</title><rect x="24.0" y="1603.0" width="11.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="27.0" y="1614.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (5 samples, 0.05%)</title><rect x="36.0" y="1603.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="39.0" y="1614.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="36.2" y="1587.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="39.2" y="1598.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="36.2" y="1571.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="39.2" y="1582.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.03%)</title><rect x="36.2" y="1555.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="39.2" y="1566.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.03%)</title><rect x="36.2" y="1539.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="39.2" y="1550.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.03%)</title><rect x="36.2" y="1523.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="39.2" y="1534.0"></text>
</g>
<g>
<title>com/sun/management/GcInfo.&lt;init&gt; (7 samples, 0.06%)</title><rect x="36.5" y="1603.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.5" y="1614.0"></text>
</g>
<g>
<title>com/sun/management/internal/GcInfoCompositeData.&lt;clinit&gt; (6 samples, 0.06%)</title><rect x="36.6" y="1587.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.6" y="1598.0"></text>
</g>
<g>
<title>com/sun/management/internal/GarbageCollectorExtImpl.createGCNotification (17 samples, 0.16%)</title><rect x="37.3" y="1603.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.3" y="1614.0"></text>
</g>
<g>
<title>com/sun/management/internal/GarbageCollectionNotifInfoCompositeData.toCompositeData (5 samples, 0.05%)</title><rect x="37.3" y="1587.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.3" y="1598.0"></text>
</g>
<g>
<title>com/sun/management/internal/GarbageCollectionNotifInfoCompositeData.getCompositeData (5 samples, 0.05%)</title><rect x="37.3" y="1571.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.3" y="1582.0"></text>
</g>
<g>
<title>com/sun/management/internal/GcInfoCompositeData.toCompositeData (5 samples, 0.05%)</title><rect x="37.3" y="1555.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.3" y="1566.0"></text>
</g>
<g>
<title>com/sun/management/internal/GcInfoCompositeData.getCompositeData (4 samples, 0.04%)</title><rect x="37.3" y="1539.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.3" y="1550.0"></text>
</g>
<g>
<title>sun/management/MappedMXBeanType$MapMXBeanType.toOpenTypeData (4 samples, 0.04%)</title><rect x="37.3" y="1523.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.3" y="1534.0"></text>
</g>
<g>
<title>sun/management/NotificationEmitterSupport.sendNotification (12 samples, 0.11%)</title><rect x="37.8" y="1587.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.8" y="1598.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/jvm/JvmGcMetrics$$Lambda$135/270095066.handleNotification (12 samples, 0.11%)</title><rect x="37.8" y="1571.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.8" y="1582.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.lambda$bindTo$0 (12 samples, 0.11%)</title><rect x="37.8" y="1555.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.8" y="1566.0"></text>
</g>
<g>
<title>com/sun/management/GarbageCollectionNotificationInfo.from (3 samples, 0.03%)</title><rect x="37.8" y="1539.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.8" y="1550.0"></text>
</g>
<g>
<title>com/sun/management/GarbageCollectionNotificationInfo.&lt;init&gt; (3 samples, 0.03%)</title><rect x="37.8" y="1523.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.8" y="1534.0"></text>
</g>
<g>
<title>com/sun/management/internal/GarbageCollectionNotifInfoCompositeData.validateCompositeData (3 samples, 0.03%)</title><rect x="37.8" y="1507.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.8" y="1518.0"></text>
</g>
<g>
<title>sun/management/LazyCompositeData.isTypeMatched (3 samples, 0.03%)</title><rect x="37.8" y="1491.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.8" y="1502.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer$Builder.register (7 samples, 0.06%)</title><rect x="38.2" y="1539.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.2" y="1550.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/MeterRegistry.timer (7 samples, 0.06%)</title><rect x="38.2" y="1523.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.2" y="1534.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/MeterRegistry.registerMeterIfNecessary (6 samples, 0.06%)</title><rect x="38.2" y="1507.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.2" y="1518.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/MeterRegistry.getOrCreateMeter (6 samples, 0.06%)</title><rect x="38.2" y="1491.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="41.2" y="1502.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/MeterRegistry$$Lambda$190/172118046.apply (6 samples, 0.06%)</title><rect x="38.2" y="1475.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="41.2" y="1486.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/MeterRegistry.lambda$timer$2 (6 samples, 0.06%)</title><rect x="38.2" y="1459.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.2" y="1470.0"></text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.newTimer (6 samples, 0.06%)</title><rect x="38.2" y="1443.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.2" y="1454.0"></text>
</g>
<g>
<title>com/sun/management/internal/GarbageCollectorExtImpl.getGcInfoBuilder (5 samples, 0.05%)</title><rect x="39.1" y="1603.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.1" y="1614.0"></text>
</g>
<g>
<title>com/sun/management/internal/GarbageCollectorExtImpl.getAllPoolNames (5 samples, 0.05%)</title><rect x="39.1" y="1587.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.1" y="1598.0"></text>
</g>
<g>
<title>sun/management/ManagementFactoryHelper.getAllMemoryPoolNames (5 samples, 0.05%)</title><rect x="39.1" y="1571.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.1" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.toArray (4 samples, 0.04%)</title><rect x="39.3" y="1555.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.3" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluateToArrayNode (4 samples, 0.04%)</title><rect x="39.3" y="1539.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.3" y="1550.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.04%)</title><rect x="39.3" y="1523.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.3" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.makeNodeBuilder (4 samples, 0.04%)</title><rect x="39.3" y="1507.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.3" y="1518.0"></text>
</g>
<g>
<title>java/lang/Thread.run (7,211 samples, 66.71%)</title><rect x="39.8" y="1603.0" width="787.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.8" y="1614.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection$MainLoop.run (16 samples, 0.15%)</title><rect x="39.8" y="1587.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.8" y="1598.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection.access$300 (10 samples, 0.09%)</title><rect x="39.8" y="1571.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.8" y="1582.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection.readFrame (10 samples, 0.09%)</title><rect x="39.8" y="1555.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.8" y="1566.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQChannel.handleFrame (9 samples, 0.08%)</title><rect x="39.8" y="1539.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.8" y="1550.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQChannel.handleCompleteInboundCommand (6 samples, 0.06%)</title><rect x="39.8" y="1523.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.8" y="1534.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ChannelN.processAsync (6 samples, 0.06%)</title><rect x="39.8" y="1507.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.8" y="1518.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/recovery/RecoveryAwareChannelN.processDelivery (6 samples, 0.06%)</title><rect x="39.8" y="1491.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.8" y="1502.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ChannelN.processDelivery (6 samples, 0.06%)</title><rect x="39.8" y="1475.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.8" y="1486.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.handleDelivery (6 samples, 0.06%)</title><rect x="39.8" y="1459.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.8" y="1470.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.executeUnlessShuttingDown (6 samples, 0.06%)</title><rect x="39.8" y="1443.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.8" y="1454.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.execute (6 samples, 0.06%)</title><rect x="39.8" y="1427.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.8" y="1438.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService.addWork (6 samples, 0.06%)</title><rect x="39.8" y="1411.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.8" y="1422.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool.addWorkItem (5 samples, 0.05%)</title><rect x="39.8" y="1395.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.8" y="1406.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool$$Lambda$174/1751997173.accept (4 samples, 0.04%)</title><rect x="39.8" y="1379.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.8" y="1390.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool.lambda$new$1 (4 samples, 0.04%)</title><rect x="39.8" y="1363.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.8" y="1374.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/VariableLinkedBlockingQueue.put (4 samples, 0.04%)</title><rect x="39.8" y="1347.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.03%)</title><rect x="39.9" y="1331.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.03%)</title><rect x="39.9" y="1315.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.03%)</title><rect x="39.9" y="1299.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.03%)</title><rect x="39.9" y="1283.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.9" y="1294.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.03%)</title><rect x="39.9" y="1267.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="42.9" y="1278.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQCommand.handleFrame (3 samples, 0.03%)</title><rect x="40.5" y="1523.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.5" y="1534.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/SocketFrameHandler.readFrame (6 samples, 0.06%)</title><rect x="40.9" y="1571.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.9" y="1582.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/Frame.readFrom (6 samples, 0.06%)</title><rect x="40.9" y="1555.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.9" y="1566.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readUnsignedByte (5 samples, 0.05%)</title><rect x="41.0" y="1539.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.0" y="1550.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (5 samples, 0.05%)</title><rect x="41.0" y="1523.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.0" y="1534.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (5 samples, 0.05%)</title><rect x="41.0" y="1507.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.0" y="1518.0"></text>
</g>
<g>
<title>java/net/Socket$SocketInputStream.read (5 samples, 0.05%)</title><rect x="41.0" y="1491.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.0" y="1502.0"></text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl$1.read (5 samples, 0.05%)</title><rect x="41.0" y="1475.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="44.0" y="1486.0"></text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl.read (5 samples, 0.05%)</title><rect x="41.0" y="1459.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="44.0" y="1470.0"></text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl.implRead (5 samples, 0.05%)</title><rect x="41.0" y="1443.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="44.0" y="1454.0"></text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl.timedRead (5 samples, 0.05%)</title><rect x="41.0" y="1427.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.0" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (6,699 samples, 61.97%)</title><rect x="41.5" y="1587.0" width="731.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.5" y="1598.0">io/netty/util/concurrent/FastThreadLocalRunnable.run</text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (6,699 samples, 61.97%)</title><rect x="41.5" y="1571.0" width="731.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.5" y="1582.0">io/netty/util/internal/ThreadExecutorMap$2.run</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$5.run (6,699 samples, 61.97%)</title><rect x="41.5" y="1555.0" width="731.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.5" y="1566.0">io/netty/util/concurrent/SingleThreadEventExecutor$5.run</text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.run (6,699 samples, 61.97%)</title><rect x="41.5" y="1539.0" width="731.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.5" y="1550.0">io/netty/channel/epoll/EpollEventLoop.run</text>
</g>
<g>
<title>io/netty/channel/DefaultSelectStrategy.calculateStrategy (4 samples, 0.04%)</title><rect x="43.2" y="1523.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.2" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop$1.get (4 samples, 0.04%)</title><rect x="43.2" y="1507.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.2" y="1518.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.access$000 (4 samples, 0.04%)</title><rect x="43.2" y="1491.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.2" y="1502.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.epollWaitNow (4 samples, 0.04%)</title><rect x="43.2" y="1475.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="46.2" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/Native.epollWait (4 samples, 0.04%)</title><rect x="43.2" y="1459.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.2" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/Native.epollWait0 (4 samples, 0.04%)</title><rect x="43.2" y="1443.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="46.2" y="1454.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="43.2" y="1427.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="46.2" y="1438.0"></text>
</g>
<g>
<title>epoll_wait (4 samples, 0.04%)</title><rect x="43.2" y="1411.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="46.2" y="1422.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="43.3" y="1395.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="46.3" y="1406.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="43.3" y="1379.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="46.3" y="1390.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.epollWait (3 samples, 0.03%)</title><rect x="43.6" y="1523.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.6" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.processReady (25 samples, 0.23%)</title><rect x="43.9" y="1523.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.9" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady (25 samples, 0.23%)</title><rect x="43.9" y="1507.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="46.9" y="1518.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1491.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.9" y="1502.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1475.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.9" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1459.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="46.9" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (25 samples, 0.23%)</title><rect x="43.9" y="1443.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.9" y="1454.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1427.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.9" y="1438.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1411.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="46.9" y="1422.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1395.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.9" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.channelRead (25 samples, 0.23%)</title><rect x="43.9" y="1379.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.9" y="1390.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelRead (25 samples, 0.23%)</title><rect x="43.9" y="1363.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="46.9" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.fireChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1347.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.9" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1331.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.9" y="1342.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1315.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.9" y="1326.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1299.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="46.9" y="1310.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1283.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.9" y="1294.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageDecoder.channelRead (25 samples, 0.23%)</title><rect x="43.9" y="1267.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="46.9" y="1278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1251.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="46.9" y="1262.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1235.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.9" y="1246.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (25 samples, 0.23%)</title><rect x="43.9" y="1219.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.9" y="1230.0"></text>
</g>
<g>
<title>io/netty/channel/SimpleChannelInboundHandler.channelRead (25 samples, 0.23%)</title><rect x="43.9" y="1203.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.9" y="1214.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/HttpRequestHandler.channelRead0 (25 samples, 0.23%)</title><rect x="43.9" y="1187.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.9" y="1198.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/HttpRequestHandler.channelRead0 (25 samples, 0.23%)</title><rect x="43.9" y="1171.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.9" y="1182.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/route/PrometheusRoute.process (25 samples, 0.23%)</title><rect x="43.9" y="1155.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.9" y="1166.0"></text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.scrape (24 samples, 0.22%)</title><rect x="43.9" y="1139.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="46.9" y="1150.0"></text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.scrape (24 samples, 0.22%)</title><rect x="43.9" y="1123.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.9" y="1134.0"></text>
</g>
<g>
<title>io/prometheus/client/exporter/common/TextFormat.write004 (22 samples, 0.20%)</title><rect x="44.2" y="1107.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.2" y="1118.0"></text>
</g>
<g>
<title>io/prometheus/client/CollectorRegistry$MetricFamilySamplesEnumeration.nextElement (22 samples, 0.20%)</title><rect x="44.2" y="1091.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.2" y="1102.0"></text>
</g>
<g>
<title>io/prometheus/client/CollectorRegistry$MetricFamilySamplesEnumeration.nextElement (22 samples, 0.20%)</title><rect x="44.2" y="1075.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.2" y="1086.0"></text>
</g>
<g>
<title>io/prometheus/client/CollectorRegistry$MetricFamilySamplesEnumeration.findNextElement (22 samples, 0.20%)</title><rect x="44.2" y="1059.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.2" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/prometheus/MicrometerCollector.collect (22 samples, 0.20%)</title><rect x="44.2" y="1043.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.2" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry$$Lambda$126/1714550218.samples (17 samples, 0.16%)</title><rect x="44.4" y="1027.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.4" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.lambda$newGauge$3 (17 samples, 0.16%)</title><rect x="44.4" y="1011.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.4" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/internal/DefaultGauge.value (17 samples, 0.16%)</title><rect x="44.4" y="995.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.4" y="1006.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/ProcessMemoryMetrics$$Lambda$158/1138410383.applyAsDouble (13 samples, 0.12%)</title><rect x="44.4" y="979.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.4" y="990.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/ProcessMemoryMetrics.lambda$bindTo$0 (13 samples, 0.12%)</title><rect x="44.4" y="963.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.4" y="974.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/ProcessMemoryMetrics.value (13 samples, 0.12%)</title><rect x="44.4" y="947.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.4" y="958.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsSmaps.get (13 samples, 0.12%)</title><rect x="44.4" y="931.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.4" y="942.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry.get (13 samples, 0.12%)</title><rect x="44.4" y="915.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.4" y="926.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry.collect (13 samples, 0.12%)</title><rect x="44.4" y="899.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.4" y="910.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsReader.read (13 samples, 0.12%)</title><rect x="44.4" y="883.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.4" y="894.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsReader.readPath (13 samples, 0.12%)</title><rect x="44.4" y="867.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.4" y="878.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry$$Lambda$181/2099998123.accept (3 samples, 0.03%)</title><rect x="44.6" y="851.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.6" y="862.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry.lambda$collect$0 (3 samples, 0.03%)</title><rect x="44.6" y="835.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.6" y="846.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsSmaps.handle (3 samples, 0.03%)</title><rect x="44.6" y="819.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.6" y="830.0"></text>
</g>
<g>
<title>java/io/BufferedReader.readLine (8 samples, 0.07%)</title><rect x="44.9" y="851.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.9" y="862.0"></text>
</g>
<g>
<title>java/io/BufferedReader.readLine (8 samples, 0.07%)</title><rect x="44.9" y="835.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.9" y="846.0"></text>
</g>
<g>
<title>java/io/BufferedReader.fill (6 samples, 0.06%)</title><rect x="45.1" y="819.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.1" y="830.0"></text>
</g>
<g>
<title>java/io/InputStreamReader.read (6 samples, 0.06%)</title><rect x="45.1" y="803.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.1" y="814.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.read (6 samples, 0.06%)</title><rect x="45.1" y="787.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.implRead (6 samples, 0.06%)</title><rect x="45.1" y="771.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="48.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.readBytes (6 samples, 0.06%)</title><rect x="45.1" y="755.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="48.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.read (6 samples, 0.06%)</title><rect x="45.1" y="739.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.read (6 samples, 0.06%)</title><rect x="45.1" y="723.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.read (6 samples, 0.06%)</title><rect x="45.1" y="707.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (6 samples, 0.06%)</title><rect x="45.1" y="691.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.1" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.06%)</title><rect x="45.1" y="675.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.1" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.06%)</title><rect x="45.1" y="659.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read (6 samples, 0.06%)</title><rect x="45.1" y="643.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (6 samples, 0.06%)</title><rect x="45.1" y="627.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.06%)</title><rect x="45.1" y="611.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="48.1" y="622.0"></text>
</g>
<g>
<title>__libc_read (6 samples, 0.06%)</title><rect x="45.1" y="595.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="48.1" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.06%)</title><rect x="45.1" y="579.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="48.1" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.06%)</title><rect x="45.1" y="563.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="48.1" y="574.0"></text>
</g>
<g>
<title>sys_read (6 samples, 0.06%)</title><rect x="45.1" y="547.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="48.1" y="558.0"></text>
</g>
<g>
<title>vfs_read (6 samples, 0.06%)</title><rect x="45.1" y="531.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="48.1" y="542.0"></text>
</g>
<g>
<title>__vfs_read (6 samples, 0.06%)</title><rect x="45.1" y="515.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="48.1" y="526.0"></text>
</g>
<g>
<title>seq_read (6 samples, 0.06%)</title><rect x="45.1" y="499.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="48.1" y="510.0"></text>
</g>
<g>
<title>show_pid_smap (6 samples, 0.06%)</title><rect x="45.1" y="483.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="48.1" y="494.0"></text>
</g>
<g>
<title>show_smap.isra.31 (6 samples, 0.06%)</title><rect x="45.1" y="467.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="48.1" y="478.0"></text>
</g>
<g>
<title>walk_page_vma (6 samples, 0.06%)</title><rect x="45.1" y="451.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="48.1" y="462.0"></text>
</g>
<g>
<title>__walk_page_range (6 samples, 0.06%)</title><rect x="45.1" y="435.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="48.1" y="446.0"></text>
</g>
<g>
<title>smaps_pte_range (5 samples, 0.05%)</title><rect x="45.3" y="419.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="48.3" y="430.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/system/FileDescriptorMetrics$$Lambda$155/1483298597.applyAsDouble (4 samples, 0.04%)</title><rect x="45.8" y="979.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.8" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/system/FileDescriptorMetrics.lambda$bindTo$0 (4 samples, 0.04%)</title><rect x="45.8" y="963.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.8" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/system/FileDescriptorMetrics.invoke (4 samples, 0.04%)</title><rect x="45.8" y="947.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.8" y="958.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (4 samples, 0.04%)</title><rect x="45.8" y="931.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.8" y="942.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (4 samples, 0.04%)</title><rect x="45.8" y="915.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.8" y="926.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (4 samples, 0.04%)</title><rect x="45.8" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.8" y="910.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (4 samples, 0.04%)</title><rect x="45.8" y="883.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.8" y="894.0"></text>
</g>
<g>
<title>com/sun/management/internal/OperatingSystemImpl.getOpenFileDescriptorCount (4 samples, 0.04%)</title><rect x="45.8" y="867.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.8" y="878.0"></text>
</g>
<g>
<title>com/sun/management/internal/OperatingSystemImpl.getOpenFileDescriptorCount0 (4 samples, 0.04%)</title><rect x="45.8" y="851.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="48.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="45.8" y="835.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="48.8" y="846.0"></text>
</g>
<g>
<title>__getdents64 (4 samples, 0.04%)</title><rect x="45.8" y="819.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="48.8" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="45.8" y="803.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="48.8" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.04%)</title><rect x="45.8" y="787.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="48.8" y="798.0"></text>
</g>
<g>
<title>sys_getdents (4 samples, 0.04%)</title><rect x="45.8" y="771.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="48.8" y="782.0"></text>
</g>
<g>
<title>iterate_dir (4 samples, 0.04%)</title><rect x="45.8" y="755.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="48.8" y="766.0"></text>
</g>
<g>
<title>proc_readfd (4 samples, 0.04%)</title><rect x="45.8" y="739.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="48.8" y="750.0"></text>
</g>
<g>
<title>proc_readfd_common (4 samples, 0.04%)</title><rect x="45.8" y="723.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="48.8" y="734.0"></text>
</g>
<g>
<title>proc_fill_cache (4 samples, 0.04%)</title><rect x="45.8" y="707.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="48.8" y="718.0"></text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry$$Lambda$193/1766880782.samples (3 samples, 0.03%)</title><rect x="46.2" y="1027.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.2" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.lambda$newTimer$2 (3 samples, 0.03%)</title><rect x="46.2" y="1011.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.2" y="1022.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (6,644 samples, 61.46%)</title><rect x="46.7" y="1523.0" width="725.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.7" y="1534.0">io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks</text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.safeExecute (6,568 samples, 60.76%)</title><rect x="47.4" y="1507.0" width="717.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.4" y="1518.0">io/netty/util/concurrent/AbstractEventExecutor.safeExecute</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.run (6,560 samples, 60.68%)</title><rect x="48.2" y="1491.0" width="716.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="51.2" y="1502.0">io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.run</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.decrementPendingOutboundBytes (169 samples, 1.56%)</title><rect x="48.3" y="1475.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.3" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.access$1600 (3 samples, 0.03%)</title><rect x="51.8" y="1459.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.8" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.decrementPendingOutboundBytes (134 samples, 1.24%)</title><rect x="52.1" y="1459.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.1" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.decrementPendingOutboundBytes (46 samples, 0.43%)</title><rect x="61.7" y="1443.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.7" y="1454.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.decrementPendingOutboundBytes (46 samples, 0.43%)</title><rect x="61.7" y="1427.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.7" y="1438.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.setWritable (5 samples, 0.05%)</title><rect x="64.9" y="1411.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet (4 samples, 0.04%)</title><rect x="65.0" y="1395.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.0" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/EpollSocketChannel.config (8 samples, 0.07%)</title><rect x="65.5" y="1411.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.5" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.addAndGet (4 samples, 0.04%)</title><rect x="66.3" y="1411.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.3" y="1422.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.recycle (56 samples, 0.52%)</title><rect x="66.8" y="1475.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.8" y="1486.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (40 samples, 0.37%)</title><rect x="68.4" y="1459.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.4" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (38 samples, 0.35%)</title><rect x="68.6" y="1443.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="71.6" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pushLater (36 samples, 0.33%)</title><rect x="68.6" y="1427.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.6" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.add (3 samples, 0.03%)</title><rect x="68.8" y="1411.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.8" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.allocate (5 samples, 0.05%)</title><rect x="69.2" y="1411.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.2" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.newQueue (4 samples, 0.04%)</title><rect x="69.3" y="1395.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.3" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.setHead (4 samples, 0.04%)</title><rect x="69.3" y="1379.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.3" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (8 samples, 0.07%)</title><rect x="69.7" y="1411.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.7" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (5 samples, 0.05%)</title><rect x="69.8" y="1395.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.8" y="1406.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (8 samples, 0.07%)</title><rect x="70.6" y="1411.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="73.6" y="1422.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.getTable (4 samples, 0.04%)</title><rect x="71.0" y="1395.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.0" y="1406.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.expungeStaleEntries (4 samples, 0.04%)</title><rect x="71.0" y="1379.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.0" y="1390.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.put (10 samples, 0.09%)</title><rect x="71.5" y="1411.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.5" y="1422.0"></text>
</g>
<g>
<title>java/util/WeakHashMap$Entry.&lt;init&gt; (7 samples, 0.06%)</title><rect x="71.5" y="1395.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.5" y="1406.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.maskNull (3 samples, 0.03%)</title><rect x="72.2" y="1395.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.2" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.write (6,334 samples, 58.59%)</title><rect x="72.9" y="1475.0" width="691.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.9" y="1486.0">io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.write</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.access$1700 (6,332 samples, 58.58%)</title><rect x="73.1" y="1459.0" width="691.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.1" y="1470.0">io/netty/channel/AbstractChannelHandlerContext.access$1700</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (6,332 samples, 58.58%)</title><rect x="73.1" y="1443.0" width="691.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.1" y="1454.0">io/netty/channel/AbstractChannelHandlerContext.invokeWrite</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (6,332 samples, 58.58%)</title><rect x="73.1" y="1427.0" width="691.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.1" y="1438.0">io/netty/channel/AbstractChannelHandlerContext.invokeWrite0</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/SlowConsumerDisconnectHandler.write (6,327 samples, 58.53%)</title><rect x="73.6" y="1411.0" width="690.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.6" y="1422.0">pbouda/broadcaster/server/netty/SlowConsumerDisconnectHandler.write</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (6,212 samples, 57.47%)</title><rect x="75.1" y="1395.0" width="678.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.1" y="1406.0">io/netty/channel/AbstractChannelHandlerContext.writeAndFlush</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.newPromise (29 samples, 0.27%)</title><rect x="75.3" y="1379.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.3" y="1390.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.&lt;init&gt; (28 samples, 0.26%)</title><rect x="75.4" y="1363.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.4" y="1374.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (6,181 samples, 57.18%)</title><rect x="78.4" y="1379.0" width="674.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.4" y="1390.0">io/netty/channel/AbstractChannelHandlerContext.writeAndFlush</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (6,181 samples, 57.18%)</title><rect x="78.4" y="1363.0" width="674.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.4" y="1374.0">io/netty/channel/AbstractChannelHandlerContext.write</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.findContextOutbound (74 samples, 0.68%)</title><rect x="80.2" y="1347.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.2" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (6,083 samples, 56.27%)</title><rect x="88.3" y="1347.0" width="664.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.3" y="1358.0">io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (6,004 samples, 55.54%)</title><rect x="88.4" y="1331.0" width="655.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.4" y="1342.0">io/netty/channel/AbstractChannelHandlerContext.invokeFlush0</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.flush (5,998 samples, 55.49%)</title><rect x="89.0" y="1315.0" width="654.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.0" y="1326.0">io/netty/handler/stream/ChunkedWriteHandler.flush</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.doFlush (5,998 samples, 55.49%)</title><rect x="89.0" y="1299.0" width="654.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.0" y="1310.0">io/netty/handler/stream/ChunkedWriteHandler.doFlush</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.alloc (4 samples, 0.04%)</title><rect x="90.4" y="1283.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.4" y="1294.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (5,143 samples, 47.58%)</title><rect x="90.9" y="1283.0" width="561.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.9" y="1294.0">io/netty/channel/AbstractChannelHandlerContext.flush</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.findContextOutbound (3 samples, 0.03%)</title><rect x="91.1" y="1267.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.1" y="1278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (5,137 samples, 47.52%)</title><rect x="91.4" y="1267.0" width="560.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="94.4" y="1278.0">io/netty/channel/AbstractChannelHandlerContext.invokeFlush</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (5,137 samples, 47.52%)</title><rect x="91.4" y="1251.0" width="560.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="94.4" y="1262.0">io/netty/channel/AbstractChannelHandlerContext.invokeFlush0</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (5,121 samples, 47.37%)</title><rect x="91.5" y="1235.0" width="559.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.5" y="1246.0">io/netty/channel/DefaultChannelPipeline$HeadContext.flush</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (5,114 samples, 47.31%)</title><rect x="92.3" y="1219.0" width="558.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.3" y="1230.0">io/netty/channel/AbstractChannel$AbstractUnsafe.flush</text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.addFlush (29 samples, 0.27%)</title><rect x="92.5" y="1203.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.5" y="1214.0"></text>
</g>
<g>
<title>io/netty/channel/unix/FileDescriptor.writeAddress (7 samples, 0.06%)</title><rect x="93.1" y="1187.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.1" y="1198.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setUncancellable (17 samples, 0.16%)</title><rect x="93.8" y="1187.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.8" y="1198.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.isLiveNonVolatile (3 samples, 0.03%)</title><rect x="94.2" y="1171.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet (11 samples, 0.10%)</title><rect x="94.5" y="1171.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.accessCheck (7 samples, 0.06%)</title><rect x="94.9" y="1155.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.9" y="1166.0"></text>
</g>
<g>
<title>io/netty/util/internal/PromiseNotificationUtil.trySuccess (7 samples, 0.06%)</title><rect x="94.9" y="1139.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.9" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelConfig.getWriteBufferLowWaterMark (3 samples, 0.03%)</title><rect x="95.7" y="1203.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.7" y="1214.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.flush0 (5,079 samples, 46.98%)</title><rect x="96.0" y="1203.0" width="554.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.0" y="1214.0">io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.flush0</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (5,073 samples, 46.93%)</title><rect x="96.7" y="1187.0" width="553.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.7" y="1198.0">io/netty/channel/AbstractChannel$AbstractUnsafe.flush0</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.doWrite (5,070 samples, 46.90%)</title><rect x="97.0" y="1171.0" width="553.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.0" y="1182.0">io/netty/channel/epoll/AbstractEpollStreamChannel.doWrite</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.doWriteSingle (5,055 samples, 46.76%)</title><rect x="98.4" y="1155.0" width="551.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.4" y="1166.0">io/netty/channel/epoll/AbstractEpollStreamChannel.doWriteSingle</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.writeBytes (5,053 samples, 46.74%)</title><rect x="98.6" y="1139.0" width="551.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.6" y="1150.0">io/netty/channel/epoll/AbstractEpollStreamChannel.writeBytes</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollChannel.doWriteBytes (5,044 samples, 46.66%)</title><rect x="99.6" y="1123.0" width="550.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.6" y="1134.0">io/netty/channel/epoll/AbstractEpollChannel.doWriteBytes</text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.memoryAddress (3 samples, 0.03%)</title><rect x="101.1" y="1107.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="104.1" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.removeBytes (239 samples, 2.21%)</title><rect x="101.6" y="1107.0" width="26.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.6" y="1118.0">i..</text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.writerIndex (6 samples, 0.06%)</title><rect x="101.9" y="1091.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.9" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.remove (230 samples, 2.13%)</title><rect x="102.6" y="1091.0" width="25.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.6" y="1102.0">i..</text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer$Entry.recycle (8 samples, 0.07%)</title><rect x="102.6" y="1075.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.6" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (8 samples, 0.07%)</title><rect x="102.6" y="1059.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.6" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (6 samples, 0.06%)</title><rect x="102.8" y="1043.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.8" y="1054.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.decrementPendingOutboundBytes (53 samples, 0.49%)</title><rect x="103.4" y="1075.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.4" y="1086.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.setWritable (3 samples, 0.03%)</title><rect x="103.7" y="1059.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet (3 samples, 0.03%)</title><rect x="103.7" y="1043.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.7" y="1054.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelConfig.getWriteBufferLowWaterMark (3 samples, 0.03%)</title><rect x="104.0" y="1059.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.0" y="1070.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/EpollSocketChannel.config (3 samples, 0.03%)</title><rect x="104.3" y="1059.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.addAndGet (42 samples, 0.39%)</title><rect x="104.6" y="1059.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (36 samples, 0.33%)</title><rect x="105.3" y="1043.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (23 samples, 0.21%)</title><rect x="106.7" y="1027.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.7" y="1038.0"></text>
</g>
<g>
<title>Runtime1::is_instance_of(oopDesc*, oopDesc*) (17 samples, 0.16%)</title><rect x="107.3" y="1011.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="110.3" y="1022.0"></text>
</g>
<g>
<title>JRTLeafVerifier::JRTLeafVerifier() (3 samples, 0.03%)</title><rect x="107.6" y="995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="110.6" y="1006.0"></text>
</g>
<g>
<title>NoHandleMark::NoHandleMark() (5 samples, 0.05%)</title><rect x="108.0" y="995.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="111.0" y="1006.0"></text>
</g>
<g>
<title>java_lang_Class::as_Klass(oop) (3 samples, 0.03%)</title><rect x="108.8" y="995.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="111.8" y="1006.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.safeSuccess (24 samples, 0.22%)</title><rect x="109.2" y="1075.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="112.2" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/internal/PromiseNotificationUtil.trySuccess (23 samples, 0.21%)</title><rect x="109.3" y="1059.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.3" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setValue0 (4 samples, 0.04%)</title><rect x="109.3" y="1043.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.3" y="1054.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.trySuccess (19 samples, 0.18%)</title><rect x="109.8" y="1043.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.8" y="1054.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setSuccess0 (17 samples, 0.16%)</title><rect x="110.0" y="1027.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.0" y="1038.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setValue0 (17 samples, 0.16%)</title><rect x="110.0" y="1011.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.0" y="1022.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.checkNotifyWaiters (8 samples, 0.07%)</title><rect x="110.0" y="995.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet (9 samples, 0.08%)</title><rect x="110.9" y="995.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="113.9" y="1006.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.safeRelease (145 samples, 1.34%)</title><rect x="111.8" y="1075.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="114.8" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (143 samples, 1.32%)</title><rect x="112.1" y="1059.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.1" y="1070.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (128 samples, 1.18%)</title><rect x="112.2" y="1043.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.2" y="1054.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (112 samples, 1.04%)</title><rect x="113.3" y="1027.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="116.3" y="1038.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (110 samples, 1.02%)</title><rect x="113.3" y="1011.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.3" y="1022.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (85 samples, 0.79%)</title><rect x="114.6" y="995.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.6" y="1006.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.sizeClass (3 samples, 0.03%)</title><rect x="114.9" y="979.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.9" y="990.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.isTinyOrSmall (3 samples, 0.03%)</title><rect x="114.9" y="963.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.9" y="974.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.add (79 samples, 0.73%)</title><rect x="115.2" y="979.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.2" y="990.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.add (57 samples, 0.53%)</title><rect x="115.4" y="963.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="118.4" y="974.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.newEntry (53 samples, 0.49%)</title><rect x="115.4" y="947.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="118.4" y="958.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (53 samples, 0.49%)</title><rect x="115.4" y="931.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.4" y="942.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pop (40 samples, 0.37%)</title><rect x="115.4" y="915.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="118.4" y="926.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.scavenge (37 samples, 0.34%)</title><rect x="115.8" y="899.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="118.8" y="910.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.scavengeSome (37 samples, 0.34%)</title><rect x="115.8" y="883.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="118.8" y="894.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.transfer (36 samples, 0.33%)</title><rect x="115.9" y="867.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.9" y="878.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.access$700 (3 samples, 0.03%)</title><rect x="118.4" y="851.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="121.4" y="862.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.access$802 (9 samples, 0.08%)</title><rect x="118.7" y="851.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="121.7" y="862.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (13 samples, 0.12%)</title><rect x="119.8" y="915.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.8" y="926.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (5 samples, 0.05%)</title><rect x="120.5" y="899.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="123.5" y="910.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueue.offer (4 samples, 0.04%)</title><rect x="121.2" y="947.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.2" y="958.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cache (20 samples, 0.19%)</title><rect x="121.7" y="963.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.7" y="974.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cacheForSmall (6 samples, 0.06%)</title><rect x="123.2" y="947.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.2" y="958.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.recycle (13 samples, 0.12%)</title><rect x="123.9" y="995.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.9" y="1006.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (13 samples, 0.12%)</title><rect x="123.9" y="979.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.9" y="990.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (12 samples, 0.11%)</title><rect x="124.0" y="963.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.0" y="974.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pushLater (3 samples, 0.03%)</title><rect x="124.5" y="947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.5" y="958.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (3 samples, 0.03%)</title><rect x="124.5" y="931.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="127.5" y="942.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.getTable (3 samples, 0.03%)</title><rect x="124.5" y="915.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.5" y="926.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.expungeStaleEntries (3 samples, 0.03%)</title><rect x="124.5" y="899.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.5" y="910.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.poll (3 samples, 0.03%)</title><rect x="124.5" y="883.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="127.5" y="894.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pushNow (4 samples, 0.04%)</title><rect x="124.8" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.8" y="958.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.release (6 samples, 0.06%)</title><rect x="125.5" y="1027.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.5" y="1038.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.tryFinalRelease0 (5 samples, 0.05%)</title><rect x="125.6" y="1011.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="128.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet (5 samples, 0.05%)</title><rect x="125.6" y="995.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="128.6" y="1006.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareByteBuf.release (6 samples, 0.06%)</title><rect x="126.1" y="1043.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="129.1" y="1054.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareByteBuf.closeLeak (3 samples, 0.03%)</title><rect x="126.1" y="1027.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="129.1" y="1038.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.close (3 samples, 0.03%)</title><rect x="126.1" y="1011.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="129.1" y="1022.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.close (3 samples, 0.03%)</title><rect x="126.1" y="995.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="129.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SetFromMap.remove (3 samples, 0.03%)</title><rect x="126.1" y="979.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="129.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (3 samples, 0.03%)</title><rect x="126.1" y="963.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (3 samples, 0.03%)</title><rect x="126.1" y="947.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="129.1" y="958.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.release (3 samples, 0.03%)</title><rect x="126.5" y="1027.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.5" y="1038.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (3 samples, 0.03%)</title><rect x="126.5" y="1011.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="129.5" y="1022.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (3 samples, 0.03%)</title><rect x="126.5" y="995.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="129.5" y="1006.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (3 samples, 0.03%)</title><rect x="126.5" y="979.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="129.5" y="990.0"></text>
</g>
<g>
<title>itable stub (8 samples, 0.07%)</title><rect x="126.8" y="1043.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="129.8" y="1054.0"></text>
</g>
<g>
<title>io/netty/channel/unix/FileDescriptor.writeAddress (4,787 samples, 44.28%)</title><rect x="127.7" y="1107.0" width="522.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="130.7" y="1118.0">io/netty/channel/unix/FileDescriptor.writeAddress</text>
</g>
<g>
<title>io/netty/channel/unix/FileDescriptor.writeAddress (4,767 samples, 44.10%)</title><rect x="129.9" y="1091.0" width="520.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.9" y="1102.0">io/netty/channel/unix/FileDescriptor.writeAddress</text>
</g>
<g>
<title>/tmp/libnetty_transport_native_epoll_x86_6411553120083125181382.so (deleted) (4 samples, 0.04%)</title><rect x="130.8" y="1075.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="133.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (4,744 samples, 43.89%)</title><rect x="131.3" y="1075.0" width="517.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="134.3" y="1086.0">[unknown]</text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.08%)</title><rect x="131.3" y="1059.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="134.3" y="1070.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (6 samples, 0.06%)</title><rect x="132.3" y="1059.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="135.3" y="1070.0"></text>
</g>
<g>
<title>__write (4,729 samples, 43.75%)</title><rect x="132.9" y="1059.0" width="516.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="135.9" y="1070.0">__write</text>
</g>
<g>
<title>bpf_get_current_pid_tgid (5 samples, 0.05%)</title><rect x="153.4" y="1043.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="156.4" y="1054.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4,535 samples, 41.95%)</title><rect x="154.1" y="1043.0" width="495.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="157.1" y="1054.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (4,528 samples, 41.89%)</title><rect x="154.1" y="1027.0" width="494.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="157.1" y="1038.0">do_syscall_64</text>
</g>
<g>
<title>sys_write (4,423 samples, 40.92%)</title><rect x="165.6" y="1011.0" width="482.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="168.6" y="1022.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (109 samples, 1.01%)</title><rect x="166.5" y="995.0" width="11.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="169.5" y="1006.0"></text>
</g>
<g>
<title>__fget_light (109 samples, 1.01%)</title><rect x="166.5" y="979.0" width="11.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="169.5" y="990.0"></text>
</g>
<g>
<title>__fget (105 samples, 0.97%)</title><rect x="167.0" y="963.0" width="11.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="170.0" y="974.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="178.4" y="995.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="181.4" y="1006.0"></text>
</g>
<g>
<title>fput (3 samples, 0.03%)</title><rect x="178.8" y="995.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="181.8" y="1006.0"></text>
</g>
<g>
<title>vfs_write (4,299 samples, 39.77%)</title><rect x="179.1" y="995.0" width="469.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="182.1" y="1006.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (4,095 samples, 37.88%)</title><rect x="186.9" y="979.0" width="447.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="189.9" y="990.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (4,091 samples, 37.84%)</title><rect x="187.4" y="963.0" width="446.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="190.4" y="974.0">new_sync_write</text>
</g>
<g>
<title>sock_write_iter (4,063 samples, 37.59%)</title><rect x="190.4" y="947.0" width="443.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="193.4" y="958.0">sock_write_iter</text>
</g>
<g>
<title>inet_sendmsg (7 samples, 0.06%)</title><rect x="192.5" y="931.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="195.5" y="942.0"></text>
</g>
<g>
<title>sock_sendmsg (4,037 samples, 37.35%)</title><rect x="193.3" y="931.0" width="440.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="196.3" y="942.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (6 samples, 0.06%)</title><rect x="194.0" y="915.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="197.0" y="926.0"></text>
</g>
<g>
<title>cleanup_module	[snd_hda_codec_generic] (14 samples, 0.13%)</title><rect x="194.7" y="915.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="197.7" y="926.0"></text>
</g>
<g>
<title>inet_sendmsg (3,914 samples, 36.21%)</title><rect x="196.2" y="915.0" width="427.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="199.2" y="926.0">inet_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (3,908 samples, 36.15%)</title><rect x="196.9" y="899.0" width="426.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="199.9" y="910.0">tcp_sendmsg</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.03%)</title><rect x="197.5" y="883.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="200.5" y="894.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (7 samples, 0.06%)</title><rect x="198.0" y="883.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="201.0" y="894.0"></text>
</g>
<g>
<title>cleanup_module	[snd_hda_codec_generic] (92 samples, 0.85%)</title><rect x="198.7" y="883.0" width="10.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="201.7" y="894.0"></text>
</g>
<g>
<title>__fentry__ (7 samples, 0.06%)</title><rect x="199.1" y="867.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="202.1" y="878.0"></text>
</g>
<g>
<title>ftrace_ops_assist_func (64 samples, 0.59%)</title><rect x="199.9" y="867.0" width="7.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="202.9" y="878.0"></text>
</g>
<g>
<title>kprobe_dispatcher (5 samples, 0.05%)</title><rect x="200.7" y="851.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="203.7" y="862.0"></text>
</g>
<g>
<title>kprobe_ftrace_handler (52 samples, 0.48%)</title><rect x="201.2" y="851.0" width="5.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="204.2" y="862.0"></text>
</g>
<g>
<title>get_kprobe (14 samples, 0.13%)</title><rect x="201.7" y="835.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="204.7" y="846.0"></text>
</g>
<g>
<title>kprobe_dispatcher (34 samples, 0.31%)</title><rect x="203.2" y="835.0" width="3.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="206.2" y="846.0"></text>
</g>
<g>
<title>kprobe_perf_func (28 samples, 0.26%)</title><rect x="203.9" y="819.0" width="3.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="206.9" y="830.0"></text>
</g>
<g>
<title>cleanup_module	[snd_soc_skl] (16 samples, 0.15%)</title><rect x="204.0" y="803.0" width="1.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="207.0" y="814.0"></text>
</g>
<g>
<title>trace_call_bpf (11 samples, 0.10%)</title><rect x="205.7" y="803.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="208.7" y="814.0"></text>
</g>
<g>
<title>kprobe_ftrace_handler (17 samples, 0.16%)</title><rect x="206.9" y="867.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="209.9" y="878.0"></text>
</g>
<g>
<title>lock_sock_nested (15 samples, 0.14%)</title><rect x="208.8" y="883.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="211.8" y="894.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (7 samples, 0.06%)</title><rect x="209.4" y="867.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="212.4" y="878.0"></text>
</g>
<g>
<title>release_sock (298 samples, 2.76%)</title><rect x="210.4" y="883.0" width="32.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="213.4" y="894.0">re..</text>
</g>
<g>
<title>__release_sock (273 samples, 2.53%)</title><rect x="211.1" y="867.0" width="29.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="214.1" y="878.0">__..</text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.03%)</title><rect x="212.3" y="851.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="215.3" y="862.0"></text>
</g>
<g>
<title>ipv4_dst_check (5 samples, 0.05%)</title><rect x="212.7" y="851.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="215.7" y="862.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (253 samples, 2.34%)</title><rect x="213.3" y="851.0" width="27.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="216.3" y="862.0">t..</text>
</g>
<g>
<title>tcp_ack (3 samples, 0.03%)</title><rect x="213.9" y="835.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="216.9" y="846.0"></text>
</g>
<g>
<title>tcp_rcv_established (240 samples, 2.22%)</title><rect x="214.5" y="835.0" width="26.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="217.5" y="846.0">t..</text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.03%)</title><rect x="215.1" y="819.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="218.1" y="830.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.03%)</title><rect x="215.1" y="803.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="218.1" y="814.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (7 samples, 0.06%)</title><rect x="215.4" y="819.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="218.4" y="830.0"></text>
</g>
<g>
<title>sched_clock_cpu (6 samples, 0.06%)</title><rect x="216.2" y="819.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="219.2" y="830.0"></text>
</g>
<g>
<title>sched_clock (5 samples, 0.05%)</title><rect x="216.3" y="803.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="219.3" y="814.0"></text>
</g>
<g>
<title>native_sched_clock (5 samples, 0.05%)</title><rect x="216.3" y="787.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="219.3" y="798.0"></text>
</g>
<g>
<title>tcp_ack (161 samples, 1.49%)</title><rect x="216.9" y="819.0" width="17.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="219.9" y="830.0"></text>
</g>
<g>
<title>bictcp_acked (7 samples, 0.06%)</title><rect x="221.4" y="803.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="224.4" y="814.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (94 samples, 0.87%)</title><rect x="222.6" y="803.0" width="10.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="225.6" y="814.0"></text>
</g>
<g>
<title>__kfree_skb (33 samples, 0.31%)</title><rect x="225.0" y="787.0" width="3.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="228.0" y="798.0"></text>
</g>
<g>
<title>kfree_skbmem (5 samples, 0.05%)</title><rect x="225.2" y="771.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="228.2" y="782.0"></text>
</g>
<g>
<title>kmem_cache_free (5 samples, 0.05%)</title><rect x="225.2" y="755.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="228.2" y="766.0"></text>
</g>
<g>
<title>skb_release_all (26 samples, 0.24%)</title><rect x="225.7" y="771.0" width="2.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="228.7" y="782.0"></text>
</g>
<g>
<title>skb_release_data (18 samples, 0.17%)</title><rect x="226.1" y="755.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="229.1" y="766.0"></text>
</g>
<g>
<title>skb_free_head (5 samples, 0.05%)</title><rect x="227.6" y="739.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="230.6" y="750.0"></text>
</g>
<g>
<title>kfree (5 samples, 0.05%)</title><rect x="227.6" y="723.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="230.6" y="734.0"></text>
</g>
<g>
<title>skb_release_head_state (4 samples, 0.04%)</title><rect x="228.1" y="755.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="231.1" y="766.0"></text>
</g>
<g>
<title>bictcp_acked (5 samples, 0.05%)</title><rect x="228.6" y="787.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="231.6" y="798.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.40 (24 samples, 0.22%)</title><rect x="229.7" y="787.0" width="2.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="232.7" y="798.0"></text>
</g>
<g>
<title>minmax_running_min (7 samples, 0.06%)</title><rect x="231.4" y="771.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="234.4" y="782.0"></text>
</g>
<g>
<title>minmax_subwin_update (4 samples, 0.04%)</title><rect x="231.7" y="755.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="234.7" y="766.0"></text>
</g>
<g>
<title>tcp_chrono_stop (3 samples, 0.03%)</title><rect x="232.4" y="787.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="235.4" y="798.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (9 samples, 0.08%)</title><rect x="233.4" y="803.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="236.4" y="814.0"></text>
</g>
<g>
<title>tcp_data_queue (36 samples, 0.33%)</title><rect x="234.6" y="819.0" width="4.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="237.6" y="830.0"></text>
</g>
<g>
<title>__kfree_skb (34 samples, 0.31%)</title><rect x="234.9" y="803.0" width="3.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="237.9" y="814.0"></text>
</g>
<g>
<title>kfree_skbmem (8 samples, 0.07%)</title><rect x="234.9" y="787.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="237.9" y="798.0"></text>
</g>
<g>
<title>kmem_cache_free (8 samples, 0.07%)</title><rect x="234.9" y="771.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="237.9" y="782.0"></text>
</g>
<g>
<title>skb_release_all (25 samples, 0.23%)</title><rect x="235.7" y="787.0" width="2.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="238.7" y="798.0"></text>
</g>
<g>
<title>skb_release_data (21 samples, 0.19%)</title><rect x="236.0" y="771.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="239.0" y="782.0"></text>
</g>
<g>
<title>kfree (3 samples, 0.03%)</title><rect x="236.2" y="755.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="239.2" y="766.0"></text>
</g>
<g>
<title>skb_free_head (16 samples, 0.15%)</title><rect x="236.5" y="755.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="239.5" y="766.0"></text>
</g>
<g>
<title>kfree (15 samples, 0.14%)</title><rect x="236.6" y="739.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="239.6" y="750.0"></text>
</g>
<g>
<title>tcp_rate_gen (8 samples, 0.07%)</title><rect x="238.7" y="819.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="241.7" y="830.0"></text>
</g>
<g>
<title>tcp_validate_incoming (8 samples, 0.07%)</title><rect x="239.8" y="819.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="242.8" y="830.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.04%)</title><rect x="240.9" y="867.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="243.9" y="878.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (6 samples, 0.06%)</title><rect x="241.3" y="867.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="244.3" y="878.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (6 samples, 0.06%)</title><rect x="241.3" y="851.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="244.3" y="862.0"></text>
</g>
<g>
<title>tcp_release_cb (5 samples, 0.05%)</title><rect x="242.0" y="867.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="245.0" y="878.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (4 samples, 0.04%)</title><rect x="242.5" y="867.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="245.5" y="878.0"></text>
</g>
<g>
<title>tcp_push (8 samples, 0.07%)</title><rect x="243.4" y="883.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="246.4" y="894.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (27 samples, 0.25%)</title><rect x="244.3" y="883.0" width="2.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="247.3" y="894.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.03%)</title><rect x="247.2" y="883.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="250.2" y="894.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (3,436 samples, 31.79%)</title><rect x="247.5" y="883.0" width="375.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="250.5" y="894.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (26 samples, 0.24%)</title><rect x="252.4" y="867.0" width="2.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="255.4" y="878.0"></text>
</g>
<g>
<title>__check_heap_object (5 samples, 0.05%)</title><rect x="253.2" y="851.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="256.2" y="862.0"></text>
</g>
<g>
<title>__virt_addr_valid (14 samples, 0.13%)</title><rect x="253.8" y="851.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="256.8" y="862.0"></text>
</g>
<g>
<title>_copy_from_iter_full (30 samples, 0.28%)</title><rect x="255.3" y="867.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="258.3" y="878.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (21 samples, 0.19%)</title><rect x="255.9" y="851.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="258.9" y="862.0"></text>
</g>
<g>
<title>check_stack_object (4 samples, 0.04%)</title><rect x="258.6" y="867.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="261.6" y="878.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (145 samples, 1.34%)</title><rect x="259.1" y="867.0" width="15.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="262.1" y="878.0"></text>
</g>
<g>
<title>__alloc_skb (136 samples, 1.26%)</title><rect x="260.0" y="851.0" width="14.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="263.0" y="862.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.43 (47 samples, 0.43%)</title><rect x="263.7" y="835.0" width="5.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="266.7" y="846.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (44 samples, 0.41%)</title><rect x="263.8" y="819.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="266.8" y="830.0"></text>
</g>
<g>
<title>__slab_alloc (17 samples, 0.16%)</title><rect x="266.3" y="803.0" width="1.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="269.3" y="814.0"></text>
</g>
<g>
<title>___slab_alloc (5 samples, 0.05%)</title><rect x="267.6" y="787.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="270.6" y="798.0"></text>
</g>
<g>
<title>new_slab (4 samples, 0.04%)</title><rect x="267.6" y="771.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="270.6" y="782.0"></text>
</g>
<g>
<title>alloc_pages_current (3 samples, 0.03%)</title><rect x="267.7" y="755.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="270.7" y="766.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (3 samples, 0.03%)</title><rect x="267.7" y="739.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="270.7" y="750.0"></text>
</g>
<g>
<title>get_page_from_freelist (3 samples, 0.03%)</title><rect x="267.7" y="723.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="270.7" y="734.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (43 samples, 0.40%)</title><rect x="268.9" y="835.0" width="4.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="271.9" y="846.0"></text>
</g>
<g>
<title>__slab_alloc (14 samples, 0.13%)</title><rect x="271.4" y="819.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="274.4" y="830.0"></text>
</g>
<g>
<title>___slab_alloc (3 samples, 0.03%)</title><rect x="272.6" y="803.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="275.6" y="814.0"></text>
</g>
<g>
<title>prefetch_freepointer (6 samples, 0.06%)</title><rect x="273.0" y="819.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="276.0" y="830.0"></text>
</g>
<g>
<title>ksize (7 samples, 0.06%)</title><rect x="273.6" y="835.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="276.6" y="846.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (4 samples, 0.04%)</title><rect x="274.4" y="835.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="277.4" y="846.0"></text>
</g>
<g>
<title>skb_entail (30 samples, 0.28%)</title><rect x="274.9" y="867.0" width="3.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="277.9" y="878.0"></text>
</g>
<g>
<title>tcp_chrono_start (9 samples, 0.08%)</title><rect x="277.2" y="851.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="280.2" y="862.0"></text>
</g>
<g>
<title>tcp_push (3,058 samples, 28.29%)</title><rect x="278.4" y="867.0" width="333.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="281.4" y="878.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (3,043 samples, 28.15%)</title><rect x="279.8" y="851.0" width="332.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="282.8" y="862.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.03%)</title><rect x="280.6" y="835.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="283.6" y="846.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.29 (6 samples, 0.06%)</title><rect x="280.9" y="835.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="283.9" y="846.0"></text>
</g>
<g>
<title>tcp_write_xmit (3,026 samples, 27.99%)</title><rect x="281.7" y="835.0" width="330.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="284.7" y="846.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (5 samples, 0.05%)</title><rect x="284.6" y="819.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="287.6" y="830.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (2,876 samples, 26.60%)</title><rect x="285.2" y="819.0" width="313.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="288.2" y="830.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.03%)</title><rect x="289.4" y="803.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="292.4" y="814.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.03%)</title><rect x="289.8" y="803.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="292.8" y="814.0"></text>
</g>
<g>
<title>ip_copy_addrs (4 samples, 0.04%)</title><rect x="290.4" y="803.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="293.4" y="814.0"></text>
</g>
<g>
<title>ip_queue_xmit (2,787 samples, 25.78%)</title><rect x="291.0" y="803.0" width="304.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="294.0" y="814.0">ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (5 samples, 0.05%)</title><rect x="293.0" y="787.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="296.0" y="798.0"></text>
</g>
<g>
<title>ip_local_out (2,748 samples, 25.42%)</title><rect x="293.6" y="787.0" width="300.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="296.6" y="798.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (467 samples, 4.32%)</title><rect x="293.9" y="771.0" width="51.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="296.9" y="782.0">__ip_..</text>
</g>
<g>
<title>__indirect_thunk_start (4 samples, 0.04%)</title><rect x="294.6" y="755.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="297.6" y="766.0"></text>
</g>
<g>
<title>ip_send_check (5 samples, 0.05%)</title><rect x="295.0" y="755.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="298.0" y="766.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (21 samples, 0.19%)</title><rect x="295.6" y="755.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="298.6" y="766.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn	[iptable_nat] (11 samples, 0.10%)</title><rect x="297.9" y="755.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="300.9" y="766.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (8 samples, 0.07%)</title><rect x="299.1" y="755.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="302.1" y="766.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack_ipv4] (11 samples, 0.10%)</title><rect x="299.9" y="755.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="302.9" y="766.0"></text>
</g>
<g>
<title>nf_hook_slow (401 samples, 3.71%)</title><rect x="301.1" y="755.0" width="43.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="304.1" y="766.0">nf_h..</text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (34 samples, 0.31%)</title><rect x="301.8" y="739.0" width="3.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="304.8" y="750.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (33 samples, 0.31%)</title><rect x="301.9" y="723.0" width="3.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="304.9" y="734.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn	[iptable_nat] (22 samples, 0.20%)</title><rect x="305.5" y="739.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="308.5" y="750.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat_ipv4] (6 samples, 0.06%)</title><rect x="305.5" y="723.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="308.5" y="734.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat_ipv4] (16 samples, 0.15%)</title><rect x="306.1" y="723.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="309.1" y="734.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat_ipv4] (6 samples, 0.06%)</title><rect x="306.9" y="707.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="309.9" y="718.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (3 samples, 0.03%)</title><rect x="307.6" y="707.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="310.6" y="718.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack_ipv4] (328 samples, 3.03%)</title><rect x="307.9" y="739.0" width="35.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="310.9" y="750.0">ipv..</text>
</g>
<g>
<title>ipv4_get_l4proto	[nf_conntrack_ipv4] (4 samples, 0.04%)</title><rect x="308.4" y="723.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="311.4" y="734.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (314 samples, 2.90%)</title><rect x="308.9" y="723.0" width="34.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="311.9" y="734.0">nf..</text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (116 samples, 1.07%)</title><rect x="316.2" y="707.0" width="12.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="319.2" y="718.0"></text>
</g>
<g>
<title>__nf_ct_l4proto_find	[nf_conntrack] (7 samples, 0.06%)</title><rect x="328.9" y="707.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="331.9" y="718.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (16 samples, 0.15%)</title><rect x="329.8" y="707.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="332.8" y="718.0"></text>
</g>
<g>
<title>ipv4_get_l4proto	[nf_conntrack_ipv4] (7 samples, 0.06%)</title><rect x="331.6" y="707.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="334.6" y="718.0"></text>
</g>
<g>
<title>ipv4_pkt_to_tuple	[nf_conntrack_ipv4] (6 samples, 0.06%)</title><rect x="332.3" y="707.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="335.3" y="718.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (9 samples, 0.08%)</title><rect x="333.0" y="707.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="336.0" y="718.0"></text>
</g>
<g>
<title>tcp_error	[nf_conntrack] (12 samples, 0.11%)</title><rect x="334.0" y="707.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="337.0" y="718.0"></text>
</g>
<g>
<title>tcp_packet	[nf_conntrack] (67 samples, 0.62%)</title><rect x="335.3" y="707.0" width="7.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="338.3" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.03%)</title><rect x="337.6" y="691.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="340.6" y="702.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct	[nf_conntrack] (5 samples, 0.05%)</title><rect x="337.9" y="691.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="340.9" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (6 samples, 0.06%)</title><rect x="338.5" y="691.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="341.5" y="702.0"></text>
</g>
<g>
<title>tcp_in_window	[nf_conntrack] (28 samples, 0.26%)</title><rect x="339.5" y="691.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="342.5" y="702.0"></text>
</g>
<g>
<title>nf_ct_seq_offset	[nf_conntrack] (3 samples, 0.03%)</title><rect x="342.3" y="675.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="345.3" y="686.0"></text>
</g>
<g>
<title>tcp_pkt_to_tuple	[nf_conntrack] (5 samples, 0.05%)</title><rect x="342.6" y="707.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="345.6" y="718.0"></text>
</g>
<g>
<title>tcp_error	[nf_conntrack] (4 samples, 0.04%)</title><rect x="343.2" y="723.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="346.2" y="734.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (8 samples, 0.07%)</title><rect x="343.7" y="739.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="346.7" y="750.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat_ipv4] (3 samples, 0.03%)</title><rect x="344.6" y="739.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="347.6" y="750.0"></text>
</g>
<g>
<title>ip_output (2,271 samples, 21.01%)</title><rect x="345.0" y="771.0" width="247.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="348.0" y="782.0">ip_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.03%)</title><rect x="345.9" y="755.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="348.9" y="766.0"></text>
</g>
<g>
<title>ip_finish_output (2,193 samples, 20.29%)</title><rect x="346.4" y="755.0" width="239.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="349.4" y="766.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (18 samples, 0.17%)</title><rect x="348.3" y="739.0" width="1.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="351.3" y="750.0"></text>
</g>
<g>
<title>ip_finish_output2 (2,156 samples, 19.94%)</title><rect x="350.4" y="739.0" width="235.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="353.4" y="750.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (2,004 samples, 18.54%)</title><rect x="354.9" y="723.0" width="218.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="357.9" y="734.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.17 (1,999 samples, 18.49%)</title><rect x="355.5" y="707.0" width="218.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="358.5" y="718.0">do_softirq.part.17</text>
</g>
<g>
<title>do_softirq_own_stack (1,990 samples, 18.41%)</title><rect x="356.5" y="691.0" width="217.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="359.5" y="702.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (1,985 samples, 18.36%)</title><rect x="356.5" y="675.0" width="216.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="359.5" y="686.0">__softirqentry_text_start</text>
</g>
<g>
<title>net_rx_action (1,938 samples, 17.93%)</title><rect x="360.3" y="659.0" width="211.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="363.3" y="670.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (8 samples, 0.07%)</title><rect x="362.5" y="643.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="365.5" y="654.0"></text>
</g>
<g>
<title>process_backlog (1,909 samples, 17.66%)</title><rect x="363.5" y="643.0" width="208.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="366.5" y="654.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (1,877 samples, 17.36%)</title><rect x="366.7" y="627.0" width="204.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="369.7" y="638.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (1,861 samples, 17.22%)</title><rect x="366.8" y="611.0" width="203.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="369.8" y="622.0">__netif_receive_skb_core</text>
</g>
<g>
<title>ip_rcv (1,808 samples, 16.73%)</title><rect x="371.8" y="595.0" width="197.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="374.8" y="606.0">ip_rcv</text>
</g>
<g>
<title>__indirect_thunk_start (6 samples, 0.06%)</title><rect x="374.2" y="579.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="377.2" y="590.0"></text>
</g>
<g>
<title>ip_local_deliver (17 samples, 0.16%)</title><rect x="374.8" y="579.0" width="1.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="377.8" y="590.0"></text>
</g>
<g>
<title>ip_rcv_finish (1,650 samples, 15.26%)</title><rect x="376.7" y="579.0" width="180.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="379.7" y="590.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (1,617 samples, 14.96%)</title><rect x="379.2" y="563.0" width="176.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="382.2" y="574.0">ip_local_deliver</text>
</g>
<g>
<title>__indirect_thunk_start (8 samples, 0.07%)</title><rect x="380.6" y="547.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="383.6" y="558.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1,443 samples, 13.35%)</title><rect x="381.5" y="547.0" width="157.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="384.5" y="558.0">ip_local_deliver_fin..</text>
</g>
<g>
<title>raw_local_deliver (13 samples, 0.12%)</title><rect x="383.9" y="531.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="386.9" y="542.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (4 samples, 0.04%)</title><rect x="385.5" y="531.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="388.5" y="542.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1,402 samples, 12.97%)</title><rect x="385.9" y="531.0" width="153.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="388.9" y="542.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (176 samples, 1.63%)</title><rect x="393.1" y="515.0" width="19.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="396.1" y="526.0"></text>
</g>
<g>
<title>inet_ehashfn (11 samples, 0.10%)</title><rect x="411.2" y="499.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="414.2" y="510.0"></text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.33 (3 samples, 0.03%)</title><rect x="412.4" y="515.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="415.4" y="526.0"></text>
</g>
<g>
<title>_raw_spin_lock (10 samples, 0.09%)</title><rect x="412.7" y="515.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="415.7" y="526.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (47 samples, 0.43%)</title><rect x="414.4" y="515.0" width="5.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="417.4" y="526.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (37 samples, 0.34%)</title><rect x="414.6" y="499.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="417.6" y="510.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (4 samples, 0.04%)</title><rect x="418.7" y="499.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="421.7" y="510.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (4 samples, 0.04%)</title><rect x="419.1" y="499.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="422.1" y="510.0"></text>
</g>
<g>
<title>skb_condense (3 samples, 0.03%)</title><rect x="419.6" y="515.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="422.6" y="526.0"></text>
</g>
<g>
<title>sock_put (9 samples, 0.08%)</title><rect x="419.9" y="515.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="422.9" y="526.0"></text>
</g>
<g>
<title>tcp_add_backlog (10 samples, 0.09%)</title><rect x="420.9" y="515.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="423.9" y="526.0"></text>
</g>
<g>
<title>tcp_md5_do_lookup (23 samples, 0.21%)</title><rect x="422.0" y="515.0" width="2.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="425.0" y="526.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1,036 samples, 9.58%)</title><rect x="424.7" y="515.0" width="113.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="427.7" y="526.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>sock_def_readable (5 samples, 0.05%)</title><rect x="425.0" y="499.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="428.0" y="510.0"></text>
</g>
<g>
<title>tcp_rcv_established (1,025 samples, 9.48%)</title><rect x="425.9" y="499.0" width="111.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="428.9" y="510.0">tcp_rcv_estab..</text>
</g>
<g>
<title>__tcp_ack_snd_check (616 samples, 5.70%)</title><rect x="431.2" y="483.0" width="67.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="434.2" y="494.0">__tcp_a..</text>
</g>
<g>
<title>tcp_send_ack (606 samples, 5.61%)</title><rect x="431.6" y="467.0" width="66.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="434.6" y="478.0">tcp_sen..</text>
</g>
<g>
<title>__tcp_send_ack.part.39 (605 samples, 5.60%)</title><rect x="431.6" y="451.0" width="66.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="434.6" y="462.0">__tcp_s..</text>
</g>
<g>
<title>__alloc_skb (47 samples, 0.43%)</title><rect x="434.7" y="435.0" width="5.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="437.7" y="446.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.43 (18 samples, 0.17%)</title><rect x="435.6" y="419.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="438.6" y="430.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (16 samples, 0.15%)</title><rect x="435.8" y="403.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="438.8" y="414.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (12 samples, 0.11%)</title><rect x="437.6" y="419.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="440.6" y="430.0"></text>
</g>
<g>
<title>prefetch_freepointer (9 samples, 0.08%)</title><rect x="437.9" y="403.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="440.9" y="414.0"></text>
</g>
<g>
<title>ksize (8 samples, 0.07%)</title><rect x="438.9" y="419.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="441.9" y="430.0"></text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.03%)</title><rect x="440.1" y="435.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="443.1" y="446.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (511 samples, 4.73%)</title><rect x="440.4" y="435.0" width="55.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="443.4" y="446.0">__tcp..</text>
</g>
<g>
<title>ip_copy_addrs (7 samples, 0.06%)</title><rect x="444.4" y="419.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="447.4" y="430.0"></text>
</g>
<g>
<title>ip_queue_xmit (449 samples, 4.15%)</title><rect x="445.2" y="419.0" width="49.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="448.2" y="430.0">ip_qu..</text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.03%)</title><rect x="446.3" y="403.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="449.3" y="414.0"></text>
</g>
<g>
<title>ip_local_out (421 samples, 3.89%)</title><rect x="446.6" y="403.0" width="46.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="449.6" y="414.0">ip_l..</text>
</g>
<g>
<title>__ip_local_out (249 samples, 2.30%)</title><rect x="446.7" y="387.0" width="27.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="449.7" y="398.0">_..</text>
</g>
<g>
<title>__indirect_thunk_start (4 samples, 0.04%)</title><rect x="447.1" y="371.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="450.1" y="382.0"></text>
</g>
<g>
<title>ip_send_check (5 samples, 0.05%)</title><rect x="447.5" y="371.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="450.5" y="382.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (7 samples, 0.06%)</title><rect x="448.1" y="371.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="451.1" y="382.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn	[iptable_nat] (8 samples, 0.07%)</title><rect x="448.8" y="371.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="451.8" y="382.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (5 samples, 0.05%)</title><rect x="449.7" y="371.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="452.7" y="382.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack_ipv4] (5 samples, 0.05%)</title><rect x="450.2" y="371.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="453.2" y="382.0"></text>
</g>
<g>
<title>nf_hook_slow (212 samples, 1.96%)</title><rect x="450.8" y="371.0" width="23.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="453.8" y="382.0">n..</text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (19 samples, 0.18%)</title><rect x="451.4" y="355.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="454.4" y="366.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (17 samples, 0.16%)</title><rect x="451.7" y="339.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="454.7" y="350.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn	[iptable_nat] (9 samples, 0.08%)</title><rect x="453.5" y="355.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="456.5" y="366.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn	[nf_nat_ipv4] (9 samples, 0.08%)</title><rect x="453.5" y="339.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="456.5" y="350.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat_ipv4] (8 samples, 0.07%)</title><rect x="453.6" y="323.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="456.6" y="334.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (4 samples, 0.04%)</title><rect x="454.1" y="307.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="457.1" y="318.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack_ipv4] (178 samples, 1.65%)</title><rect x="454.5" y="355.0" width="19.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="457.5" y="366.0"></text>
</g>
<g>
<title>__indirect_thunk_start (3 samples, 0.03%)</title><rect x="454.5" y="339.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="457.5" y="350.0"></text>
</g>
<g>
<title>ipv4_get_l4proto	[nf_conntrack_ipv4] (5 samples, 0.05%)</title><rect x="455.0" y="339.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="458.0" y="350.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (154 samples, 1.42%)</title><rect x="455.6" y="339.0" width="16.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="458.6" y="350.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get	[nf_conntrack] (50 samples, 0.46%)</title><rect x="457.3" y="323.0" width="5.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="460.3" y="334.0"></text>
</g>
<g>
<title>__nf_ct_l4proto_find	[nf_conntrack] (6 samples, 0.06%)</title><rect x="462.8" y="323.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="465.8" y="334.0"></text>
</g>
<g>
<title>hash_conntrack_raw	[nf_conntrack] (8 samples, 0.07%)</title><rect x="463.4" y="323.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="466.4" y="334.0"></text>
</g>
<g>
<title>ipv4_get_l4proto	[nf_conntrack_ipv4] (3 samples, 0.03%)</title><rect x="464.3" y="323.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="467.3" y="334.0"></text>
</g>
<g>
<title>ipv4_pkt_to_tuple	[nf_conntrack_ipv4] (4 samples, 0.04%)</title><rect x="464.6" y="323.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="467.6" y="334.0"></text>
</g>
<g>
<title>nf_ct_get_tuple	[nf_conntrack] (14 samples, 0.13%)</title><rect x="465.1" y="323.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="468.1" y="334.0"></text>
</g>
<g>
<title>ipv4_pkt_to_tuple	[nf_conntrack_ipv4] (5 samples, 0.05%)</title><rect x="465.4" y="307.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="468.4" y="318.0"></text>
</g>
<g>
<title>tcp_pkt_to_tuple	[nf_conntrack] (6 samples, 0.06%)</title><rect x="466.0" y="307.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="469.0" y="318.0"></text>
</g>
<g>
<title>tcp_error	[nf_conntrack] (9 samples, 0.08%)</title><rect x="466.6" y="323.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="469.6" y="334.0"></text>
</g>
<g>
<title>tcp_packet	[nf_conntrack] (34 samples, 0.31%)</title><rect x="467.6" y="323.0" width="3.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="470.6" y="334.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.03%)</title><rect x="469.2" y="307.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="472.2" y="318.0"></text>
</g>
<g>
<title>tcp_in_window	[nf_conntrack] (16 samples, 0.15%)</title><rect x="469.6" y="307.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="472.6" y="318.0"></text>
</g>
<g>
<title>tcp_pkt_to_tuple	[nf_conntrack] (10 samples, 0.09%)</title><rect x="471.3" y="323.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="474.3" y="334.0"></text>
</g>
<g>
<title>tcp_error	[nf_conntrack] (5 samples, 0.05%)</title><rect x="472.4" y="339.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="475.4" y="350.0"></text>
</g>
<g>
<title>tcp_get_timeouts	[nf_conntrack] (4 samples, 0.04%)</title><rect x="472.9" y="339.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="475.9" y="350.0"></text>
</g>
<g>
<title>tcp_packet	[nf_conntrack] (5 samples, 0.05%)</title><rect x="473.4" y="339.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="476.4" y="350.0"></text>
</g>
<g>
<title>ip_output (168 samples, 1.55%)</title><rect x="473.9" y="387.0" width="18.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="476.9" y="398.0"></text>
</g>
<g>
<title>__indirect_thunk_start (3 samples, 0.03%)</title><rect x="474.2" y="371.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="477.2" y="382.0"></text>
</g>
<g>
<title>ip_finish_output (124 samples, 1.15%)</title><rect x="474.6" y="371.0" width="13.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="477.6" y="382.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (9 samples, 0.08%)</title><rect x="475.7" y="355.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="478.7" y="366.0"></text>
</g>
<g>
<title>ip_finish_output2 (104 samples, 0.96%)</title><rect x="476.7" y="355.0" width="11.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="479.7" y="366.0"></text>
</g>
<g>
<title>dev_queue_xmit (88 samples, 0.81%)</title><rect x="478.4" y="339.0" width="9.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="481.4" y="350.0"></text>
</g>
<g>
<title>__dev_queue_xmit (86 samples, 0.80%)</title><rect x="478.5" y="323.0" width="9.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="481.5" y="334.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (47 samples, 0.43%)</title><rect x="480.8" y="307.0" width="5.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="483.8" y="318.0"></text>
</g>
<g>
<title>__sock_wfree (8 samples, 0.07%)</title><rect x="481.5" y="291.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="484.5" y="302.0"></text>
</g>
<g>
<title>loopback_xmit (33 samples, 0.31%)</title><rect x="482.3" y="291.0" width="3.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="485.3" y="302.0"></text>
</g>
<g>
<title>eth_type_trans (5 samples, 0.05%)</title><rect x="483.4" y="275.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="486.4" y="286.0"></text>
</g>
<g>
<title>netif_rx (18 samples, 0.17%)</title><rect x="484.0" y="275.0" width="1.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="487.0" y="286.0"></text>
</g>
<g>
<title>netif_rx_internal (18 samples, 0.17%)</title><rect x="484.0" y="259.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="487.0" y="270.0"></text>
</g>
<g>
<title>enqueue_to_backlog (18 samples, 0.17%)</title><rect x="484.0" y="243.0" width="1.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="487.0" y="254.0"></text>
</g>
<g>
<title>loopback_xmit (6 samples, 0.06%)</title><rect x="485.9" y="307.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="488.9" y="318.0"></text>
</g>
<g>
<title>validate_xmit_skb (11 samples, 0.10%)</title><rect x="486.7" y="307.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="489.7" y="318.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_out	[iptable_nat] (3 samples, 0.03%)</title><rect x="488.1" y="371.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="491.1" y="382.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack_ipv4] (3 samples, 0.03%)</title><rect x="488.4" y="371.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="491.4" y="382.0"></text>
</g>
<g>
<title>ipv4_helper	[nf_conntrack_ipv4] (5 samples, 0.05%)</title><rect x="488.8" y="371.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="491.8" y="382.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.04%)</title><rect x="489.3" y="371.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="492.3" y="382.0"></text>
</g>
<g>
<title>nf_hook_slow (23 samples, 0.21%)</title><rect x="489.8" y="371.0" width="2.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="492.8" y="382.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_out	[iptable_nat] (14 samples, 0.13%)</title><rect x="490.3" y="355.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="493.3" y="366.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat_ipv4] (14 samples, 0.13%)</title><rect x="490.3" y="339.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="493.3" y="350.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat_ipv4] (9 samples, 0.08%)</title><rect x="490.8" y="323.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="493.8" y="334.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (6 samples, 0.06%)</title><rect x="491.2" y="307.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="494.2" y="318.0"></text>
</g>
<g>
<title>ipv4_dst_check (13 samples, 0.12%)</title><rect x="492.8" y="403.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="495.8" y="414.0"></text>
</g>
<g>
<title>tcp_established_options (8 samples, 0.07%)</title><rect x="494.2" y="419.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="497.2" y="430.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (4 samples, 0.04%)</title><rect x="494.7" y="403.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="497.7" y="414.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (6 samples, 0.06%)</title><rect x="495.1" y="419.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="498.1" y="430.0"></text>
</g>
<g>
<title>tcp_v4_send_check (4 samples, 0.04%)</title><rect x="495.8" y="419.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="498.8" y="430.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (4 samples, 0.04%)</title><rect x="495.8" y="403.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="498.8" y="414.0"></text>
</g>
<g>
<title>ip_queue_xmit (5 samples, 0.05%)</title><rect x="496.2" y="435.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="499.2" y="446.0"></text>
</g>
<g>
<title>tcp_v4_send_check (5 samples, 0.05%)</title><rect x="497.1" y="435.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="500.1" y="446.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (7 samples, 0.06%)</title><rect x="497.7" y="467.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="500.7" y="478.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.06%)</title><rect x="497.8" y="451.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="500.8" y="462.0"></text>
</g>
<g>
<title>mod_timer (5 samples, 0.05%)</title><rect x="497.9" y="435.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="500.9" y="446.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="498.0" y="419.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="501.0" y="430.0"></text>
</g>
<g>
<title>kfree_skb_partial (10 samples, 0.09%)</title><rect x="498.7" y="483.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="501.7" y="494.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.03%)</title><rect x="498.7" y="467.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="501.7" y="478.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.06%)</title><rect x="499.0" y="467.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="502.0" y="478.0"></text>
</g>
<g>
<title>skb_release_head_state (4 samples, 0.04%)</title><rect x="499.4" y="451.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="502.4" y="462.0"></text>
</g>
<g>
<title>sched_clock_cpu (12 samples, 0.11%)</title><rect x="499.8" y="483.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="502.8" y="494.0"></text>
</g>
<g>
<title>sched_clock (9 samples, 0.08%)</title><rect x="500.1" y="467.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="503.1" y="478.0"></text>
</g>
<g>
<title>native_sched_clock (9 samples, 0.08%)</title><rect x="500.1" y="451.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="503.1" y="462.0"></text>
</g>
<g>
<title>sock_def_readable (149 samples, 1.38%)</title><rect x="501.1" y="483.0" width="16.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="504.1" y="494.0"></text>
</g>
<g>
<title>__wake_up_sync_key (106 samples, 0.98%)</title><rect x="505.8" y="467.0" width="11.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="508.8" y="478.0"></text>
</g>
<g>
<title>__wake_up_common_lock (103 samples, 0.95%)</title><rect x="505.8" y="451.0" width="11.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="508.8" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (102 samples, 0.94%)</title><rect x="505.9" y="435.0" width="11.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="508.9" y="446.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="517.0" y="451.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="520.0" y="462.0"></text>
</g>
<g>
<title>tcp_ack (10 samples, 0.09%)</title><rect x="517.4" y="483.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="520.4" y="494.0"></text>
</g>
<g>
<title>tcp_data_queue (68 samples, 0.63%)</title><rect x="518.5" y="483.0" width="7.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="521.5" y="494.0"></text>
</g>
<g>
<title>sock_def_readable (27 samples, 0.25%)</title><rect x="519.3" y="467.0" width="3.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="522.3" y="478.0"></text>
</g>
<g>
<title>__wake_up_sync_key (18 samples, 0.17%)</title><rect x="520.3" y="451.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="523.3" y="462.0"></text>
</g>
<g>
<title>__wake_up_common_lock (18 samples, 0.17%)</title><rect x="520.3" y="435.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="523.3" y="446.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (18 samples, 0.17%)</title><rect x="520.3" y="419.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="523.3" y="430.0"></text>
</g>
<g>
<title>tcp_event_data_recv (10 samples, 0.09%)</title><rect x="522.3" y="467.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="525.3" y="478.0"></text>
</g>
<g>
<title>tcp_queue_rcv (19 samples, 0.18%)</title><rect x="523.4" y="467.0" width="2.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="526.4" y="478.0"></text>
</g>
<g>
<title>tcp_try_coalesce (19 samples, 0.18%)</title><rect x="523.4" y="451.0" width="2.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="526.4" y="462.0"></text>
</g>
<g>
<title>skb_try_coalesce (9 samples, 0.08%)</title><rect x="524.5" y="435.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="527.5" y="446.0"></text>
</g>
<g>
<title>tcp_try_rmem_schedule (4 samples, 0.04%)</title><rect x="525.4" y="467.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="528.4" y="478.0"></text>
</g>
<g>
<title>tcp_event_data_recv (28 samples, 0.26%)</title><rect x="525.9" y="483.0" width="3.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="528.9" y="494.0"></text>
</g>
<g>
<title>tcp_grow_window.isra.24 (3 samples, 0.03%)</title><rect x="528.6" y="467.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="531.6" y="478.0"></text>
</g>
<g>
<title>tcp_queue_rcv (80 samples, 0.74%)</title><rect x="528.9" y="483.0" width="8.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="531.9" y="494.0"></text>
</g>
<g>
<title>tcp_try_coalesce (76 samples, 0.70%)</title><rect x="529.4" y="467.0" width="8.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="532.4" y="478.0"></text>
</g>
<g>
<title>skb_try_coalesce (48 samples, 0.44%)</title><rect x="532.4" y="451.0" width="5.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="535.4" y="462.0"></text>
</g>
<g>
<title>memcpy_erms (10 samples, 0.09%)</title><rect x="536.5" y="435.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="539.5" y="446.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (9 samples, 0.08%)</title><rect x="537.8" y="515.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="540.8" y="526.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (13 samples, 0.12%)</title><rect x="539.0" y="547.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="542.0" y="558.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_fn	[iptable_nat] (8 samples, 0.07%)</title><rect x="540.4" y="547.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="543.4" y="558.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack_ipv4] (7 samples, 0.06%)</title><rect x="541.3" y="547.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="544.3" y="558.0"></text>
</g>
<g>
<title>ipv4_helper	[nf_conntrack_ipv4] (18 samples, 0.17%)</title><rect x="542.0" y="547.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="545.0" y="558.0"></text>
</g>
<g>
<title>nf_hook_slow (95 samples, 0.88%)</title><rect x="544.0" y="547.0" width="10.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="547.0" y="558.0"></text>
</g>
<g>
<title>iptable_filter_hook	[iptable_filter] (51 samples, 0.47%)</title><rect x="545.7" y="531.0" width="5.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="548.7" y="542.0"></text>
</g>
<g>
<title>ipt_do_table	[ip_tables] (48 samples, 0.44%)</title><rect x="546.1" y="515.0" width="5.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="549.1" y="526.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (4 samples, 0.04%)</title><rect x="550.9" y="499.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="553.9" y="510.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_fn	[iptable_nat] (7 samples, 0.06%)</title><rect x="551.3" y="531.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="554.3" y="542.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat_ipv4] (7 samples, 0.06%)</title><rect x="551.3" y="515.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="554.3" y="526.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (3 samples, 0.03%)</title><rect x="551.8" y="499.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="554.8" y="510.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack_ipv4] (13 samples, 0.12%)</title><rect x="552.1" y="531.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="555.1" y="542.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (8 samples, 0.07%)</title><rect x="552.6" y="515.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="555.6" y="526.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (5 samples, 0.05%)</title><rect x="553.5" y="531.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="556.5" y="542.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat_ipv4] (3 samples, 0.03%)</title><rect x="554.0" y="531.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="557.0" y="542.0"></text>
</g>
<g>
<title>tcp_v4_rcv (10 samples, 0.09%)</title><rect x="554.6" y="547.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="557.6" y="558.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.03%)</title><rect x="555.7" y="563.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="558.7" y="574.0"></text>
</g>
<g>
<title>nf_hook_slow (7 samples, 0.06%)</title><rect x="556.0" y="563.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="559.0" y="574.0"></text>
</g>
<g>
<title>ip_sabotage_in	[br_netfilter] (15 samples, 0.14%)</title><rect x="556.8" y="579.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="559.8" y="590.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_in	[iptable_nat] (5 samples, 0.05%)</title><rect x="558.4" y="579.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="561.4" y="590.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (13 samples, 0.12%)</title><rect x="559.0" y="579.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="562.0" y="590.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack_ipv4] (22 samples, 0.20%)</title><rect x="560.4" y="579.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="563.4" y="590.0"></text>
</g>
<g>
<title>nf_hook_slow (58 samples, 0.54%)</title><rect x="562.8" y="579.0" width="6.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="565.8" y="590.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_in	[iptable_nat] (16 samples, 0.15%)</title><rect x="565.0" y="563.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="568.0" y="574.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat_ipv4] (15 samples, 0.14%)</title><rect x="565.1" y="547.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="568.1" y="558.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat_ipv4] (9 samples, 0.08%)</title><rect x="565.6" y="531.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="568.6" y="542.0"></text>
</g>
<g>
<title>nf_nat_packet	[nf_nat] (3 samples, 0.03%)</title><rect x="566.3" y="515.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="569.3" y="526.0"></text>
</g>
<g>
<title>ipv4_conntrack_in	[nf_conntrack_ipv4] (14 samples, 0.13%)</title><rect x="566.7" y="563.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="569.7" y="574.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (14 samples, 0.13%)</title><rect x="566.7" y="547.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="569.7" y="558.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in	[nf_nat_ipv4] (6 samples, 0.06%)</title><rect x="568.5" y="563.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="571.5" y="574.0"></text>
</g>
<g>
<title>nf_hook_slow (6 samples, 0.06%)</title><rect x="569.3" y="595.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="572.3" y="606.0"></text>
</g>
<g>
<title>ip_rcv (15 samples, 0.14%)</title><rect x="570.0" y="611.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="573.0" y="622.0"></text>
</g>
<g>
<title>process_backlog (9 samples, 0.08%)</title><rect x="571.8" y="659.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="574.8" y="670.0"></text>
</g>
<g>
<title>net_rx_action (5 samples, 0.05%)</title><rect x="573.1" y="675.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="576.1" y="686.0"></text>
</g>
<g>
<title>dev_queue_xmit (109 samples, 1.01%)</title><rect x="573.7" y="723.0" width="11.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="576.7" y="734.0"></text>
</g>
<g>
<title>__dev_queue_xmit (108 samples, 1.00%)</title><rect x="573.7" y="707.0" width="11.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="576.7" y="718.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (71 samples, 0.66%)</title><rect x="576.0" y="691.0" width="7.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="579.0" y="702.0"></text>
</g>
<g>
<title>loopback_xmit (45 samples, 0.42%)</title><rect x="577.3" y="675.0" width="4.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="580.3" y="686.0"></text>
</g>
<g>
<title>eth_type_trans (5 samples, 0.05%)</title><rect x="578.2" y="659.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="581.2" y="670.0"></text>
</g>
<g>
<title>netif_rx (28 samples, 0.26%)</title><rect x="578.7" y="659.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="581.7" y="670.0"></text>
</g>
<g>
<title>netif_rx_internal (28 samples, 0.26%)</title><rect x="578.7" y="643.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="581.7" y="654.0"></text>
</g>
<g>
<title>enqueue_to_backlog (28 samples, 0.26%)</title><rect x="578.7" y="627.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="581.7" y="638.0"></text>
</g>
<g>
<title>tcp_wfree (4 samples, 0.04%)</title><rect x="581.8" y="659.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="584.8" y="670.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (4 samples, 0.04%)</title><rect x="582.3" y="675.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="585.3" y="686.0"></text>
</g>
<g>
<title>tcp_wfree (9 samples, 0.08%)</title><rect x="582.8" y="675.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="585.8" y="686.0"></text>
</g>
<g>
<title>loopback_xmit (5 samples, 0.05%)</title><rect x="583.7" y="691.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="586.7" y="702.0"></text>
</g>
<g>
<title>validate_xmit_skb (11 samples, 0.10%)</title><rect x="584.3" y="691.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="587.3" y="702.0"></text>
</g>
<g>
<title>netif_skb_features (7 samples, 0.06%)</title><rect x="584.4" y="675.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="587.4" y="686.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (3 samples, 0.03%)</title><rect x="585.2" y="675.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="588.2" y="686.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_out	[iptable_nat] (5 samples, 0.05%)</title><rect x="585.8" y="755.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="588.8" y="766.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack_ipv4] (8 samples, 0.07%)</title><rect x="586.4" y="755.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="589.4" y="766.0"></text>
</g>
<g>
<title>ipv4_helper	[nf_conntrack_ipv4] (13 samples, 0.12%)</title><rect x="587.2" y="755.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="590.2" y="766.0"></text>
</g>
<g>
<title>ipv4_mtu (5 samples, 0.05%)</title><rect x="588.6" y="755.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="591.6" y="766.0"></text>
</g>
<g>
<title>nf_hook_slow (34 samples, 0.31%)</title><rect x="589.2" y="755.0" width="3.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="592.2" y="766.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_out	[iptable_nat] (17 samples, 0.16%)</title><rect x="589.6" y="739.0" width="1.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="592.6" y="750.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out	[nf_nat_ipv4] (12 samples, 0.11%)</title><rect x="590.2" y="723.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="593.2" y="734.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn	[nf_nat_ipv4] (8 samples, 0.07%)</title><rect x="590.4" y="707.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="593.4" y="718.0"></text>
</g>
<g>
<title>ipv4_confirm	[nf_conntrack_ipv4] (8 samples, 0.07%)</title><rect x="591.5" y="739.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="594.5" y="750.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (3 samples, 0.03%)</title><rect x="592.0" y="723.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="595.0" y="734.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events	[nf_conntrack] (3 samples, 0.03%)</title><rect x="592.4" y="739.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="595.4" y="750.0"></text>
</g>
<g>
<title>nf_hook_slow (6 samples, 0.06%)</title><rect x="592.9" y="771.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="595.9" y="782.0"></text>
</g>
<g>
<title>ip_output (5 samples, 0.05%)</title><rect x="593.6" y="787.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="596.6" y="798.0"></text>
</g>
<g>
<title>ipv4_dst_check (10 samples, 0.09%)</title><rect x="594.1" y="787.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="597.1" y="798.0"></text>
</g>
<g>
<title>skb_clone (21 samples, 0.19%)</title><rect x="595.2" y="803.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="598.2" y="814.0"></text>
</g>
<g>
<title>__skb_clone (16 samples, 0.15%)</title><rect x="595.7" y="787.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="598.7" y="798.0"></text>
</g>
<g>
<title>__copy_skb_header (5 samples, 0.05%)</title><rect x="596.9" y="771.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="599.9" y="782.0"></text>
</g>
<g>
<title>tcp_established_options (5 samples, 0.05%)</title><rect x="597.6" y="803.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="600.6" y="814.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (7 samples, 0.06%)</title><rect x="598.3" y="803.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="601.3" y="814.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (7 samples, 0.06%)</title><rect x="599.3" y="819.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="602.3" y="830.0"></text>
</g>
<g>
<title>ip_queue_xmit (5 samples, 0.05%)</title><rect x="600.1" y="819.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="603.1" y="830.0"></text>
</g>
<g>
<title>sched_clock_cpu (19 samples, 0.18%)</title><rect x="600.9" y="819.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="603.9" y="830.0"></text>
</g>
<g>
<title>sched_clock (14 samples, 0.13%)</title><rect x="601.4" y="803.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="604.4" y="814.0"></text>
</g>
<g>
<title>native_sched_clock (13 samples, 0.12%)</title><rect x="601.5" y="787.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="604.5" y="798.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (45 samples, 0.42%)</title><rect x="603.3" y="819.0" width="4.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="606.3" y="830.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (4 samples, 0.04%)</title><rect x="604.1" y="803.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="607.1" y="814.0"></text>
</g>
<g>
<title>tcp_rearm_rto (33 samples, 0.31%)</title><rect x="604.6" y="803.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="607.6" y="814.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (33 samples, 0.31%)</title><rect x="604.6" y="787.0" width="3.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="607.6" y="798.0"></text>
</g>
<g>
<title>sk_reset_timer (30 samples, 0.28%)</title><rect x="604.9" y="771.0" width="3.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="607.9" y="782.0"></text>
</g>
<g>
<title>mod_timer (29 samples, 0.27%)</title><rect x="605.0" y="755.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="608.0" y="766.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (22 samples, 0.20%)</title><rect x="605.7" y="739.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="608.7" y="750.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (13 samples, 0.12%)</title><rect x="608.7" y="819.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="611.7" y="830.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (4 samples, 0.04%)</title><rect x="609.3" y="803.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="612.3" y="814.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.04%)</title><rect x="609.7" y="803.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="612.7" y="814.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.04%)</title><rect x="609.7" y="787.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="612.7" y="798.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="609.8" y="771.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="612.8" y="782.0"></text>
</g>
<g>
<title>tcp_tso_segs (5 samples, 0.05%)</title><rect x="610.2" y="819.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="613.2" y="830.0"></text>
</g>
<g>
<title>tcp_v4_send_check (12 samples, 0.11%)</title><rect x="610.7" y="819.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="613.7" y="830.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (15 samples, 0.14%)</title><rect x="612.2" y="867.0" width="1.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="615.2" y="878.0"></text>
</g>
<g>
<title>tcp_send_mss (76 samples, 0.70%)</title><rect x="613.9" y="867.0" width="8.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="616.9" y="878.0"></text>
</g>
<g>
<title>ipv4_mtu (10 samples, 0.09%)</title><rect x="614.1" y="851.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="617.1" y="862.0"></text>
</g>
<g>
<title>tcp_current_mss (63 samples, 0.58%)</title><rect x="615.2" y="851.0" width="6.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="618.2" y="862.0"></text>
</g>
<g>
<title>tcp_established_options (14 samples, 0.13%)</title><rect x="620.3" y="835.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="623.3" y="846.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (3 samples, 0.03%)</title><rect x="622.3" y="867.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="625.3" y="878.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (5 samples, 0.05%)</title><rect x="622.6" y="883.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="625.6" y="894.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (3 samples, 0.03%)</title><rect x="623.1" y="883.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="626.1" y="894.0"></text>
</g>
<g>
<title>security_socket_sendmsg (88 samples, 0.81%)</title><rect x="623.5" y="915.0" width="9.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="626.5" y="926.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (82 samples, 0.76%)</title><rect x="624.1" y="899.0" width="9.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="627.1" y="910.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (81 samples, 0.75%)</title><rect x="624.2" y="883.0" width="8.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="627.2" y="894.0"></text>
</g>
<g>
<title>aa_sk_perm (43 samples, 0.40%)</title><rect x="628.4" y="867.0" width="4.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="631.4" y="878.0"></text>
</g>
<g>
<title>aa_label_sk_perm (43 samples, 0.40%)</title><rect x="628.4" y="851.0" width="4.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="631.4" y="862.0"></text>
</g>
<g>
<title>tcp_sendmsg (8 samples, 0.07%)</title><rect x="633.1" y="915.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="636.1" y="926.0"></text>
</g>
<g>
<title>fsnotify (40 samples, 0.37%)</title><rect x="633.9" y="979.0" width="4.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="636.9" y="990.0"></text>
</g>
<g>
<title>rw_verify_area (92 samples, 0.85%)</title><rect x="638.3" y="979.0" width="10.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="641.3" y="990.0"></text>
</g>
<g>
<title>security_file_permission (65 samples, 0.60%)</title><rect x="641.3" y="963.0" width="7.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="644.3" y="974.0"></text>
</g>
<g>
<title>apparmor_file_permission (60 samples, 0.56%)</title><rect x="641.5" y="947.0" width="6.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="644.5" y="958.0"></text>
</g>
<g>
<title>common_file_perm (60 samples, 0.56%)</title><rect x="641.5" y="931.0" width="6.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="644.5" y="942.0"></text>
</g>
<g>
<title>aa_file_perm (50 samples, 0.46%)</title><rect x="642.6" y="915.0" width="5.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="645.6" y="926.0"></text>
</g>
<g>
<title>common_file_perm (3 samples, 0.03%)</title><rect x="648.0" y="947.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="651.0" y="958.0"></text>
</g>
<g>
<title>sys_write (7 samples, 0.06%)</title><rect x="648.4" y="1027.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="651.4" y="1038.0"></text>
</g>
<g>
<title>__write (10 samples, 0.09%)</title><rect x="649.1" y="1075.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="652.1" y="1086.0"></text>
</g>
<g>
<title>itable stub (15 samples, 0.14%)</title><rect x="650.5" y="1235.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="653.5" y="1246.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (830 samples, 7.68%)</title><rect x="652.3" y="1283.0" width="90.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.3" y="1294.0">io/netty/c..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (829 samples, 7.67%)</title><rect x="652.4" y="1267.0" width="90.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.4" y="1278.0">io/netty/c..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (4 samples, 0.04%)</title><rect x="653.6" y="1251.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="656.6" y="1262.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.eventLoop (3 samples, 0.03%)</title><rect x="653.6" y="1235.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.6" y="1246.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.findContextOutbound (5 samples, 0.05%)</title><rect x="654.0" y="1251.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="657.0" y="1262.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (778 samples, 7.20%)</title><rect x="654.6" y="1251.0" width="84.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.6" y="1262.0">io/netty/c..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (778 samples, 7.20%)</title><rect x="654.6" y="1235.0" width="84.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.6" y="1246.0">io/netty/c..</text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (775 samples, 7.17%)</title><rect x="654.9" y="1219.0" width="84.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.9" y="1230.0">io/netty/h..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (122 samples, 1.13%)</title><rect x="655.2" y="1203.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="658.2" y="1214.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (120 samples, 1.11%)</title><rect x="655.5" y="1187.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.5" y="1198.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.findContextOutbound (4 samples, 0.04%)</title><rect x="657.3" y="1171.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.3" y="1182.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (64 samples, 0.59%)</title><rect x="657.7" y="1171.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="660.7" y="1182.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (62 samples, 0.57%)</title><rect x="658.0" y="1155.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.0" y="1166.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (59 samples, 0.55%)</title><rect x="658.3" y="1139.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.3" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.write (59 samples, 0.55%)</title><rect x="658.3" y="1123.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.3" y="1134.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.addMessage (44 samples, 0.41%)</title><rect x="658.8" y="1107.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.8" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer$Entry.newInstance (29 samples, 0.27%)</title><rect x="659.3" y="1091.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="662.3" y="1102.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (10 samples, 0.09%)</title><rect x="661.2" y="1075.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.2" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pop (4 samples, 0.04%)</title><rect x="661.7" y="1059.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="664.7" y="1070.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.incrementPendingOutboundBytes (5 samples, 0.05%)</title><rect x="662.4" y="1091.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.4" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.total (6 samples, 0.06%)</title><rect x="663.0" y="1091.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="666.0" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.filterOutboundMessage (9 samples, 0.08%)</title><rect x="663.7" y="1107.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="666.7" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/unix/UnixChannelUtil.isBufferCopyNeededForWrite (3 samples, 0.03%)</title><rect x="664.4" y="1091.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.4" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/unix/UnixChannelUtil.isBufferCopyNeededForWrite (3 samples, 0.03%)</title><rect x="664.4" y="1075.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="667.4" y="1086.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (31 samples, 0.29%)</title><rect x="664.7" y="1171.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.7" y="1182.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (29 samples, 0.27%)</title><rect x="664.9" y="1155.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.9" y="1166.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (10 samples, 0.09%)</title><rect x="665.3" y="1139.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.3" y="1150.0"></text>
</g>
<g>
<title>itable stub (16 samples, 0.15%)</title><rect x="666.4" y="1139.0" width="1.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="669.4" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (4 samples, 0.04%)</title><rect x="668.1" y="1171.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="671.1" y="1182.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.touch (3 samples, 0.03%)</title><rect x="668.2" y="1155.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.2" y="1166.0"></text>
</g>
<g>
<title>io/netty/handler/codec/CodecOutputList.newInstance (6 samples, 0.06%)</title><rect x="668.6" y="1203.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.6" y="1214.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.acceptOutboundMessage (11 samples, 0.10%)</title><rect x="669.4" y="1203.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="672.4" y="1214.0"></text>
</g>
<g>
<title>io/netty/util/internal/TypeParameterMatcher$ReflectiveMatcher.match (8 samples, 0.07%)</title><rect x="669.8" y="1187.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="672.8" y="1198.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.encode (558 samples, 5.16%)</title><rect x="670.6" y="1203.0" width="60.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.6" y="1214.0">io/net..</text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.encode (555 samples, 5.13%)</title><rect x="671.0" y="1187.0" width="60.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.0" y="1198.0">io/net..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (160 samples, 1.48%)</title><rect x="674.6" y="1171.0" width="17.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="677.6" y="1182.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (157 samples, 1.45%)</title><rect x="674.9" y="1155.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="677.9" y="1166.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.readerIndex (3 samples, 0.03%)</title><rect x="675.6" y="1139.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="678.6" y="1150.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (146 samples, 1.35%)</title><rect x="676.0" y="1139.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="679.0" y="1150.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureWritable (105 samples, 0.97%)</title><rect x="676.6" y="1123.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="679.6" y="1134.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureWritable0 (105 samples, 0.97%)</title><rect x="676.6" y="1107.0" width="11.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.6" y="1118.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (105 samples, 0.97%)</title><rect x="676.6" y="1091.0" width="11.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.6" y="1102.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.isAccessible (105 samples, 0.97%)</title><rect x="676.6" y="1075.0" width="11.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="679.6" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.isLiveNonVolatile (105 samples, 0.97%)</title><rect x="676.6" y="1059.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.6" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.getInt (105 samples, 0.97%)</title><rect x="676.6" y="1043.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="679.6" y="1054.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.getInt (105 samples, 0.97%)</title><rect x="676.6" y="1027.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.6" y="1038.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (6 samples, 0.06%)</title><rect x="682.3" y="1011.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.set (4 samples, 0.04%)</title><rect x="683.5" y="1011.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="686.5" y="1022.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (21 samples, 0.19%)</title><rect x="683.9" y="1011.0" width="2.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="686.9" y="1022.0"></text>
</g>
<g>
<title>unsafe_arraycopy (16 samples, 0.15%)</title><rect x="686.3" y="1011.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="689.3" y="1022.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.setBytes (35 samples, 0.32%)</title><rect x="688.1" y="1123.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="691.1" y="1134.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setBytes (33 samples, 0.31%)</title><rect x="688.3" y="1107.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="691.3" y="1118.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkIndex (9 samples, 0.08%)</title><rect x="688.5" y="1091.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="691.5" y="1102.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkIndex0 (3 samples, 0.03%)</title><rect x="688.5" y="1075.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.5" y="1086.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (6 samples, 0.06%)</title><rect x="688.9" y="1075.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.9" y="1086.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.isAccessible (4 samples, 0.04%)</title><rect x="689.1" y="1059.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="692.1" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.isLiveNonVolatile (4 samples, 0.04%)</title><rect x="689.1" y="1043.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="692.1" y="1054.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.getInt (3 samples, 0.03%)</title><rect x="689.2" y="1027.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="692.2" y="1038.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.getInt (3 samples, 0.03%)</title><rect x="689.2" y="1011.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.2" y="1022.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.copyMemory (16 samples, 0.15%)</title><rect x="690.2" y="1091.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.2" y="1102.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.copyMemory (16 samples, 0.15%)</title><rect x="690.2" y="1075.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="693.2" y="1086.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (13 samples, 0.12%)</title><rect x="690.5" y="1059.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="693.5" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (13 samples, 0.12%)</title><rect x="690.5" y="1043.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="693.5" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (12 samples, 0.11%)</title><rect x="690.6" y="1027.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="693.6" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (12 samples, 0.11%)</title><rect x="690.6" y="1011.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="693.6" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (12 samples, 0.11%)</title><rect x="690.6" y="995.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="693.6" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (3 samples, 0.03%)</title><rect x="690.7" y="979.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="693.7" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (8 samples, 0.07%)</title><rect x="691.0" y="979.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (8 samples, 0.07%)</title><rect x="691.0" y="963.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.0" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="691.1" y="947.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="694.1" y="958.0"></text>
</g>
<g>
<title>unsafe_arraycopy (3 samples, 0.03%)</title><rect x="691.6" y="947.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="694.6" y="958.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.buffer (321 samples, 2.97%)</title><rect x="692.0" y="1171.0" width="35.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="695.0" y="1182.0">io/..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (320 samples, 2.96%)</title><rect x="692.1" y="1155.0" width="35.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="695.1" y="1166.0">io..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (320 samples, 2.96%)</title><rect x="692.1" y="1139.0" width="35.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="695.1" y="1150.0">io..</text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (320 samples, 2.96%)</title><rect x="692.1" y="1123.0" width="35.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="695.1" y="1134.0">io..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (194 samples, 1.79%)</title><rect x="692.3" y="1107.0" width="21.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="695.3" y="1118.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (189 samples, 1.75%)</title><rect x="692.8" y="1091.0" width="20.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="695.8" y="1102.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (189 samples, 1.75%)</title><rect x="692.8" y="1075.0" width="20.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.8" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (174 samples, 1.61%)</title><rect x="693.7" y="1059.0" width="19.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="696.7" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$Record.&lt;init&gt; (169 samples, 1.56%)</title><rect x="693.7" y="1043.0" width="18.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (169 samples, 1.56%)</title><rect x="693.7" y="1027.0" width="18.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="696.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (169 samples, 1.56%)</title><rect x="693.7" y="1011.0" width="18.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="696.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (169 samples, 1.56%)</title><rect x="693.7" y="995.0" width="18.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="696.7" y="1006.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (169 samples, 1.56%)</title><rect x="693.7" y="979.0" width="18.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="696.7" y="990.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (167 samples, 1.54%)</title><rect x="693.8" y="963.0" width="18.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="696.8" y="974.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (167 samples, 1.54%)</title><rect x="693.8" y="947.0" width="18.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="696.8" y="958.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (164 samples, 1.52%)</title><rect x="693.9" y="931.0" width="17.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="696.9" y="942.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (12 samples, 0.11%)</title><rect x="694.2" y="915.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="697.2" y="926.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (12 samples, 0.11%)</title><rect x="694.2" y="899.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="697.2" y="910.0"></text>
</g>
<g>
<title>oopFactory::new_shortArray(int, Thread*) (4 samples, 0.04%)</title><rect x="694.7" y="883.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="697.7" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="694.9" y="867.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="697.9" y="878.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (52 samples, 0.48%)</title><rect x="695.5" y="915.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.5" y="926.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (11 samples, 0.10%)</title><rect x="696.5" y="899.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="699.5" y="910.0"></text>
</g>
<g>
<title>oopFactory::new_objectArray(int, Thread*) (3 samples, 0.03%)</title><rect x="696.9" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="699.9" y="894.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.03%)</title><rect x="696.9" y="867.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.9" y="878.0"></text>
</g>
<g>
<title>ConstantPool::symbol_at(int) const (6 samples, 0.06%)</title><rect x="697.7" y="899.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="700.7" y="910.0"></text>
</g>
<g>
<title>ConstantPool::tag_at(int) const (5 samples, 0.05%)</title><rect x="697.8" y="883.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="700.8" y="894.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (11 samples, 0.10%)</title><rect x="698.4" y="899.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="701.4" y="910.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.05%)</title><rect x="699.0" y="883.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="702.0" y="894.0"></text>
</g>
<g>
<title>oop RawAccessBarrier&lt;1196116ul&gt;::oop_load&lt;oop&gt;(void*) (4 samples, 0.04%)</title><rect x="699.1" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="702.1" y="878.0"></text>
</g>
<g>
<title>objArrayOopDesc::obj_at_put(int, oop) (7 samples, 0.06%)</title><rect x="699.8" y="899.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="702.8" y="910.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oop, long, oop) (5 samples, 0.05%)</title><rect x="700.0" y="883.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="703.0" y="894.0"></text>
</g>
<g>
<title>typeArrayOopDesc::ushort_at_put(int, unsigned short) (6 samples, 0.06%)</title><rect x="700.5" y="899.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="703.5" y="910.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (4 samples, 0.04%)</title><rect x="701.2" y="915.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="704.2" y="926.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (17 samples, 0.16%)</title><rect x="701.7" y="915.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="704.7" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (14 samples, 0.13%)</title><rect x="704.5" y="915.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="707.5" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (11 samples, 0.10%)</title><rect x="704.6" y="899.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="707.6" y="910.0"></text>
</g>
<g>
<title>CodeCache::get_code_heap_containing(void*) (5 samples, 0.05%)</title><rect x="704.6" y="883.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="707.6" y="894.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.06%)</title><rect x="705.1" y="883.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="708.1" y="894.0"></text>
</g>
<g>
<title>java_lang_Throwable::clear_stacktrace(oop) (3 samples, 0.03%)</title><rect x="706.0" y="915.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="709.0" y="926.0"></text>
</g>
<g>
<title>oopDesc::obj_field_put(int, oop) (3 samples, 0.03%)</title><rect x="706.0" y="899.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="709.0" y="910.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 573558ul&gt;::oop_access_barrier(oop, long, oop) (3 samples, 0.03%)</title><rect x="706.0" y="883.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="709.0" y="894.0"></text>
</g>
<g>
<title>java_lang_Throwable::set_backtrace(oop, oop) (3 samples, 0.03%)</title><rect x="706.3" y="915.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="709.3" y="926.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (8 samples, 0.07%)</title><rect x="707.0" y="915.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="710.0" y="926.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (4 samples, 0.04%)</title><rect x="708.0" y="915.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="711.0" y="926.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.03%)</title><rect x="708.1" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="711.1" y="910.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.03%)</title><rect x="708.1" y="883.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="711.1" y="894.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (4 samples, 0.04%)</title><rect x="708.4" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="711.4" y="926.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (27 samples, 0.25%)</title><rect x="708.8" y="915.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="711.8" y="926.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (18 samples, 0.17%)</title><rect x="709.4" y="899.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="712.4" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SetFromMap.add (5 samples, 0.05%)</title><rect x="712.1" y="1043.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="715.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.put (4 samples, 0.04%)</title><rect x="712.2" y="1027.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="715.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (4 samples, 0.04%)</title><rect x="712.2" y="1011.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="715.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (3 samples, 0.03%)</title><rect x="712.2" y="995.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="715.2" y="1006.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.reportLeak (4 samples, 0.04%)</title><rect x="712.7" y="1059.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="715.7" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.threadLocalRandom (3 samples, 0.03%)</title><rect x="713.1" y="1059.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="716.1" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent$2.current (3 samples, 0.03%)</title><rect x="713.1" y="1043.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="716.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.current (3 samples, 0.03%)</title><rect x="713.1" y="1027.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="716.1" y="1038.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (122 samples, 1.13%)</title><rect x="713.5" y="1107.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="716.5" y="1118.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena$DirectArena.newByteBuf (34 samples, 0.31%)</title><rect x="713.5" y="1091.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="716.5" y="1102.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.newInstance (33 samples, 0.31%)</title><rect x="713.6" y="1075.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="716.6" y="1086.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.reuse (23 samples, 0.21%)</title><rect x="713.6" y="1059.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.6" y="1070.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.setIndex0 (5 samples, 0.05%)</title><rect x="713.6" y="1043.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="716.6" y="1054.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.resetRefCnt (18 samples, 0.17%)</title><rect x="714.2" y="1043.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.2" y="1054.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.resetRefCnt (18 samples, 0.17%)</title><rect x="714.2" y="1027.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="717.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.set (18 samples, 0.17%)</title><rect x="714.2" y="1011.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck (3 samples, 0.03%)</title><rect x="715.8" y="995.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="718.8" y="1006.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (10 samples, 0.09%)</title><rect x="716.1" y="1059.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="719.1" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pop (8 samples, 0.07%)</title><rect x="716.4" y="1043.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.4" y="1054.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (88 samples, 0.81%)</title><rect x="717.2" y="1091.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="720.2" y="1102.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateTiny (77 samples, 0.71%)</title><rect x="718.4" y="1075.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="721.4" y="1086.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocate (70 samples, 0.65%)</title><rect x="718.4" y="1059.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.4" y="1070.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (67 samples, 0.62%)</title><rect x="718.5" y="1043.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="721.5" y="1054.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache$Entry.recycle (15 samples, 0.14%)</title><rect x="719.4" y="1027.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="722.4" y="1038.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (15 samples, 0.14%)</title><rect x="719.4" y="1011.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="722.4" y="1022.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (15 samples, 0.14%)</title><rect x="719.4" y="995.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.4" y="1006.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pushLater (8 samples, 0.07%)</title><rect x="719.5" y="979.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="722.5" y="990.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.put (6 samples, 0.06%)</title><rect x="719.7" y="963.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.7" y="974.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pushNow (6 samples, 0.06%)</title><rect x="720.4" y="979.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="723.4" y="990.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$SubPageMemoryRegionCache.initBuf (34 samples, 0.31%)</title><rect x="721.1" y="1027.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.1" y="1038.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (34 samples, 0.31%)</title><rect x="721.1" y="1011.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.1" y="1022.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (33 samples, 0.31%)</title><rect x="721.2" y="995.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="724.2" y="1006.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.runOffset (5 samples, 0.05%)</title><rect x="721.5" y="979.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="724.5" y="990.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.runLength (4 samples, 0.04%)</title><rect x="721.6" y="963.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="724.6" y="974.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.threadCache (5 samples, 0.05%)</title><rect x="722.0" y="979.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="725.0" y="990.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (5 samples, 0.05%)</title><rect x="722.0" y="963.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.0" y="974.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (4 samples, 0.04%)</title><rect x="722.0" y="947.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.0" y="958.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.init (20 samples, 0.19%)</title><rect x="722.6" y="979.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="725.6" y="990.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.init (17 samples, 0.16%)</title><rect x="722.6" y="963.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="725.6" y="974.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.init0 (16 samples, 0.15%)</title><rect x="722.7" y="947.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.7" y="958.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.initMemoryAddress (3 samples, 0.03%)</title><rect x="724.4" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="727.4" y="974.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueue.poll (9 samples, 0.08%)</title><rect x="724.9" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="727.9" y="1038.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/util/UnsafeRefArrayAccess.spElement (6 samples, 0.06%)</title><rect x="725.2" y="1011.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="728.2" y="1022.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putObject (6 samples, 0.06%)</title><rect x="725.2" y="995.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="728.2" y="1006.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cacheForTiny (7 samples, 0.06%)</title><rect x="726.1" y="1059.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.1" y="1070.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cache (3 samples, 0.03%)</title><rect x="726.5" y="1043.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="729.5" y="1054.0"></text>
</g>
<g>
<title>io/netty/buffer/DefaultByteBufHolder.content (3 samples, 0.03%)</title><rect x="727.1" y="1171.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="730.1" y="1182.0"></text>
</g>
<g>
<title>io/netty/util/internal/logging/LocationAwareSlf4JLogger.isTraceEnabled (32 samples, 0.30%)</title><rect x="727.8" y="1171.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="730.8" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (26 samples, 0.24%)</title><rect x="728.5" y="1155.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.5" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (23 samples, 0.21%)</title><rect x="728.8" y="1139.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.8" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (21 samples, 0.19%)</title><rect x="729.0" y="1123.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.0" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (20 samples, 0.19%)</title><rect x="729.1" y="1107.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="732.1" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/TurboFilterList.getTurboFilterChainDecision (10 samples, 0.09%)</title><rect x="729.4" y="1091.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="732.4" y="1102.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/logging/MetricsTurboFilter.decide (9 samples, 0.08%)</title><rect x="729.4" y="1075.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="732.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.07%)</title><rect x="729.5" y="1059.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.05%)</title><rect x="729.8" y="1043.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="732.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (8 samples, 0.07%)</title><rect x="730.4" y="1091.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="733.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (3 samples, 0.03%)</title><rect x="731.0" y="1075.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.0" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (64 samples, 0.59%)</title><rect x="731.5" y="1203.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="734.5" y="1214.0"></text>
</g>
<g>
<title>io/netty/buffer/DefaultByteBufHolder.release (62 samples, 0.57%)</title><rect x="731.8" y="1187.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="734.8" y="1198.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (58 samples, 0.54%)</title><rect x="732.2" y="1171.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="735.2" y="1182.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (53 samples, 0.49%)</title><rect x="732.3" y="1155.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="735.3" y="1166.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractPooledDerivedByteBuf.deallocate (52 samples, 0.48%)</title><rect x="732.4" y="1139.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="735.4" y="1150.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (5 samples, 0.05%)</title><rect x="733.2" y="1123.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="736.2" y="1134.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.release (5 samples, 0.05%)</title><rect x="733.2" y="1107.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="736.2" y="1118.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.nonFinalRelease0 (4 samples, 0.04%)</title><rect x="733.2" y="1091.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="736.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet (4 samples, 0.04%)</title><rect x="733.2" y="1075.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="736.2" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (40 samples, 0.37%)</title><rect x="733.7" y="1123.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="736.7" y="1134.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (37 samples, 0.34%)</title><rect x="734.0" y="1107.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.0" y="1118.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pushLater (29 samples, 0.27%)</title><rect x="734.9" y="1091.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.9" y="1102.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.add (5 samples, 0.05%)</title><rect x="735.4" y="1075.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="738.4" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (5 samples, 0.05%)</title><rect x="736.0" y="1075.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="739.0" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (5 samples, 0.05%)</title><rect x="736.0" y="1059.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.0" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.fastGet (3 samples, 0.03%)</title><rect x="736.2" y="1043.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.2" y="1054.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (4 samples, 0.04%)</title><rect x="736.6" y="1075.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.6" y="1086.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.put (10 samples, 0.09%)</title><rect x="737.0" y="1075.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="740.0" y="1086.0"></text>
</g>
<g>
<title>java/util/WeakHashMap$Entry.&lt;init&gt; (8 samples, 0.07%)</title><rect x="737.0" y="1059.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.0" y="1070.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.release (4 samples, 0.04%)</title><rect x="738.1" y="1155.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="741.1" y="1166.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.tryFinalRelease0 (4 samples, 0.04%)</title><rect x="738.1" y="1139.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet (4 samples, 0.04%)</title><rect x="738.1" y="1123.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="741.1" y="1134.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (9 samples, 0.08%)</title><rect x="738.5" y="1203.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="741.5" y="1214.0"></text>
</g>
<g>
<title>io/netty/handler/codec/CodecOutputList.size (9 samples, 0.08%)</title><rect x="738.5" y="1187.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="741.5" y="1198.0"></text>
</g>
<g>
<title>io/netty/buffer/DefaultByteBufHolder.release (7 samples, 0.06%)</title><rect x="738.5" y="1171.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="741.5" y="1182.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (30 samples, 0.28%)</title><rect x="739.5" y="1251.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="742.5" y="1262.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (29 samples, 0.27%)</title><rect x="739.6" y="1235.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.6" y="1246.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (7 samples, 0.06%)</title><rect x="739.7" y="1219.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="742.7" y="1230.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.touch (7 samples, 0.06%)</title><rect x="740.5" y="1219.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="743.5" y="1230.0"></text>
</g>
<g>
<title>itable stub (14 samples, 0.13%)</title><rect x="741.3" y="1219.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="744.3" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.poll (8 samples, 0.07%)</title><rect x="742.9" y="1283.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="745.9" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (8 samples, 0.07%)</title><rect x="742.9" y="1267.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="745.9" y="1278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (76 samples, 0.70%)</title><rect x="744.0" y="1331.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="747.0" y="1342.0"></text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.write (36 samples, 0.33%)</title><rect x="744.7" y="1315.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="747.7" y="1326.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.add (32 samples, 0.30%)</title><rect x="745.2" y="1299.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="748.2" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addLast (32 samples, 0.30%)</title><rect x="745.2" y="1283.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="748.2" y="1294.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*) (4 samples, 0.04%)</title><rect x="748.0" y="1267.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="751.0" y="1278.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (3 samples, 0.03%)</title><rect x="748.1" y="1251.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="751.1" y="1262.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/SlowConsumerDisconnectHandler.write (33 samples, 0.31%)</title><rect x="748.7" y="1315.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="751.7" y="1326.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (32 samples, 0.30%)</title><rect x="748.8" y="1299.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.8" y="1310.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.newPromise (4 samples, 0.04%)</title><rect x="748.8" y="1283.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="751.8" y="1294.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (3 samples, 0.03%)</title><rect x="748.8" y="1267.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.8" y="1278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (28 samples, 0.26%)</title><rect x="749.2" y="1283.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.2" y="1294.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (19 samples, 0.18%)</title><rect x="750.2" y="1267.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="753.2" y="1278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.isNotValidPromise (4 samples, 0.04%)</title><rect x="751.8" y="1251.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="754.8" y="1262.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (3 samples, 0.03%)</title><rect x="752.3" y="1347.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.3" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.touch (3 samples, 0.03%)</title><rect x="752.3" y="1331.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="755.3" y="1342.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.inEventLoop (4 samples, 0.04%)</title><rect x="752.7" y="1347.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.7" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.inEventLoop (3 samples, 0.03%)</title><rect x="752.8" y="1331.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="755.8" y="1342.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.setSuccess (102 samples, 0.94%)</title><rect x="753.1" y="1395.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="756.1" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.setSuccess (102 samples, 0.94%)</title><rect x="753.1" y="1379.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.1" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setSuccess (101 samples, 0.93%)</title><rect x="753.3" y="1363.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="756.3" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setSuccess0 (101 samples, 0.93%)</title><rect x="753.3" y="1347.0" width="11.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="756.3" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setValue0 (101 samples, 0.93%)</title><rect x="753.3" y="1331.0" width="11.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="756.3" y="1342.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.checkNotifyWaiters (6 samples, 0.06%)</title><rect x="753.3" y="1315.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="756.3" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.notifyListeners (42 samples, 0.39%)</title><rect x="753.9" y="1315.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="756.9" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.notifyListenersNow (40 samples, 0.37%)</title><rect x="754.0" y="1299.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.0" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.notifyListener0 (23 samples, 0.21%)</title><rect x="755.9" y="1283.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="758.9" y="1294.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroupFuture$1.operationComplete (22 samples, 0.20%)</title><rect x="756.0" y="1267.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="759.0" y="1278.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroupFuture$1.operationComplete (22 samples, 0.20%)</title><rect x="756.0" y="1251.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="759.0" y="1262.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.isSuccess (3 samples, 0.03%)</title><rect x="758.1" y="1235.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="761.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet (53 samples, 0.49%)</title><rect x="758.5" y="1315.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="761.5" y="1326.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*) (9 samples, 0.08%)</title><rect x="761.8" y="1299.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="764.8" y="1310.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (9 samples, 0.08%)</title><rect x="761.8" y="1283.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="764.8" y="1294.0"></text>
</g>
<g>
<title>G1DirtyCardQueue::handle_completed_buffer() (9 samples, 0.08%)</title><rect x="761.8" y="1267.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="764.8" y="1278.0"></text>
</g>
<g>
<title>G1DirtyCardQueueSet::mut_process_buffer(BufferNode*) (7 samples, 0.06%)</title><rect x="761.8" y="1251.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="764.8" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(unsigned char*, unsigned int) (7 samples, 0.06%)</title><rect x="761.8" y="1235.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="764.8" y="1246.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (7 samples, 0.06%)</title><rect x="761.8" y="1219.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="764.8" y="1230.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate&lt;G1ConcurrentRefineOopClosure&gt;(G1ConcurrentRefineOopClosure*) (5 samples, 0.05%)</title><rect x="762.0" y="1203.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="765.0" y="1214.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oop, Klass*) (4 samples, 0.04%)</title><rect x="762.1" y="1187.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="765.1" y="1198.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroupFuture$1.operationComplete (8 samples, 0.07%)</title><rect x="762.8" y="1299.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="765.8" y="1310.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.06%)</title><rect x="763.6" y="1299.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="766.6" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.pollTask (67 samples, 0.62%)</title><rect x="764.6" y="1507.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.6" y="1518.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.pollTaskFrom (66 samples, 0.61%)</title><rect x="764.7" y="1491.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="767.7" y="1502.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueue.poll (9 samples, 0.08%)</title><rect x="770.9" y="1475.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="773.9" y="1486.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (8 samples, 0.07%)</title><rect x="771.9" y="1523.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.9" y="1534.0"></text>
</g>
<g>
<title>JVM_NanoTime (4 samples, 0.04%)</title><rect x="772.3" y="1507.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="775.3" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (496 samples, 4.59%)</title><rect x="772.8" y="1587.0" width="54.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="775.8" y="1598.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (496 samples, 4.59%)</title><rect x="772.8" y="1571.0" width="54.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.8" y="1582.0">java/..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService$WorkPoolRunnable.run (495 samples, 4.58%)</title><rect x="772.8" y="1555.0" width="54.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="775.8" y="1566.0">com/r..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher$5.run (494 samples, 4.57%)</title><rect x="772.8" y="1539.0" width="53.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.8" y="1550.0">com/r..</text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDelivery (494 samples, 4.57%)</title><rect x="772.8" y="1523.0" width="53.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="775.8" y="1534.0">pboud..</text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDeliveryInternal (493 samples, 4.56%)</title><rect x="772.9" y="1507.0" width="53.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.9" y="1518.0">pboud..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeCharSequence (8 samples, 0.07%)</title><rect x="772.9" y="1491.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="775.9" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.setCharSequence0 (8 samples, 0.07%)</title><rect x="772.9" y="1475.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="775.9" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureWritable0 (7 samples, 0.06%)</title><rect x="772.9" y="1459.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="775.9" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.capacity (6 samples, 0.06%)</title><rect x="773.0" y="1443.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.0" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.reallocate (5 samples, 0.05%)</title><rect x="773.1" y="1427.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="776.1" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (4 samples, 0.04%)</title><rect x="773.2" y="1411.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.2" y="1422.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (483 samples, 4.47%)</title><rect x="773.9" y="1491.0" width="52.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="776.9" y="1502.0">io/ne..</text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (482 samples, 4.46%)</title><rect x="774.0" y="1475.0" width="52.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="777.0" y="1486.0">io/ne..</text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (482 samples, 4.46%)</title><rect x="774.0" y="1459.0" width="52.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="777.0" y="1470.0">io/ne..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.write (229 samples, 2.12%)</title><rect x="777.7" y="1443.0" width="25.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="780.7" y="1454.0">i..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.write (227 samples, 2.10%)</title><rect x="777.9" y="1427.0" width="24.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.9" y="1438.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (217 samples, 2.01%)</title><rect x="779.0" y="1411.0" width="23.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.0" y="1422.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.newPromise (38 samples, 0.35%)</title><rect x="779.0" y="1395.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="782.0" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.channel (30 samples, 0.28%)</title><rect x="779.0" y="1379.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.0" y="1390.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (8 samples, 0.07%)</title><rect x="782.3" y="1379.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.3" y="1390.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.eventLoop (8 samples, 0.07%)</title><rect x="782.3" y="1363.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="785.3" y="1374.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (179 samples, 1.66%)</title><rect x="783.2" y="1395.0" width="19.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="786.2" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (179 samples, 1.66%)</title><rect x="783.2" y="1379.0" width="19.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="786.2" y="1390.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.newInstance (78 samples, 0.72%)</title><rect x="784.4" y="1363.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.4" y="1374.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.init (9 samples, 0.08%)</title><rect x="784.4" y="1347.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="787.4" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (69 samples, 0.64%)</title><rect x="785.4" y="1347.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="788.4" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask$1.newObject (9 samples, 0.08%)</title><rect x="785.8" y="1331.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.8" y="1342.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask$1.newObject (9 samples, 0.08%)</title><rect x="785.8" y="1315.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="788.8" y="1326.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.&lt;init&gt; (6 samples, 0.06%)</title><rect x="786.1" y="1299.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="789.1" y="1310.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.&lt;init&gt; (3 samples, 0.03%)</title><rect x="786.4" y="1283.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="789.4" y="1294.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pop (46 samples, 0.43%)</title><rect x="786.8" y="1331.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="789.8" y="1342.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.scavenge (44 samples, 0.41%)</title><rect x="787.0" y="1315.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="790.0" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.scavengeSome (44 samples, 0.41%)</title><rect x="787.0" y="1299.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.0" y="1310.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask$1.newObject (3 samples, 0.03%)</title><rect x="787.9" y="1283.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.9" y="1294.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.access$1700 (3 samples, 0.03%)</title><rect x="788.2" y="1283.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.2" y="1294.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.transfer (29 samples, 0.27%)</title><rect x="788.6" y="1283.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="791.6" y="1294.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (10 samples, 0.09%)</title><rect x="791.8" y="1331.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="794.8" y="1342.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (10 samples, 0.09%)</title><rect x="791.8" y="1315.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="794.8" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.slowGet (10 samples, 0.09%)</title><rect x="791.8" y="1299.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.08%)</title><rect x="791.9" y="1283.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="794.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (4 samples, 0.04%)</title><rect x="792.3" y="1267.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="795.3" y="1278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (6 samples, 0.06%)</title><rect x="792.9" y="1363.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.9" y="1374.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.findContextOutbound (3 samples, 0.03%)</title><rect x="793.5" y="1363.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="796.5" y="1374.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (16 samples, 0.15%)</title><rect x="793.9" y="1363.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.9" y="1374.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (52 samples, 0.48%)</title><rect x="795.6" y="1363.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="798.6" y="1374.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (15 samples, 0.14%)</title><rect x="799.2" y="1347.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="802.2" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (4 samples, 0.04%)</title><rect x="800.9" y="1347.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="803.9" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.safeExecute (8 samples, 0.07%)</title><rect x="801.4" y="1363.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="804.4" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.execute (8 samples, 0.07%)</title><rect x="801.4" y="1347.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="804.4" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (3 samples, 0.03%)</title><rect x="802.3" y="1363.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.3" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.touch (3 samples, 0.03%)</title><rect x="802.3" y="1347.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.3" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.safeDuplicate (90 samples, 0.83%)</title><rect x="802.7" y="1443.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.7" y="1454.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.retainedDuplicate (89 samples, 0.82%)</title><rect x="802.8" y="1427.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="805.8" y="1438.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.retainedDuplicate (89 samples, 0.82%)</title><rect x="802.8" y="1411.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="805.8" y="1422.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocketFrame.retainedDuplicate (89 samples, 0.82%)</title><rect x="802.8" y="1395.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.8" y="1406.0"></text>
</g>
<g>
<title>io/netty/buffer/DefaultByteBufHolder.retainedDuplicate (89 samples, 0.82%)</title><rect x="802.8" y="1379.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.8" y="1390.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.retainedDuplicate (81 samples, 0.75%)</title><rect x="802.8" y="1363.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="805.8" y="1374.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledDuplicatedByteBuf.newInstance (79 samples, 0.73%)</title><rect x="802.9" y="1347.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="805.9" y="1358.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.markWriterIndex (3 samples, 0.03%)</title><rect x="803.1" y="1331.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="806.1" y="1342.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractPooledDerivedByteBuf.init (11 samples, 0.10%)</title><rect x="803.5" y="1331.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.5" y="1342.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.retain (10 samples, 0.09%)</title><rect x="803.6" y="1315.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="806.6" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.retain (10 samples, 0.09%)</title><rect x="803.6" y="1299.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.6" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.retain0 (10 samples, 0.09%)</title><rect x="803.6" y="1283.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.getAndAdd (3 samples, 0.03%)</title><rect x="804.3" y="1267.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="807.3" y="1278.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (63 samples, 0.58%)</title><rect x="804.7" y="1331.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.7" y="1342.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledDuplicatedByteBuf$1.newObject (8 samples, 0.07%)</title><rect x="804.8" y="1315.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="807.8" y="1326.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledDuplicatedByteBuf$1.newObject (8 samples, 0.07%)</title><rect x="804.8" y="1299.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="807.8" y="1310.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledDuplicatedByteBuf.&lt;init&gt; (8 samples, 0.07%)</title><rect x="804.8" y="1283.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="807.8" y="1294.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledDuplicatedByteBuf.&lt;init&gt; (8 samples, 0.07%)</title><rect x="804.8" y="1267.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="807.8" y="1278.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pop (41 samples, 0.38%)</title><rect x="806.0" y="1315.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.0" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.scavenge (40 samples, 0.37%)</title><rect x="806.1" y="1299.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="809.1" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.scavengeSome (40 samples, 0.37%)</title><rect x="806.1" y="1283.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="809.1" y="1294.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.transfer (26 samples, 0.24%)</title><rect x="807.5" y="1267.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.5" y="1278.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (10 samples, 0.09%)</title><rect x="810.5" y="1315.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="813.5" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (6 samples, 0.06%)</title><rect x="810.9" y="1299.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="813.9" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.slowGet (5 samples, 0.05%)</title><rect x="811.0" y="1283.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.05%)</title><rect x="811.0" y="1267.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.0" y="1278.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareByteBuf.retainedDuplicate (4 samples, 0.04%)</title><rect x="811.7" y="1363.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.7" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.replace (4 samples, 0.04%)</title><rect x="812.1" y="1363.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.1" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.replace (4 samples, 0.04%)</title><rect x="812.1" y="1347.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.1" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroupFuture.&lt;init&gt; (23 samples, 0.21%)</title><rect x="812.5" y="1443.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="815.5" y="1454.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.addListener (14 samples, 0.13%)</title><rect x="812.7" y="1427.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="815.7" y="1438.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.addListener (14 samples, 0.13%)</title><rect x="812.7" y="1411.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.7" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.addListener (14 samples, 0.13%)</title><rect x="812.7" y="1395.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="815.7" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.isDone (4 samples, 0.04%)</title><rect x="813.5" y="1379.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="816.5" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.notifyListeners (3 samples, 0.03%)</title><rect x="814.0" y="1379.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.0" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.safeExecute (3 samples, 0.03%)</title><rect x="814.0" y="1363.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="817.0" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.execute (3 samples, 0.03%)</title><rect x="814.0" y="1347.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.0" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.&lt;init&gt; (6 samples, 0.06%)</title><rect x="814.3" y="1427.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.3" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.put (41 samples, 0.38%)</title><rect x="815.0" y="1443.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="818.0" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (16 samples, 0.15%)</title><rect x="815.0" y="1427.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="818.0" y="1438.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.hashCode (12 samples, 0.11%)</title><rect x="815.4" y="1411.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="818.4" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (24 samples, 0.22%)</title><rect x="816.8" y="1427.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="819.8" y="1438.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.hashCode (3 samples, 0.03%)</title><rect x="818.0" y="1411.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="821.0" y="1422.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (7 samples, 0.06%)</title><rect x="818.4" y="1411.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="821.4" y="1422.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.linkNodeLast (5 samples, 0.05%)</title><rect x="818.6" y="1395.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="821.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (21 samples, 0.19%)</title><rect x="819.5" y="1443.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="822.5" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (19 samples, 0.18%)</title><rect x="819.7" y="1427.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="822.7" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.values (44 samples, 0.41%)</title><rect x="821.8" y="1443.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="824.8" y="1454.0"></text>
</g>
<g>
<title>start_thread (3,320 samples, 30.71%)</title><rect x="827.4" y="1603.0" width="362.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="830.4" y="1614.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (3,320 samples, 30.71%)</title><rect x="827.4" y="1587.0" width="362.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="830.4" y="1598.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (3,320 samples, 30.71%)</title><rect x="827.4" y="1571.0" width="362.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="830.4" y="1582.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (476 samples, 4.40%)</title><rect x="827.4" y="1555.0" width="51.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="830.4" y="1566.0">Concu..</text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (476 samples, 4.40%)</title><rect x="827.4" y="1539.0" width="51.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="830.4" y="1550.0">G1Con..</text>
</g>
<g>
<title>G1ConcurrentRefine::do_refinement_step(unsigned int) (476 samples, 4.40%)</title><rect x="827.4" y="1523.0" width="51.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="830.4" y="1534.0">G1Con..</text>
</g>
<g>
<title>G1DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (476 samples, 4.40%)</title><rect x="827.4" y="1507.0" width="51.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="830.4" y="1518.0">G1Dir..</text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(unsigned char*, unsigned int) (476 samples, 4.40%)</title><rect x="827.4" y="1491.0" width="51.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="830.4" y="1502.0">G1Rem..</text>
</g>
<g>
<title>CompressedKlassPointers::decode_not_null(unsigned int) (3 samples, 0.03%)</title><rect x="828.0" y="1475.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="831.0" y="1486.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (458 samples, 4.24%)</title><rect x="829.0" y="1475.0" width="50.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="832.0" y="1486.0">bool ..</text>
</g>
<g>
<title>G1BlockOffsetTable::check_index(unsigned long, char const*) const (3 samples, 0.03%)</title><rect x="831.1" y="1459.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.1" y="1470.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*) (45 samples, 0.42%)</title><rect x="831.5" y="1459.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="834.5" y="1470.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWordImpl***, unsigned long*, HeapWordImpl**, HeapWordImpl**) (14 samples, 0.13%)</title><rect x="832.5" y="1443.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="835.5" y="1454.0"></text>
</g>
<g>
<title>G1BlockOffsetTable::check_index(unsigned long, char const*) const [clone .constprop.27] (5 samples, 0.05%)</title><rect x="833.3" y="1427.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="836.3" y="1438.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWordImpl* const*) const (22 samples, 0.20%)</title><rect x="834.0" y="1443.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.0" y="1454.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (7 samples, 0.06%)</title><rect x="834.8" y="1427.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="837.8" y="1438.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (8 samples, 0.07%)</title><rect x="835.6" y="1427.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="838.6" y="1438.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWordImpl* const*) const (5 samples, 0.05%)</title><rect x="836.8" y="1459.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="839.8" y="1470.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead_with_size(oop, G1CMBitMap const*, unsigned long*) const (59 samples, 0.55%)</title><rect x="837.3" y="1459.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="840.3" y="1470.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (8 samples, 0.07%)</title><rect x="838.6" y="1443.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="841.6" y="1454.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead(oop, G1CMBitMap const*) const (5 samples, 0.05%)</title><rect x="839.5" y="1443.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="842.5" y="1454.0"></text>
</g>
<g>
<title>HeapRegionType::get() const (7 samples, 0.06%)</title><rect x="840.0" y="1443.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="843.0" y="1454.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (23 samples, 0.21%)</title><rect x="841.2" y="1443.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="844.2" y="1454.0"></text>
</g>
<g>
<title>Klass::is_objArray_klass_slow() const (4 samples, 0.04%)</title><rect x="844.0" y="1459.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="847.0" y="1470.0"></text>
</g>
<g>
<title>oopDesc::is_objArray() const (10 samples, 0.09%)</title><rect x="844.4" y="1459.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="847.4" y="1470.0"></text>
</g>
<g>
<title>CompressedKlassPointers::decode_not_null(unsigned int) (5 samples, 0.05%)</title><rect x="844.8" y="1443.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="847.8" y="1454.0"></text>
</g>
<g>
<title>oopDesc::is_oop(oop, bool) (12 samples, 0.11%)</title><rect x="845.5" y="1459.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="848.5" y="1470.0"></text>
</g>
<g>
<title>CollectedHeap::is_oop(oop) const (10 samples, 0.09%)</title><rect x="845.7" y="1443.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="848.7" y="1454.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate&lt;G1ConcurrentRefineOopClosure&gt;(G1ConcurrentRefineOopClosure*) (290 samples, 2.68%)</title><rect x="847.0" y="1459.0" width="31.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="850.0" y="1470.0">vo..</text>
</g>
<g>
<title>int align_up&lt;int, int&gt;(int, int) [clone .constprop.456] (3 samples, 0.03%)</title><rect x="848.0" y="1443.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="851.0" y="1454.0"></text>
</g>
<g>
<title>void G1ConcurrentRefineOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.03%)</title><rect x="848.4" y="1443.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="851.4" y="1454.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oop, Klass*) (272 samples, 2.52%)</title><rect x="848.9" y="1443.0" width="29.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="851.9" y="1454.0">vo..</text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (5 samples, 0.05%)</title><rect x="851.5" y="1427.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.5" y="1438.0"></text>
</g>
<g>
<title>OopIterateClosure::should_verify_oops() (6 samples, 0.06%)</title><rect x="852.3" y="1427.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="855.3" y="1438.0"></text>
</g>
<g>
<title>void G1ConcurrentRefineOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (140 samples, 1.30%)</title><rect x="853.2" y="1427.0" width="15.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="856.2" y="1438.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (12 samples, 0.11%)</title><rect x="855.5" y="1411.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.5" y="1422.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;oop&gt;(oop) const (8 samples, 0.07%)</title><rect x="857.1" y="1411.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="860.1" y="1422.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (3 samples, 0.03%)</title><rect x="857.6" y="1395.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.6" y="1406.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (11 samples, 0.10%)</title><rect x="858.2" y="1411.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="861.2" y="1422.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_reference(void*, unsigned int) (10 samples, 0.09%)</title><rect x="859.5" y="1411.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="862.5" y="1422.0"></text>
</g>
<g>
<title>OtherRegionsTable::contains_reference(void*) const (8 samples, 0.07%)</title><rect x="859.7" y="1395.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="862.7" y="1406.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (5 samples, 0.05%)</title><rect x="860.7" y="1411.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="863.7" y="1422.0"></text>
</g>
<g>
<title>bool HeapRegion::is_in_same_region&lt;unsigned int&gt;(unsigned int*, oop) (7 samples, 0.06%)</title><rect x="861.2" y="1411.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="864.2" y="1422.0"></text>
</g>
<g>
<title>check_obj_alignment(oop) (3 samples, 0.03%)</title><rect x="862.0" y="1411.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="865.0" y="1422.0"></text>
</g>
<g>
<title>void check_obj_during_refinement&lt;unsigned int&gt;(unsigned int*, oop) (57 samples, 0.53%)</title><rect x="862.3" y="1411.0" width="6.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="865.3" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (6 samples, 0.06%)</title><rect x="863.6" y="1395.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="866.6" y="1406.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;unsigned int*&gt;(unsigned int*) const (13 samples, 0.12%)</title><rect x="864.4" y="1395.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="867.4" y="1406.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (5 samples, 0.05%)</title><rect x="865.3" y="1379.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="868.3" y="1390.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (18 samples, 0.17%)</title><rect x="865.8" y="1395.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.8" y="1406.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (8 samples, 0.07%)</title><rect x="866.9" y="1379.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="869.9" y="1390.0"></text>
</g>
<g>
<title>check_obj_alignment(oop) (6 samples, 0.06%)</title><rect x="867.9" y="1395.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="870.9" y="1406.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.04%)</title><rect x="868.5" y="1427.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="871.5" y="1438.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (88 samples, 0.81%)</title><rect x="869.0" y="1427.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.0" y="1438.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (23 samples, 0.21%)</title><rect x="869.8" y="1411.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="872.8" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (52 samples, 0.48%)</title><rect x="872.3" y="1411.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.3" y="1422.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;void const*&gt;(void const*) const (17 samples, 0.16%)</title><rect x="874.1" y="1395.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="877.1" y="1406.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (8 samples, 0.07%)</title><rect x="875.1" y="1379.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="878.1" y="1390.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (14 samples, 0.13%)</title><rect x="876.0" y="1395.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="879.0" y="1406.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (4 samples, 0.04%)</title><rect x="877.0" y="1379.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.0" y="1390.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (5 samples, 0.05%)</title><rect x="877.5" y="1395.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="880.5" y="1406.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;void const*&gt;(void const*) const (3 samples, 0.03%)</title><rect x="878.0" y="1411.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="881.0" y="1422.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate&lt;G1ConcurrentRefineOopClosure&gt;(G1ConcurrentRefineOopClosure*, MemRegion) (3 samples, 0.03%)</title><rect x="878.7" y="1459.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.7" y="1470.0"></text>
</g>
<g>
<title>check_card_ptr(unsigned char*, G1CardTable*) (3 samples, 0.03%)</title><rect x="879.0" y="1475.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="882.0" y="1486.0"></text>
</g>
<g>
<title>GangWorker::loop() (2,331 samples, 21.56%)</title><rect x="879.3" y="1555.0" width="254.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.3" y="1566.0">GangWorker::loop()</text>
</g>
<g>
<title>G1EvacuateRegionsBaseTask::work(unsigned int) (2,309 samples, 21.36%)</title><rect x="879.3" y="1539.0" width="252.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="882.3" y="1550.0">G1EvacuateRegionsBaseTask::work(un..</text>
</g>
<g>
<title>G1EvacuateRegionsBaseTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases) (124 samples, 1.15%)</title><rect x="879.3" y="1523.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="882.3" y="1534.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (124 samples, 1.15%)</title><rect x="879.3" y="1507.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="882.3" y="1518.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (117 samples, 1.08%)</title><rect x="879.6" y="1491.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="882.6" y="1502.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (5 samples, 0.05%)</title><rect x="882.4" y="1475.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="885.4" y="1486.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oop, markOopDesc*) (74 samples, 0.68%)</title><rect x="883.0" y="1475.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="886.0" y="1486.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate_backwards&lt;G1ScanEvacuatedObjClosure&gt;(G1ScanEvacuatedObjClosure*) (57 samples, 0.53%)</title><rect x="884.9" y="1459.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="887.9" y="1470.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oop, Klass*) (55 samples, 0.51%)</title><rect x="885.1" y="1443.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.1" y="1454.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (26 samples, 0.24%)</title><rect x="885.6" y="1427.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="888.6" y="1438.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (3 samples, 0.03%)</title><rect x="885.9" y="1411.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.9" y="1422.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (5 samples, 0.05%)</title><rect x="886.2" y="1411.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.2" y="1422.0"></text>
</g>
<g>
<title>G1ParScanThreadState::verify_ref(unsigned int*) const (5 samples, 0.05%)</title><rect x="886.8" y="1411.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.8" y="1422.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (3 samples, 0.03%)</title><rect x="886.8" y="1395.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="889.8" y="1406.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (3 samples, 0.03%)</title><rect x="887.3" y="1411.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.3" y="1422.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::enqueue_card_if_tracked&lt;unsigned int&gt;(G1HeapRegionAttr, unsigned int*, oop) (4 samples, 0.04%)</title><rect x="888.0" y="1411.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.0" y="1422.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.03%)</title><rect x="888.4" y="1427.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.4" y="1438.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (22 samples, 0.20%)</title><rect x="888.7" y="1427.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.7" y="1438.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (4 samples, 0.04%)</title><rect x="888.8" y="1411.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.8" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (15 samples, 0.14%)</title><rect x="889.3" y="1411.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="892.3" y="1422.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;void const*&gt;(void const*) const (6 samples, 0.06%)</title><rect x="889.7" y="1395.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="892.7" y="1406.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (3 samples, 0.03%)</title><rect x="890.4" y="1395.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="893.4" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::verify_ref(unsigned int*) const (4 samples, 0.04%)</title><rect x="891.1" y="1475.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="894.1" y="1486.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::enqueue_card_if_tracked&lt;unsigned int&gt;(G1HeapRegionAttr, unsigned int*, oop) (4 samples, 0.04%)</title><rect x="891.9" y="1475.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="894.9" y="1486.0"></text>
</g>
<g>
<title>G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int) (538 samples, 4.98%)</title><rect x="892.9" y="1523.0" width="58.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="895.9" y="1534.0">G1Evac..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (441 samples, 4.08%)</title><rect x="892.9" y="1507.0" width="48.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="895.9" y="1518.0">G1Re..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(G1CardTableEntryClosure*, unsigned int) (426 samples, 3.94%)</title><rect x="892.9" y="1491.0" width="46.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="895.9" y="1502.0">G1Co..</text>
</g>
<g>
<title>G1DirtyCardQueueSet::apply_closure_during_gc(G1CardTableEntryClosure*, unsigned int) (426 samples, 3.94%)</title><rect x="892.9" y="1475.0" width="46.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="895.9" y="1486.0">G1Di..</text>
</g>
<g>
<title>G1DirtyCardQueueSet::apply_closure_to_buffer(G1CardTableEntryClosure*, BufferNode*, bool, unsigned int) (426 samples, 3.94%)</title><rect x="892.9" y="1459.0" width="46.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="895.9" y="1470.0">G1Di..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(unsigned char*, unsigned int) (426 samples, 3.94%)</title><rect x="892.9" y="1443.0" width="46.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.9" y="1454.0">G1Re..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (233 samples, 2.16%)</title><rect x="892.9" y="1427.0" width="25.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="895.9" y="1438.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::do_oop_partial_array(oop*) (5 samples, 0.05%)</title><rect x="893.7" y="1411.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="896.7" y="1422.0"></text>
</g>
<g>
<title>void objArrayOopDesc::oop_iterate_range&lt;G1ScanEvacuatedObjClosure&gt;(G1ScanEvacuatedObjClosure*, int, int) (4 samples, 0.04%)</title><rect x="893.9" y="1395.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="896.9" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::verify_ref(unsigned int*) const (14 samples, 0.13%)</title><rect x="894.3" y="1411.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="897.3" y="1422.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (7 samples, 0.06%)</title><rect x="894.7" y="1395.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="897.7" y="1406.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (3 samples, 0.03%)</title><rect x="895.5" y="1395.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.5" y="1406.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (206 samples, 1.91%)</title><rect x="895.8" y="1411.0" width="22.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="898.8" y="1422.0">v..</text>
</g>
<g>
<title>CompressedOops::encode_not_null(oop) (21 samples, 0.19%)</title><rect x="898.9" y="1395.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.9" y="1406.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (6 samples, 0.06%)</title><rect x="900.5" y="1379.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.5" y="1390.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oop, markOopDesc*) (140 samples, 1.30%)</title><rect x="901.2" y="1395.0" width="15.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.2" y="1406.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(G1HeapRegionAttr, unsigned long, bool*) (4 samples, 0.04%)</title><rect x="903.2" y="1379.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="906.2" y="1390.0"></text>
</g>
<g>
<title>G1Allocator::old_attempt_allocation(unsigned long, unsigned long, unsigned long*) (3 samples, 0.03%)</title><rect x="903.2" y="1363.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="906.2" y="1374.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (3 samples, 0.03%)</title><rect x="903.2" y="1347.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.2" y="1358.0"></text>
</g>
<g>
<title>oopDesc::forward_to_atomic(oop, markOopDesc*, atomic_memory_order) (5 samples, 0.05%)</title><rect x="904.1" y="1379.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="907.1" y="1390.0"></text>
</g>
<g>
<title>oopDesc::is_objArray() const (4 samples, 0.04%)</title><rect x="904.7" y="1379.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.7" y="1390.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate_backwards&lt;G1ScanEvacuatedObjClosure&gt;(G1ScanEvacuatedObjClosure*) (101 samples, 0.93%)</title><rect x="905.4" y="1379.0" width="11.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="908.4" y="1390.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oop, Klass*) (93 samples, 0.86%)</title><rect x="906.3" y="1363.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="909.3" y="1374.0"></text>
</g>
<g>
<title>OopIterateClosure::should_verify_oops() (5 samples, 0.05%)</title><rect x="907.7" y="1347.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.7" y="1358.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (43 samples, 0.40%)</title><rect x="908.4" y="1347.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.4" y="1358.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (6 samples, 0.06%)</title><rect x="909.5" y="1331.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="912.5" y="1342.0"></text>
</g>
<g>
<title>G1ParScanThreadState::verify_ref(unsigned int*) const (11 samples, 0.10%)</title><rect x="910.3" y="1331.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.3" y="1342.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (8 samples, 0.07%)</title><rect x="910.6" y="1315.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="913.6" y="1326.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (6 samples, 0.06%)</title><rect x="911.5" y="1331.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="914.5" y="1342.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::enqueue_card_if_tracked&lt;unsigned int&gt;(G1HeapRegionAttr, unsigned int*, oop) (6 samples, 0.06%)</title><rect x="912.4" y="1331.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="915.4" y="1342.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (30 samples, 0.28%)</title><rect x="913.2" y="1347.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="916.2" y="1358.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (7 samples, 0.06%)</title><rect x="913.4" y="1331.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.4" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (21 samples, 0.19%)</title><rect x="914.2" y="1331.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="917.2" y="1342.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;void const*&gt;(void const*) const (4 samples, 0.04%)</title><rect x="914.8" y="1315.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="917.8" y="1326.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (4 samples, 0.04%)</title><rect x="914.8" y="1299.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.8" y="1310.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (6 samples, 0.06%)</title><rect x="915.2" y="1315.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="918.2" y="1326.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (3 samples, 0.03%)</title><rect x="915.6" y="1299.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="918.6" y="1310.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (5 samples, 0.05%)</title><rect x="915.9" y="1315.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="918.9" y="1326.0"></text>
</g>
<g>
<title>bool HeapRegion::is_in_same_region&lt;unsigned int&gt;(unsigned int*, oop) (5 samples, 0.05%)</title><rect x="916.9" y="1395.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.9" y="1406.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::enqueue_card_if_tracked&lt;unsigned int&gt;(G1HeapRegionAttr, unsigned int*, oop) (7 samples, 0.06%)</title><rect x="917.4" y="1395.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.4" y="1406.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (3 samples, 0.03%)</title><rect x="917.8" y="1379.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.8" y="1390.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(unsigned char*, G1ScanCardClosure*) (192 samples, 1.78%)</title><rect x="918.3" y="1427.0" width="21.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.3" y="1438.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanCardClosure&gt;(MemRegion, G1ScanCardClosure*) (191 samples, 1.77%)</title><rect x="918.4" y="1411.0" width="20.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="921.4" y="1422.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*) (23 samples, 0.21%)</title><rect x="919.6" y="1395.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.6" y="1406.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWordImpl***, unsigned long*, HeapWordImpl**, HeapWordImpl**) (11 samples, 0.10%)</title><rect x="919.8" y="1379.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.8" y="1390.0"></text>
</g>
<g>
<title>G1BlockOffsetTable::check_index(unsigned long, char const*) const [clone .constprop.27] (3 samples, 0.03%)</title><rect x="920.4" y="1363.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="923.4" y="1374.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWordImpl* const*) const (10 samples, 0.09%)</title><rect x="921.0" y="1379.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="924.0" y="1390.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (5 samples, 0.05%)</title><rect x="921.3" y="1363.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="924.3" y="1374.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (3 samples, 0.03%)</title><rect x="921.8" y="1363.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="924.8" y="1374.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead_with_size(oop, G1CMBitMap const*, unsigned long*) const (21 samples, 0.19%)</title><rect x="922.5" y="1395.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="925.5" y="1406.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (5 samples, 0.05%)</title><rect x="922.8" y="1379.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="925.8" y="1390.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (4 samples, 0.04%)</title><rect x="922.9" y="1363.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="925.9" y="1374.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead(oop, G1CMBitMap const*) const (4 samples, 0.04%)</title><rect x="923.3" y="1379.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.3" y="1390.0"></text>
</g>
<g>
<title>HeapRegionType::get() const (3 samples, 0.03%)</title><rect x="923.8" y="1379.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="926.8" y="1390.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (4 samples, 0.04%)</title><rect x="924.3" y="1379.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="927.3" y="1390.0"></text>
</g>
<g>
<title>oopDesc::is_objArray() const (3 samples, 0.03%)</title><rect x="924.7" y="1395.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="927.7" y="1406.0"></text>
</g>
<g>
<title>oopDesc::is_oop(oop, bool) (8 samples, 0.07%)</title><rect x="925.1" y="1395.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.1" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::is_oop(oop) const (4 samples, 0.04%)</title><rect x="925.5" y="1379.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.5" y="1390.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate&lt;G1ScanCardClosure&gt;(G1ScanCardClosure*) (121 samples, 1.12%)</title><rect x="926.1" y="1395.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="929.1" y="1406.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.03%)</title><rect x="926.7" y="1379.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="929.7" y="1390.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanCardClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanCardClosure*, oop, Klass*) (111 samples, 1.03%)</title><rect x="927.0" y="1379.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="930.0" y="1390.0"></text>
</g>
<g>
<title>void G1ScanCardClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (60 samples, 0.56%)</title><rect x="929.1" y="1363.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="932.1" y="1374.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (4 samples, 0.04%)</title><rect x="930.9" y="1347.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.9" y="1358.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::enqueue_card_if_tracked&lt;unsigned int&gt;(G1HeapRegionAttr, unsigned int*, oop) (8 samples, 0.07%)</title><rect x="931.8" y="1347.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="934.8" y="1358.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (4 samples, 0.04%)</title><rect x="932.3" y="1331.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="935.3" y="1342.0"></text>
</g>
<g>
<title>void G1ScanClosureBase::prefetch_and_push&lt;unsigned int&gt;(unsigned int*, oop) (4 samples, 0.04%)</title><rect x="932.7" y="1347.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="935.7" y="1358.0"></text>
</g>
<g>
<title>void check_obj_during_refinement&lt;unsigned int&gt;(unsigned int*, oop) (23 samples, 0.21%)</title><rect x="933.2" y="1347.0" width="2.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="936.2" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (3 samples, 0.03%)</title><rect x="933.6" y="1331.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.6" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::kind() const (3 samples, 0.03%)</title><rect x="933.9" y="1331.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="936.9" y="1342.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;unsigned int*&gt;(unsigned int*) const (3 samples, 0.03%)</title><rect x="934.2" y="1331.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.2" y="1342.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (6 samples, 0.06%)</title><rect x="934.6" y="1331.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="937.6" y="1342.0"></text>
</g>
<g>
<title>check_obj_alignment(oop) (4 samples, 0.04%)</title><rect x="935.2" y="1331.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="938.2" y="1342.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (31 samples, 0.29%)</title><rect x="935.8" y="1363.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.8" y="1374.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (8 samples, 0.07%)</title><rect x="936.2" y="1347.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.2" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (18 samples, 0.17%)</title><rect x="937.1" y="1347.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.1" y="1358.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;void const*&gt;(void const*) const (3 samples, 0.03%)</title><rect x="937.4" y="1331.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="940.4" y="1342.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (6 samples, 0.06%)</title><rect x="937.7" y="1331.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.7" y="1342.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (6 samples, 0.06%)</title><rect x="938.4" y="1331.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.4" y="1342.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(G1CardTableEntryClosure*, unsigned int) (15 samples, 0.14%)</title><rect x="939.4" y="1491.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.4" y="1502.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(unsigned char*, unsigned int) (15 samples, 0.14%)</title><rect x="939.4" y="1475.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.4" y="1486.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(unsigned char*, G1ScanCardClosure*) (15 samples, 0.14%)</title><rect x="939.4" y="1459.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="942.4" y="1470.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanCardClosure&gt;(MemRegion, G1ScanCardClosure*) (14 samples, 0.13%)</title><rect x="939.5" y="1443.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.5" y="1454.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead_with_size(oop, G1CMBitMap const*, unsigned long*) const (4 samples, 0.04%)</title><rect x="939.6" y="1427.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.6" y="1438.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate&lt;G1ScanCardClosure&gt;(G1ScanCardClosure*) (9 samples, 0.08%)</title><rect x="940.0" y="1427.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="943.0" y="1438.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanCardClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanCardClosure*, oop, Klass*) (8 samples, 0.07%)</title><rect x="940.1" y="1411.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="943.1" y="1422.0"></text>
</g>
<g>
<title>void G1ScanCardClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (5 samples, 0.05%)</title><rect x="940.1" y="1395.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.1" y="1406.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (3 samples, 0.03%)</title><rect x="940.7" y="1395.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="943.7" y="1406.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (97 samples, 0.90%)</title><rect x="941.0" y="1507.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.0" y="1518.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (92 samples, 0.85%)</title><rect x="941.0" y="1491.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.0" y="1502.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (90 samples, 0.83%)</title><rect x="941.2" y="1475.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.2" y="1486.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (90 samples, 0.83%)</title><rect x="941.2" y="1459.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.2" y="1470.0"></text>
</g>
<g>
<title>HandleArea::oops_do(OopClosure*) (18 samples, 0.17%)</title><rect x="941.2" y="1443.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.2" y="1454.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oop&gt;(oop*) (18 samples, 0.17%)</title><rect x="941.2" y="1427.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.2" y="1438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (18 samples, 0.17%)</title><rect x="941.2" y="1411.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.2" y="1422.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (15 samples, 0.14%)</title><rect x="941.6" y="1395.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.6" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oop, markOopDesc*) (9 samples, 0.08%)</title><rect x="941.9" y="1379.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.9" y="1390.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate_backwards&lt;G1ScanEvacuatedObjClosure&gt;(G1ScanEvacuatedObjClosure*) (7 samples, 0.06%)</title><rect x="942.1" y="1363.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="945.1" y="1374.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oop, Klass*) (4 samples, 0.04%)</title><rect x="942.3" y="1347.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="945.3" y="1358.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (54 samples, 0.50%)</title><rect x="943.2" y="1443.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.2" y="1454.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oop*, oop*), OopClosure*) (54 samples, 0.50%)</title><rect x="943.2" y="1427.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="946.2" y="1438.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oop&gt;(oop*) (54 samples, 0.50%)</title><rect x="943.2" y="1411.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.2" y="1422.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (52 samples, 0.48%)</title><rect x="943.4" y="1395.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.4" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::verify_ref(unsigned int*) const (3 samples, 0.03%)</title><rect x="943.8" y="1379.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.8" y="1390.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (45 samples, 0.42%)</title><rect x="944.2" y="1379.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="947.2" y="1390.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oop, markOopDesc*) (29 samples, 0.27%)</title><rect x="945.5" y="1363.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.5" y="1374.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(G1HeapRegionAttr, unsigned long, bool*) (3 samples, 0.03%)</title><rect x="946.0" y="1347.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="949.0" y="1358.0"></text>
</g>
<g>
<title>G1Allocator::old_attempt_allocation(unsigned long, unsigned long, unsigned long*) (3 samples, 0.03%)</title><rect x="946.0" y="1331.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="949.0" y="1342.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate_backwards&lt;G1ScanEvacuatedObjClosure&gt;(G1ScanEvacuatedObjClosure*) (17 samples, 0.16%)</title><rect x="946.8" y="1347.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="949.8" y="1358.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oop, Klass*) (12 samples, 0.11%)</title><rect x="947.3" y="1331.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="950.3" y="1342.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (8 samples, 0.07%)</title><rect x="947.3" y="1315.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="950.3" y="1326.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (3 samples, 0.03%)</title><rect x="947.5" y="1299.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="950.5" y="1310.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (4 samples, 0.04%)</title><rect x="948.2" y="1315.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="951.2" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (3 samples, 0.03%)</title><rect x="948.3" y="1299.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="951.3" y="1310.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (17 samples, 0.16%)</title><rect x="949.1" y="1443.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="952.1" y="1454.0"></text>
</g>
<g>
<title>InterpreterOopMap::iterate_oop(OffsetClosure*) const (16 samples, 0.15%)</title><rect x="949.1" y="1427.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="952.1" y="1438.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oop&gt;(oop*) (16 samples, 0.15%)</title><rect x="949.1" y="1411.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="952.1" y="1422.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (16 samples, 0.15%)</title><rect x="949.1" y="1395.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.1" y="1406.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (14 samples, 0.13%)</title><rect x="949.3" y="1379.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="952.3" y="1390.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oop, markOopDesc*) (6 samples, 0.06%)</title><rect x="950.0" y="1363.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="953.0" y="1374.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate_backwards&lt;G1ScanEvacuatedObjClosure&gt;(G1ScanEvacuatedObjClosure*) (4 samples, 0.04%)</title><rect x="950.2" y="1347.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="953.2" y="1358.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oop, Klass*) (4 samples, 0.04%)</title><rect x="950.2" y="1331.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="953.2" y="1342.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.05%)</title><rect x="951.1" y="1491.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="954.1" y="1502.0"></text>
</g>
<g>
<title>JNIHandles::oops_do(OopClosure*) (4 samples, 0.04%)</title><rect x="951.1" y="1475.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.1" y="1486.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oop&gt;(oop*) (4 samples, 0.04%)</title><rect x="951.1" y="1459.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="954.1" y="1470.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 0.04%)</title><rect x="951.1" y="1443.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="954.1" y="1454.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.04%)</title><rect x="951.1" y="1427.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.1" y="1438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oop, markOopDesc*) (3 samples, 0.03%)</title><rect x="951.1" y="1411.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.1" y="1422.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases) (1,645 samples, 15.22%)</title><rect x="951.7" y="1523.0" width="179.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="954.7" y="1534.0">G1RemSet::scan_rem_set(..</text>
</g>
<g>
<title>G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, unsigned int, unsigned int) const (1,645 samples, 15.22%)</title><rect x="951.7" y="1507.0" width="179.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="954.7" y="1518.0">G1CollectionSet::iterat..</text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1,645 samples, 15.22%)</title><rect x="951.7" y="1491.0" width="179.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="954.7" y="1502.0">G1ScanRSForRegionClosur..</text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1,643 samples, 15.20%)</title><rect x="951.9" y="1475.0" width="179.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="954.9" y="1486.0">G1ScanRSForRegionClosur..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1,037 samples, 9.59%)</title><rect x="952.4" y="1459.0" width="113.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="955.4" y="1470.0">G1ParScanThrea..</text>
</g>
<g>
<title>G1ParScanThreadState::do_oop_partial_array(oop*) (40 samples, 0.37%)</title><rect x="956.9" y="1443.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="959.9" y="1454.0"></text>
</g>
<g>
<title>void objArrayOopDesc::oop_iterate_range&lt;G1ScanEvacuatedObjClosure&gt;(G1ScanEvacuatedObjClosure*, int, int) (34 samples, 0.31%)</title><rect x="957.6" y="1427.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.6" y="1438.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (14 samples, 0.13%)</title><rect x="958.0" y="1411.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.0" y="1422.0"></text>
</g>
<g>
<title>G1ParScanThreadState::verify_ref(unsigned int*) const (3 samples, 0.03%)</title><rect x="958.8" y="1395.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.8" y="1406.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (14 samples, 0.13%)</title><rect x="959.8" y="1411.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.8" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (9 samples, 0.08%)</title><rect x="960.2" y="1395.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="963.2" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::verify_ref(unsigned int*) const (36 samples, 0.33%)</title><rect x="961.3" y="1443.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="964.3" y="1454.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (19 samples, 0.18%)</title><rect x="961.9" y="1427.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.9" y="1438.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (12 samples, 0.11%)</title><rect x="963.9" y="1427.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.9" y="1438.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (919 samples, 8.50%)</title><rect x="965.2" y="1443.0" width="100.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="968.2" y="1454.0">void G1ParSc..</text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (3 samples, 0.03%)</title><rect x="975.0" y="1427.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.0" y="1438.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (23 samples, 0.21%)</title><rect x="975.3" y="1427.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="978.3" y="1438.0"></text>
</g>
<g>
<title>CompressedOops::encode_not_null(oop) (50 samples, 0.46%)</title><rect x="977.8" y="1427.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.8" y="1438.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (9 samples, 0.08%)</title><rect x="982.3" y="1411.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.3" y="1422.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (6 samples, 0.06%)</title><rect x="983.3" y="1427.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="986.3" y="1438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oop, markOopDesc*) (662 samples, 6.12%)</title><rect x="984.0" y="1427.0" width="72.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.0" y="1438.0">G1ParSca..</text>
</g>
<g>
<title>CompressedKlassPointers::decode_not_null(unsigned int) (6 samples, 0.06%)</title><rect x="990.7" y="1411.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="993.7" y="1422.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(G1HeapRegionAttr, unsigned long, bool*) (13 samples, 0.12%)</title><rect x="991.3" y="1411.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="994.3" y="1422.0"></text>
</g>
<g>
<title>G1Allocator::old_attempt_allocation(unsigned long, unsigned long, unsigned long*) (12 samples, 0.11%)</title><rect x="991.3" y="1395.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.3" y="1406.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (8 samples, 0.07%)</title><rect x="991.3" y="1379.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.3" y="1390.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWordImpl***, unsigned long*, HeapWordImpl**, HeapWordImpl**) (4 samples, 0.04%)</title><rect x="991.3" y="1363.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="994.3" y="1374.0"></text>
</g>
<g>
<title>G1GCAllocRegion::allocate_new_region(unsigned long, bool) (4 samples, 0.04%)</title><rect x="991.8" y="1363.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="994.8" y="1374.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_gc_alloc_region(unsigned long, G1HeapRegionAttr) (4 samples, 0.04%)</title><rect x="991.8" y="1347.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="994.8" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, HeapRegionType, bool) (4 samples, 0.04%)</title><rect x="991.8" y="1331.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.8" y="1342.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_free_region(HeapRegionType) (4 samples, 0.04%)</title><rect x="991.8" y="1315.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="994.8" y="1326.0"></text>
</g>
<g>
<title>FreeRegionList::verify() (3 samples, 0.03%)</title><rect x="991.9" y="1299.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.9" y="1310.0"></text>
</g>
<g>
<title>FreeRegionList::verify_list() (3 samples, 0.03%)</title><rect x="991.9" y="1283.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="994.9" y="1294.0"></text>
</g>
<g>
<title>HeapRegionSetBase::verify_region(HeapRegion*) (3 samples, 0.03%)</title><rect x="991.9" y="1267.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="994.9" y="1278.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWordImpl***, unsigned long*, HeapWordImpl**, HeapWordImpl**) (4 samples, 0.04%)</title><rect x="992.2" y="1379.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.2" y="1390.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::check_all_cards(unsigned long, unsigned long) const [clone .part.12] (3 samples, 0.03%)</title><rect x="992.3" y="1363.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="995.3" y="1374.0"></text>
</g>
<g>
<title>G1PLABAllocator::plab_allocate(G1HeapRegionAttr, unsigned long) (10 samples, 0.09%)</title><rect x="992.8" y="1411.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="995.8" y="1422.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;oop&gt;(oop) const (8 samples, 0.07%)</title><rect x="994.1" y="1411.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="997.1" y="1422.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (4 samples, 0.04%)</title><rect x="994.5" y="1395.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.5" y="1406.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (10 samples, 0.09%)</title><rect x="994.9" y="1411.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="997.9" y="1422.0"></text>
</g>
<g>
<title>oopDesc::forward_to_atomic(oop, markOopDesc*, atomic_memory_order) (25 samples, 0.23%)</title><rect x="996.6" y="1411.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="999.6" y="1422.0"></text>
</g>
<g>
<title>oopDesc::is_objArray() const (7 samples, 0.06%)</title><rect x="999.3" y="1411.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.3" y="1422.0"></text>
</g>
<g>
<title>CompressedKlassPointers::decode_not_null(unsigned int) (3 samples, 0.03%)</title><rect x="999.7" y="1395.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1002.7" y="1406.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (10 samples, 0.09%)</title><rect x="1000.1" y="1411.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1003.1" y="1422.0"></text>
</g>
<g>
<title>page_fault (9 samples, 0.08%)</title><rect x="1001.2" y="1411.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1004.2" y="1422.0"></text>
</g>
<g>
<title>do_page_fault (9 samples, 0.08%)</title><rect x="1001.2" y="1395.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1004.2" y="1406.0"></text>
</g>
<g>
<title>__do_page_fault (9 samples, 0.08%)</title><rect x="1001.2" y="1379.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1004.2" y="1390.0"></text>
</g>
<g>
<title>handle_mm_fault (5 samples, 0.05%)</title><rect x="1001.6" y="1363.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1004.6" y="1374.0"></text>
</g>
<g>
<title>__handle_mm_fault (5 samples, 0.05%)</title><rect x="1001.6" y="1347.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1004.6" y="1358.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oop, Klass*) (4 samples, 0.04%)</title><rect x="1002.1" y="1411.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.1" y="1422.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate_backwards&lt;G1ScanEvacuatedObjClosure&gt;(G1ScanEvacuatedObjClosure*) (492 samples, 4.55%)</title><rect x="1002.6" y="1411.0" width="53.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1005.6" y="1422.0">void ..</text>
</g>
<g>
<title>CompressedKlassPointers::decode_not_null(unsigned int) (4 samples, 0.04%)</title><rect x="1003.6" y="1395.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.6" y="1406.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.03%)</title><rect x="1004.2" y="1395.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.2" y="1406.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.03%)</title><rect x="1004.5" y="1395.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1007.5" y="1406.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (7 samples, 0.06%)</title><rect x="1004.9" y="1395.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.9" y="1406.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oop, Klass*) (462 samples, 4.27%)</title><rect x="1005.6" y="1395.0" width="50.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.6" y="1406.0">void ..</text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (7 samples, 0.06%)</title><rect x="1008.9" y="1379.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.9" y="1390.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (11 samples, 0.10%)</title><rect x="1009.8" y="1379.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.8" y="1390.0"></text>
</g>
<g>
<title>OopIterateClosure::should_verify_oops() (13 samples, 0.12%)</title><rect x="1011.1" y="1379.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.1" y="1390.0"></text>
</g>
<g>
<title>oopDesc::field_addr_raw(int) const (3 samples, 0.03%)</title><rect x="1012.8" y="1379.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1015.8" y="1390.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (252 samples, 2.33%)</title><rect x="1013.3" y="1379.0" width="27.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.3" y="1390.0">v..</text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (26 samples, 0.24%)</title><rect x="1018.7" y="1363.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1021.7" y="1374.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (39 samples, 0.36%)</title><rect x="1021.6" y="1363.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.6" y="1374.0"></text>
</g>
<g>
<title>G1ParScanThreadState::verify_ref(unsigned int*) const (37 samples, 0.34%)</title><rect x="1026.0" y="1363.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.0" y="1374.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (23 samples, 0.21%)</title><rect x="1026.8" y="1347.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.8" y="1358.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (7 samples, 0.06%)</title><rect x="1029.3" y="1347.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1032.3" y="1358.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (14 samples, 0.13%)</title><rect x="1030.6" y="1363.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1033.6" y="1374.0"></text>
</g>
<g>
<title>bool HeapRegion::is_in_same_region&lt;unsigned int&gt;(unsigned int*, oop) (14 samples, 0.13%)</title><rect x="1032.2" y="1363.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1035.2" y="1374.0"></text>
</g>
<g>
<title>oop::operator==(oop) const (15 samples, 0.14%)</title><rect x="1033.7" y="1363.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.7" y="1374.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::enqueue_card_if_tracked&lt;unsigned int&gt;(G1HeapRegionAttr, unsigned int*, oop) (50 samples, 0.46%)</title><rect x="1035.3" y="1363.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.3" y="1374.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;HeapWordImpl* const*&gt;(HeapWordImpl* const*) const (6 samples, 0.06%)</title><rect x="1036.3" y="1347.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1039.3" y="1358.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (3 samples, 0.03%)</title><rect x="1036.6" y="1331.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1039.6" y="1342.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;unsigned int*&gt;(unsigned int*) const (6 samples, 0.06%)</title><rect x="1037.0" y="1347.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.0" y="1358.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (16 samples, 0.15%)</title><rect x="1037.6" y="1347.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.6" y="1358.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (5 samples, 0.05%)</title><rect x="1038.8" y="1331.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1041.8" y="1342.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (4 samples, 0.04%)</title><rect x="1039.4" y="1347.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1042.4" y="1358.0"></text>
</g>
<g>
<title>HeapRegionType::get() const (4 samples, 0.04%)</title><rect x="1039.8" y="1347.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1042.8" y="1358.0"></text>
</g>
<g>
<title>bool HeapRegion::is_in_same_region&lt;unsigned int&gt;(unsigned int*, oop) (5 samples, 0.05%)</title><rect x="1040.2" y="1347.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.2" y="1358.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.03%)</title><rect x="1040.8" y="1379.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1043.8" y="1390.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (137 samples, 1.27%)</title><rect x="1041.1" y="1379.0" width="15.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1044.1" y="1390.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (28 samples, 0.26%)</title><rect x="1042.1" y="1363.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.1" y="1374.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (94 samples, 0.87%)</title><rect x="1045.1" y="1363.0" width="10.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.1" y="1374.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (4 samples, 0.04%)</title><rect x="1048.3" y="1347.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.3" y="1358.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;void const*&gt;(void const*) const (20 samples, 0.19%)</title><rect x="1048.7" y="1347.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.7" y="1358.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (7 samples, 0.06%)</title><rect x="1050.2" y="1331.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.2" y="1342.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (33 samples, 0.31%)</title><rect x="1050.9" y="1347.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.9" y="1358.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (8 samples, 0.07%)</title><rect x="1053.6" y="1331.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.6" y="1342.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (8 samples, 0.07%)</title><rect x="1054.5" y="1347.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.5" y="1358.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;void const*&gt;(void const*) const (3 samples, 0.03%)</title><rect x="1055.4" y="1363.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1058.4" y="1374.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;unsigned int*&gt;(unsigned int*) const (5 samples, 0.05%)</title><rect x="1056.3" y="1427.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.3" y="1438.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (3 samples, 0.03%)</title><rect x="1056.5" y="1411.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1059.5" y="1422.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (6 samples, 0.06%)</title><rect x="1056.8" y="1427.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.8" y="1438.0"></text>
</g>
<g>
<title>HeapRegionType::get() const (11 samples, 0.10%)</title><rect x="1057.5" y="1427.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.5" y="1438.0"></text>
</g>
<g>
<title>bool HeapRegion::is_in_same_region&lt;unsigned int&gt;(unsigned int*, oop) (14 samples, 0.13%)</title><rect x="1058.8" y="1427.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.8" y="1438.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::enqueue_card_if_tracked&lt;unsigned int&gt;(G1HeapRegionAttr, unsigned int*, oop) (41 samples, 0.38%)</title><rect x="1060.9" y="1427.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1063.9" y="1438.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;HeapWordImpl* const*&gt;(HeapWordImpl* const*) const (6 samples, 0.06%)</title><rect x="1061.8" y="1411.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1064.8" y="1422.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (6 samples, 0.06%)</title><rect x="1061.8" y="1395.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1064.8" y="1406.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;unsigned int*&gt;(unsigned int*) const (5 samples, 0.05%)</title><rect x="1062.5" y="1411.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.5" y="1422.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (5 samples, 0.05%)</title><rect x="1062.5" y="1395.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.5" y="1406.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (7 samples, 0.06%)</title><rect x="1063.0" y="1411.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.0" y="1422.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (3 samples, 0.03%)</title><rect x="1063.5" y="1395.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.5" y="1406.0"></text>
</g>
<g>
<title>HeapRegionType::get() const (4 samples, 0.04%)</title><rect x="1063.8" y="1411.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.8" y="1422.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (3 samples, 0.03%)</title><rect x="1064.2" y="1411.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.2" y="1422.0"></text>
</g>
<g>
<title>bool HeapRegion::is_in_same_region&lt;unsigned int&gt;(unsigned int*, oop) (7 samples, 0.06%)</title><rect x="1064.6" y="1411.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.6" y="1422.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (5 samples, 0.05%)</title><rect x="1065.9" y="1459.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.9" y="1470.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanCardClosure&gt;(MemRegion, G1ScanCardClosure*) (589 samples, 5.45%)</title><rect x="1066.4" y="1459.0" width="64.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.4" y="1470.0">bool He..</text>
</g>
<g>
<title>CompressedKlassPointers::decode_not_null(unsigned int) (3 samples, 0.03%)</title><rect x="1068.5" y="1443.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.5" y="1454.0"></text>
</g>
<g>
<title>G1BlockOffsetTable::check_index(unsigned long, char const*) const (9 samples, 0.08%)</title><rect x="1068.8" y="1443.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.8" y="1454.0"></text>
</g>
<g>
<title>G1BlockOffsetTable::index_for(void const*) const (4 samples, 0.04%)</title><rect x="1069.8" y="1443.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.8" y="1454.0"></text>
</g>
<g>
<title>G1BlockOffsetTable::check_index(unsigned long, char const*) const (4 samples, 0.04%)</title><rect x="1069.8" y="1427.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.8" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in_exact(void const*) const (3 samples, 0.03%)</title><rect x="1069.9" y="1411.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1072.9" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::addr_to_region(HeapWordImpl**) const (3 samples, 0.03%)</title><rect x="1069.9" y="1395.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.9" y="1406.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*) (36 samples, 0.33%)</title><rect x="1070.3" y="1443.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.3" y="1454.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWordImpl***, unsigned long*, HeapWordImpl**, HeapWordImpl**) (9 samples, 0.08%)</title><rect x="1071.5" y="1427.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.5" y="1438.0"></text>
</g>
<g>
<title>G1BlockOffsetTable::check_index(unsigned long, char const*) const [clone .constprop.27] (6 samples, 0.06%)</title><rect x="1071.5" y="1411.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.5" y="1422.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWordImpl* const*) const (16 samples, 0.15%)</title><rect x="1072.4" y="1427.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.4" y="1438.0"></text>
</g>
<g>
<title>CompressedKlassPointers::decode_not_null(unsigned int) (3 samples, 0.03%)</title><rect x="1072.8" y="1411.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.8" y="1422.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (4 samples, 0.04%)</title><rect x="1073.2" y="1411.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.2" y="1422.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (5 samples, 0.05%)</title><rect x="1073.6" y="1411.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.6" y="1422.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead_with_size(oop, G1CMBitMap const*, unsigned long*) const (75 samples, 0.69%)</title><rect x="1074.8" y="1443.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.8" y="1454.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (4 samples, 0.04%)</title><rect x="1076.7" y="1427.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.7" y="1438.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (15 samples, 0.14%)</title><rect x="1077.1" y="1427.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.1" y="1438.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead(oop, G1CMBitMap const*) const (11 samples, 0.10%)</title><rect x="1078.8" y="1427.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.8" y="1438.0"></text>
</g>
<g>
<title>HeapRegionType::get() const (9 samples, 0.08%)</title><rect x="1080.0" y="1427.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.0" y="1438.0"></text>
</g>
<g>
<title>HeapRegionType::is_valid(HeapRegionType::Tag) (3 samples, 0.03%)</title><rect x="1080.6" y="1411.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.6" y="1422.0"></text>
</g>
<g>
<title>HeapRegionType::is_valid(HeapRegionType::Tag) (5 samples, 0.05%)</title><rect x="1081.0" y="1427.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.0" y="1438.0"></text>
</g>
<g>
<title>oopDesc::size() (8 samples, 0.07%)</title><rect x="1081.5" y="1427.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1084.5" y="1438.0"></text>
</g>
<g>
<title>CompressedKlassPointers::decode_not_null(unsigned int) (5 samples, 0.05%)</title><rect x="1081.8" y="1411.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.8" y="1422.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (6 samples, 0.06%)</title><rect x="1082.4" y="1427.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.4" y="1438.0"></text>
</g>
<g>
<title>HeapRegionType::get() const (3 samples, 0.03%)</title><rect x="1083.1" y="1443.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.1" y="1454.0"></text>
</g>
<g>
<title>Klass::is_objArray_klass_slow() const (5 samples, 0.05%)</title><rect x="1083.5" y="1443.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.5" y="1454.0"></text>
</g>
<g>
<title>oopDesc::is_objArray() const (8 samples, 0.07%)</title><rect x="1084.0" y="1443.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1087.0" y="1454.0"></text>
</g>
<g>
<title>CompressedKlassPointers::decode_not_null(unsigned int) (4 samples, 0.04%)</title><rect x="1084.4" y="1427.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1087.4" y="1438.0"></text>
</g>
<g>
<title>oopDesc::is_oop(oop, bool) (18 samples, 0.17%)</title><rect x="1084.9" y="1443.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.9" y="1454.0"></text>
</g>
<g>
<title>CollectedHeap::is_oop(oop) const (3 samples, 0.03%)</title><rect x="1086.5" y="1427.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.5" y="1438.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate&lt;G1ScanCardClosure&gt;(G1ScanCardClosure*) (399 samples, 3.69%)</title><rect x="1087.0" y="1443.0" width="43.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.0" y="1454.0">void..</text>
</g>
<g>
<title>Klass::start_of_vtable() const (3 samples, 0.03%)</title><rect x="1087.9" y="1427.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.9" y="1438.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.04%)</title><rect x="1088.8" y="1427.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.8" y="1438.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanCardClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanCardClosure*, oop, Klass*) (377 samples, 3.49%)</title><rect x="1089.4" y="1427.0" width="41.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.4" y="1438.0">voi..</text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (7 samples, 0.06%)</title><rect x="1092.8" y="1411.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.8" y="1422.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (4 samples, 0.04%)</title><rect x="1093.6" y="1411.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.6" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (3 samples, 0.03%)</title><rect x="1094.0" y="1411.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.0" y="1422.0"></text>
</g>
<g>
<title>OopIterateClosure::should_verify_oops() (4 samples, 0.04%)</title><rect x="1094.4" y="1411.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.4" y="1422.0"></text>
</g>
<g>
<title>void G1ScanCardClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (217 samples, 2.01%)</title><rect x="1095.0" y="1411.0" width="23.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.0" y="1422.0">v..</text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (19 samples, 0.18%)</title><rect x="1100.1" y="1395.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.1" y="1406.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (4 samples, 0.04%)</title><rect x="1102.1" y="1395.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.1" y="1406.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (3 samples, 0.03%)</title><rect x="1103.0" y="1395.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.0" y="1406.0"></text>
</g>
<g>
<title>bool HeapRegion::is_in_same_region&lt;unsigned int&gt;(unsigned int*, oop) (7 samples, 0.06%)</title><rect x="1103.3" y="1395.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.3" y="1406.0"></text>
</g>
<g>
<title>check_obj_alignment(oop) (3 samples, 0.03%)</title><rect x="1104.1" y="1395.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1107.1" y="1406.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::enqueue_card_if_tracked&lt;unsigned int&gt;(G1HeapRegionAttr, unsigned int*, oop) (36 samples, 0.33%)</title><rect x="1104.4" y="1395.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.4" y="1406.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;HeapWordImpl* const*&gt;(HeapWordImpl* const*) const (3 samples, 0.03%)</title><rect x="1105.0" y="1379.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.0" y="1390.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;unsigned int*&gt;(unsigned int*) const (8 samples, 0.07%)</title><rect x="1105.3" y="1379.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.3" y="1390.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (4 samples, 0.04%)</title><rect x="1105.7" y="1363.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.7" y="1374.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (11 samples, 0.10%)</title><rect x="1106.2" y="1379.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.2" y="1390.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (4 samples, 0.04%)</title><rect x="1106.9" y="1363.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.9" y="1374.0"></text>
</g>
<g>
<title>bool HeapRegion::is_in_same_region&lt;unsigned int&gt;(unsigned int*, oop) (5 samples, 0.05%)</title><rect x="1107.8" y="1379.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.8" y="1390.0"></text>
</g>
<g>
<title>void G1ScanClosureBase::prefetch_and_push&lt;unsigned int&gt;(unsigned int*, oop) (12 samples, 0.11%)</title><rect x="1108.3" y="1395.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.3" y="1406.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (4 samples, 0.04%)</title><rect x="1108.5" y="1379.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.5" y="1390.0"></text>
</g>
<g>
<title>G1ParScanThreadState::verify_ref(unsigned int*) const (4 samples, 0.04%)</title><rect x="1108.9" y="1379.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.9" y="1390.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (4 samples, 0.04%)</title><rect x="1108.9" y="1363.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.9" y="1374.0"></text>
</g>
<g>
<title>void check_obj_during_refinement&lt;unsigned int&gt;(unsigned int*, oop) (83 samples, 0.77%)</title><rect x="1109.7" y="1395.0" width="9.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1112.7" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (7 samples, 0.06%)</title><rect x="1112.3" y="1379.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.3" y="1390.0"></text>
</g>
<g>
<title>G1CollectedHeap::kind() const (6 samples, 0.06%)</title><rect x="1113.0" y="1379.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.0" y="1390.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;unsigned int*&gt;(unsigned int*) const (14 samples, 0.13%)</title><rect x="1113.7" y="1379.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.7" y="1390.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (9 samples, 0.08%)</title><rect x="1114.2" y="1363.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.2" y="1374.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (21 samples, 0.19%)</title><rect x="1115.2" y="1379.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.2" y="1390.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (3 samples, 0.03%)</title><rect x="1117.2" y="1363.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.2" y="1374.0"></text>
</g>
<g>
<title>check_obj_alignment(oop) (9 samples, 0.08%)</title><rect x="1117.7" y="1379.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1120.7" y="1390.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) (5 samples, 0.05%)</title><rect x="1118.7" y="1411.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.7" y="1422.0"></text>
</g>
<g>
<title>void OopIterateClosure::verify&lt;unsigned int&gt;(unsigned int*) [clone .part.277] (102 samples, 0.94%)</title><rect x="1119.3" y="1411.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.3" y="1422.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (24 samples, 0.22%)</title><rect x="1120.2" y="1395.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.2" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_in(void const*) const (63 samples, 0.58%)</title><rect x="1122.9" y="1395.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.9" y="1406.0"></text>
</g>
<g>
<title>G1BiasedMappedArrayBase::verify_biased_index(unsigned long) const (5 samples, 0.05%)</title><rect x="1124.9" y="1379.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.9" y="1390.0"></text>
</g>
<g>
<title>HeapRegion* G1CollectedHeap::heap_region_containing&lt;void const*&gt;(void const*) const (13 samples, 0.12%)</title><rect x="1125.5" y="1379.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.5" y="1390.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (12 samples, 0.11%)</title><rect x="1126.9" y="1379.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.9" y="1390.0"></text>
</g>
<g>
<title>HeapRegionManager::reserved() const (14 samples, 0.13%)</title><rect x="1128.2" y="1379.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.2" y="1390.0"></text>
</g>
<g>
<title>void oopDesc::oop_iterate&lt;G1ScanCardClosure&gt;(G1ScanCardClosure*) (3 samples, 0.03%)</title><rect x="1130.9" y="1459.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.9" y="1470.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (18 samples, 0.17%)</title><rect x="1131.4" y="1539.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.4" y="1550.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (18 samples, 0.17%)</title><rect x="1131.4" y="1523.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.4" y="1534.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (18 samples, 0.17%)</title><rect x="1131.4" y="1507.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.4" y="1518.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*, bool, bool, bool) (18 samples, 0.17%)</title><rect x="1131.4" y="1491.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.4" y="1502.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (18 samples, 0.17%)</title><rect x="1131.4" y="1475.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.4" y="1486.0"></text>
</g>
<g>
<title>CompactibleSpace::clear(bool) (18 samples, 0.17%)</title><rect x="1131.4" y="1459.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.4" y="1470.0"></text>
</g>
<g>
<title>G1ContiguousSpace::mangle_unused_area() (18 samples, 0.17%)</title><rect x="1131.4" y="1443.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.4" y="1454.0"></text>
</g>
<g>
<title>SpaceMangler::mangle_region(MemRegion) (18 samples, 0.17%)</title><rect x="1131.4" y="1427.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.4" y="1438.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (3 samples, 0.03%)</title><rect x="1133.3" y="1539.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.3" y="1550.0"></text>
</g>
<g>
<title>G1DirtyCardQueueSet::par_apply_closure_to_all_completed_buffers(G1CardTableEntryClosure*) (3 samples, 0.03%)</title><rect x="1133.3" y="1523.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.3" y="1534.0"></text>
</g>
<g>
<title>G1DirtyCardQueueSet::apply_closure_to_buffer(G1CardTableEntryClosure*, BufferNode*, bool, unsigned int) (3 samples, 0.03%)</title><rect x="1133.3" y="1507.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.3" y="1518.0"></text>
</g>
<g>
<title>RedirtyLoggedCardTableEntryClosure::do_card_ptr(unsigned char*, unsigned int) (3 samples, 0.03%)</title><rect x="1133.3" y="1491.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.3" y="1502.0"></text>
</g>
<g>
<title>HeapRegionManager::addr_to_region(HeapWordImpl**) const (3 samples, 0.03%)</title><rect x="1133.3" y="1475.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="1486.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (500 samples, 4.63%)</title><rect x="1133.8" y="1555.0" width="54.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="1566.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (478 samples, 4.42%)</title><rect x="1133.8" y="1539.0" width="52.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.8" y="1550.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (475 samples, 4.39%)</title><rect x="1133.8" y="1523.0" width="51.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.8" y="1534.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (300 samples, 2.78%)</title><rect x="1133.8" y="1507.0" width="32.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.8" y="1518.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (299 samples, 2.77%)</title><rect x="1133.9" y="1491.0" width="32.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.9" y="1502.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (189 samples, 1.75%)</title><rect x="1134.1" y="1475.0" width="20.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.1" y="1486.0"></text>
</g>
<g>
<title>Compile::Output() (8 samples, 0.07%)</title><rect x="1134.1" y="1459.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.1" y="1470.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.03%)</title><rect x="1134.1" y="1443.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.1" y="1454.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (5 samples, 0.05%)</title><rect x="1134.4" y="1443.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.4" y="1454.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (4 samples, 0.04%)</title><rect x="1134.5" y="1427.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.5" y="1438.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (11 samples, 0.10%)</title><rect x="1135.0" y="1459.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.0" y="1470.0"></text>
</g>
<g>
<title>CodeStrings::add_comment(long, char const*) (3 samples, 0.03%)</title><rect x="1135.2" y="1443.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.2" y="1454.0"></text>
</g>
<g>
<title>Matcher::match() (17 samples, 0.16%)</title><rect x="1136.3" y="1459.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.3" y="1470.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (14 samples, 0.13%)</title><rect x="1136.6" y="1443.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.6" y="1454.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (3 samples, 0.03%)</title><rect x="1136.8" y="1427.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.8" y="1438.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (6 samples, 0.06%)</title><rect x="1137.2" y="1427.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.2" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (12 samples, 0.11%)</title><rect x="1138.3" y="1459.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.3" y="1470.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (12 samples, 0.11%)</title><rect x="1138.3" y="1443.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.3" y="1454.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.03%)</title><rect x="1138.3" y="1427.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.3" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 0.04%)</title><rect x="1138.6" y="1427.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.6" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (4 samples, 0.04%)</title><rect x="1138.6" y="1411.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.6" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::verify() const (3 samples, 0.03%)</title><rect x="1139.6" y="1459.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.6" y="1470.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (3 samples, 0.03%)</title><rect x="1139.6" y="1443.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.6" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (136 samples, 1.26%)</title><rect x="1139.9" y="1459.0" width="14.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.9" y="1470.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 0.06%)</title><rect x="1140.2" y="1443.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.2" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (21 samples, 0.19%)</title><rect x="1141.2" y="1443.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.2" y="1454.0"></text>
</g>
<g>
<title>LiveRangeMap::find_const(unsigned int) const [clone .part.118] (5 samples, 0.05%)</title><rect x="1142.7" y="1427.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.7" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (63 samples, 0.58%)</title><rect x="1143.5" y="1443.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.5" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (21 samples, 0.19%)</title><rect x="1144.0" y="1427.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::count_float_pressure(IndexSet*) (7 samples, 0.06%)</title><rect x="1144.3" y="1411.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.3" y="1422.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (5 samples, 0.05%)</title><rect x="1144.5" y="1395.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.5" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::count_int_pressure(IndexSet*) (7 samples, 0.06%)</title><rect x="1145.0" y="1411.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.0" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (5 samples, 0.05%)</title><rect x="1146.4" y="1427.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.4" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::count_float_pressure(IndexSet*) (3 samples, 0.03%)</title><rect x="1146.7" y="1411.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.7" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (8 samples, 0.07%)</title><rect x="1147.0" y="1427.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.0" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (17 samples, 0.16%)</title><rect x="1147.9" y="1427.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.9" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::count_float_pressure(IndexSet*) (7 samples, 0.06%)</title><rect x="1148.0" y="1411.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.0" y="1422.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (5 samples, 0.05%)</title><rect x="1148.2" y="1395.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.2" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::count_int_pressure(IndexSet*) (7 samples, 0.06%)</title><rect x="1148.7" y="1411.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.7" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (6 samples, 0.06%)</title><rect x="1149.7" y="1427.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.7" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.06%)</title><rect x="1150.7" y="1443.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.7" y="1454.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (3 samples, 0.03%)</title><rect x="1151.0" y="1427.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.0" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.124] (10 samples, 0.09%)</title><rect x="1151.4" y="1443.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.4" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 0.07%)</title><rect x="1152.6" y="1443.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.05%)</title><rect x="1152.9" y="1427.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.9" y="1438.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.04%)</title><rect x="1153.4" y="1443.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.4" y="1454.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.05%)</title><rect x="1154.1" y="1443.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.1" y="1454.0"></text>
</g>
<g>
<title>Compile::Optimize() (66 samples, 0.61%)</title><rect x="1154.7" y="1475.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.7" y="1486.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (12 samples, 0.11%)</title><rect x="1155.1" y="1459.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.1" y="1470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::optimize(PhaseIterGVN&amp;, LoopOptsMode) (12 samples, 0.11%)</title><rect x="1155.1" y="1443.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.1" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (11 samples, 0.10%)</title><rect x="1155.1" y="1427.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.1" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.05%)</title><rect x="1155.3" y="1411.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.3" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (5 samples, 0.05%)</title><rect x="1155.3" y="1395.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.3" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.03%)</title><rect x="1156.5" y="1459.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.03%)</title><rect x="1156.5" y="1443.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="1454.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.04%)</title><rect x="1156.8" y="1459.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.8" y="1470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::optimize(PhaseIterGVN&amp;, LoopOptsMode) (16 samples, 0.15%)</title><rect x="1157.3" y="1459.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.3" y="1470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (16 samples, 0.15%)</title><rect x="1157.3" y="1443.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.3" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.03%)</title><rect x="1157.6" y="1427.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.6" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.04%)</title><rect x="1157.9" y="1427.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.9" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (3 samples, 0.03%)</title><rect x="1158.0" y="1411.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.0" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.03%)</title><rect x="1158.0" y="1395.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.0" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.04%)</title><rect x="1158.3" y="1427.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.3" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::verify(PhaseIterGVN&amp;) (12 samples, 0.11%)</title><rect x="1159.0" y="1459.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.0" y="1470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (12 samples, 0.11%)</title><rect x="1159.0" y="1443.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.0" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.08%)</title><rect x="1159.1" y="1427.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.1" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (6 samples, 0.06%)</title><rect x="1159.4" y="1411.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.4" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.03%)</title><rect x="1159.7" y="1395.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.7" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 0.12%)</title><rect x="1160.5" y="1459.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.5" y="1470.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 0.11%)</title><rect x="1160.6" y="1443.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.6" y="1454.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1160.9" y="1427.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.9" y="1438.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) [clone .part.79] (3 samples, 0.03%)</title><rect x="1160.9" y="1411.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.9" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (35 samples, 0.32%)</title><rect x="1162.4" y="1475.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.4" y="1486.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (35 samples, 0.32%)</title><rect x="1162.4" y="1459.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (33 samples, 0.31%)</title><rect x="1162.4" y="1443.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_block() (33 samples, 0.31%)</title><rect x="1162.4" y="1427.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.4" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (33 samples, 0.31%)</title><rect x="1162.4" y="1411.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="1422.0"></text>
</g>
<g>
<title>Parse::do_call() (30 samples, 0.28%)</title><rect x="1162.5" y="1395.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.5" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (23 samples, 0.21%)</title><rect x="1162.5" y="1379.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.5" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (23 samples, 0.21%)</title><rect x="1162.5" y="1363.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (23 samples, 0.21%)</title><rect x="1162.5" y="1347.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (23 samples, 0.21%)</title><rect x="1162.5" y="1331.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (23 samples, 0.21%)</title><rect x="1162.5" y="1315.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (20 samples, 0.19%)</title><rect x="1162.5" y="1299.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.5" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 0.17%)</title><rect x="1162.6" y="1283.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 0.17%)</title><rect x="1162.6" y="1267.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.17%)</title><rect x="1162.6" y="1251.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.17%)</title><rect x="1162.6" y="1235.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 0.16%)</title><rect x="1162.7" y="1219.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 0.15%)</title><rect x="1162.7" y="1203.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.7" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.11%)</title><rect x="1162.9" y="1187.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.11%)</title><rect x="1162.9" y="1171.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.11%)</title><rect x="1162.9" y="1155.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.11%)</title><rect x="1162.9" y="1139.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.10%)</title><rect x="1162.9" y="1123.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.09%)</title><rect x="1162.9" y="1107.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.06%)</title><rect x="1162.9" y="1091.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.06%)</title><rect x="1162.9" y="1075.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.06%)</title><rect x="1162.9" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.06%)</title><rect x="1162.9" y="1043.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.06%)</title><rect x="1162.9" y="1027.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="1162.9" y="1011.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.9" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.06%)</title><rect x="1162.9" y="995.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.06%)</title><rect x="1162.9" y="979.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.9" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.06%)</title><rect x="1162.9" y="963.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.06%)</title><rect x="1162.9" y="947.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.06%)</title><rect x="1162.9" y="931.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.06%)</title><rect x="1162.9" y="915.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="1162.9" y="899.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.06%)</title><rect x="1162.9" y="883.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.06%)</title><rect x="1162.9" y="867.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.06%)</title><rect x="1162.9" y="851.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.06%)</title><rect x="1162.9" y="835.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.06%)</title><rect x="1162.9" y="819.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="1162.9" y="803.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1162.9" y="787.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1162.9" y="771.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1162.9" y="755.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1162.9" y="739.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1162.9" y="723.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1162.9" y="707.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1162.9" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1162.9" y="675.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1162.9" y="659.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1162.9" y="643.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1162.9" y="627.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1162.9" y="611.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1162.9" y="595.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1162.9" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1162.9" y="563.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1162.9" y="547.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1162.9" y="531.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1162.9" y="515.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.03%)</title><rect x="1164.7" y="1299.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.7" y="1310.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (7 samples, 0.06%)</title><rect x="1165.0" y="1379.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.0" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.06%)</title><rect x="1165.0" y="1363.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.0" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.06%)</title><rect x="1165.0" y="1347.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.06%)</title><rect x="1165.0" y="1331.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.0" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.06%)</title><rect x="1165.0" y="1315.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.0" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.06%)</title><rect x="1165.0" y="1299.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="1165.0" y="1283.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1165.0" y="1267.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1165.0" y="1251.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1165.1" y="1235.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1165.1" y="1219.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.1" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1165.1" y="1203.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.1" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1165.1" y="1187.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.1" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1165.1" y="1171.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.1" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1165.1" y="1155.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1165.1" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1165.1" y="1123.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1165.2" y="1107.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1165.2" y="1091.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.2" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (171 samples, 1.58%)</title><rect x="1166.7" y="1507.0" width="18.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.7" y="1518.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (171 samples, 1.58%)</title><rect x="1166.7" y="1491.0" width="18.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.7" y="1502.0"></text>
</g>
<g>
<title>Compilation::compile_method() (171 samples, 1.58%)</title><rect x="1166.7" y="1475.0" width="18.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.7" y="1486.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() [clone .part.107] (164 samples, 1.52%)</title><rect x="1166.7" y="1459.0" width="18.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.7" y="1470.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.106] (66 samples, 0.61%)</title><rect x="1166.7" y="1443.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.7" y="1454.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (38 samples, 0.35%)</title><rect x="1166.9" y="1427.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="1438.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (38 samples, 0.35%)</title><rect x="1166.9" y="1411.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.9" y="1422.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (37 samples, 0.34%)</title><rect x="1167.0" y="1395.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.0" y="1406.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (37 samples, 0.34%)</title><rect x="1167.0" y="1379.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.0" y="1390.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (36 samples, 0.33%)</title><rect x="1167.0" y="1363.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.0" y="1374.0"></text>
</g>
<g>
<title>GraphBuilder::null_check(Instruction*) (3 samples, 0.03%)</title><rect x="1167.1" y="1347.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.1" y="1358.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (26 samples, 0.24%)</title><rect x="1167.4" y="1347.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.4" y="1358.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (26 samples, 0.24%)</title><rect x="1167.4" y="1331.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.4" y="1342.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (21 samples, 0.19%)</title><rect x="1167.4" y="1315.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.4" y="1326.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (21 samples, 0.19%)</title><rect x="1167.4" y="1299.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.4" y="1310.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (19 samples, 0.18%)</title><rect x="1167.6" y="1283.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.6" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (16 samples, 0.15%)</title><rect x="1167.7" y="1267.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (15 samples, 0.14%)</title><rect x="1167.7" y="1251.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.7" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (11 samples, 0.10%)</title><rect x="1167.8" y="1235.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.8" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (11 samples, 0.10%)</title><rect x="1167.8" y="1219.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.8" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (7 samples, 0.06%)</title><rect x="1168.2" y="1203.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.2" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (6 samples, 0.06%)</title><rect x="1168.3" y="1187.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.05%)</title><rect x="1168.4" y="1171.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.4" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 0.05%)</title><rect x="1168.4" y="1155.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.4" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 0.05%)</title><rect x="1168.4" y="1139.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.4" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.03%)</title><rect x="1168.6" y="1123.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.6" y="1134.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (3 samples, 0.03%)</title><rect x="1170.4" y="1347.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.4" y="1358.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (3 samples, 0.03%)</title><rect x="1170.4" y="1331.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.4" y="1342.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (3 samples, 0.03%)</title><rect x="1170.4" y="1315.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.4" y="1326.0"></text>
</g>
<g>
<title>IR::optimize_blocks() (10 samples, 0.09%)</title><rect x="1171.0" y="1427.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.0" y="1438.0"></text>
</g>
<g>
<title>Optimizer::eliminate_blocks() (10 samples, 0.09%)</title><rect x="1171.0" y="1411.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="1422.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (10 samples, 0.09%)</title><rect x="1171.0" y="1395.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="1406.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (10 samples, 0.09%)</title><rect x="1171.0" y="1379.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.0" y="1390.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (10 samples, 0.09%)</title><rect x="1171.0" y="1363.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.0" y="1374.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (10 samples, 0.09%)</title><rect x="1171.0" y="1347.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.0" y="1358.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (10 samples, 0.09%)</title><rect x="1171.0" y="1331.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="1342.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (10 samples, 0.09%)</title><rect x="1171.0" y="1315.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.0" y="1326.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (9 samples, 0.08%)</title><rect x="1171.0" y="1299.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.0" y="1310.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (8 samples, 0.07%)</title><rect x="1171.0" y="1283.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="1294.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (8 samples, 0.07%)</title><rect x="1171.0" y="1267.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="1278.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (8 samples, 0.07%)</title><rect x="1171.0" y="1251.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.0" y="1262.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (8 samples, 0.07%)</title><rect x="1171.0" y="1235.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="1246.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (7 samples, 0.06%)</title><rect x="1171.0" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="1230.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (7 samples, 0.06%)</title><rect x="1171.0" y="1203.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="1214.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (6 samples, 0.06%)</title><rect x="1171.0" y="1187.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.0" y="1198.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (6 samples, 0.06%)</title><rect x="1171.0" y="1171.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.0" y="1182.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.03%)</title><rect x="1171.0" y="1155.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.0" y="1166.0"></text>
</g>
<g>
<title>BlockMerger::block_do(BlockBegin*) (3 samples, 0.03%)</title><rect x="1171.3" y="1155.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.3" y="1166.0"></text>
</g>
<g>
<title>IR::verify() (4 samples, 0.04%)</title><rect x="1172.2" y="1427.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.2" y="1438.0"></text>
</g>
<g>
<title>PredecessorValidator::PredecessorValidator(IR*) (4 samples, 0.04%)</title><rect x="1172.2" y="1411.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="1422.0"></text>
</g>
<g>
<title>RangeCheckElimination::eliminate(IR*) (12 samples, 0.11%)</title><rect x="1172.6" y="1427.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="1438.0"></text>
</g>
<g>
<title>RangeCheckEliminator::RangeCheckEliminator(IR*) (12 samples, 0.11%)</title><rect x="1172.6" y="1411.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="1422.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (12 samples, 0.11%)</title><rect x="1172.6" y="1395.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="1406.0"></text>
</g>
<g>
<title>RangeCheckEliminator::Verification::block_do(BlockBegin*) (12 samples, 0.11%)</title><rect x="1172.6" y="1379.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="1390.0"></text>
</g>
<g>
<title>RangeCheckEliminator::Verification::can_reach(BlockBegin*, BlockBegin*, BlockBegin*) (12 samples, 0.11%)</title><rect x="1172.6" y="1363.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="1374.0"></text>
</g>
<g>
<title>GenericGrowableArray::check_nesting() (5 samples, 0.05%)</title><rect x="1173.4" y="1347.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="1358.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.03%)</title><rect x="1173.6" y="1331.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1176.6" y="1342.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (15 samples, 0.14%)</title><rect x="1174.0" y="1443.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.0" y="1454.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (10 samples, 0.09%)</title><rect x="1174.0" y="1427.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.0" y="1438.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (10 samples, 0.09%)</title><rect x="1174.0" y="1411.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.0" y="1422.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (5 samples, 0.05%)</title><rect x="1175.0" y="1427.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.0" y="1438.0"></text>
</g>
<g>
<title>ImplicitNullCheckStub::emit_code(LIR_Assembler*) (3 samples, 0.03%)</title><rect x="1175.2" y="1411.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="1422.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (80 samples, 0.74%)</title><rect x="1175.6" y="1443.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="1454.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (11 samples, 0.10%)</title><rect x="1175.6" y="1427.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.6" y="1438.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (11 samples, 0.10%)</title><rect x="1175.6" y="1411.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="1422.0"></text>
</g>
<g>
<title>LIRGenerator::do_root(Instruction*) (11 samples, 0.10%)</title><rect x="1175.6" y="1395.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.6" y="1406.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (3 samples, 0.03%)</title><rect x="1176.4" y="1379.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="1390.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (69 samples, 0.64%)</title><rect x="1176.8" y="1427.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="1438.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (4 samples, 0.04%)</title><rect x="1177.4" y="1411.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="1422.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (12 samples, 0.11%)</title><rect x="1177.9" y="1411.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="1422.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (11 samples, 0.10%)</title><rect x="1177.9" y="1395.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="1406.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (4 samples, 0.04%)</title><rect x="1178.6" y="1379.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="1390.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (3 samples, 0.03%)</title><rect x="1178.8" y="1363.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.8" y="1374.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (12 samples, 0.11%)</title><rect x="1179.2" y="1411.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.2" y="1422.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (3 samples, 0.03%)</title><rect x="1180.5" y="1411.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="1422.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (7 samples, 0.06%)</title><rect x="1180.8" y="1411.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="1422.0"></text>
</g>
<g>
<title>LinearScan::sort_intervals_before_allocation() (3 samples, 0.03%)</title><rect x="1181.9" y="1411.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="1422.0"></text>
</g>
<g>
<title>LinearScan::verify() (19 samples, 0.18%)</title><rect x="1182.2" y="1411.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="1422.0"></text>
</g>
<g>
<title>LinearScan::verify_intervals() (7 samples, 0.06%)</title><rect x="1182.4" y="1395.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.4" y="1406.0"></text>
</g>
<g>
<title>LinearScan::verify_no_oops_in_fixed_intervals() (3 samples, 0.03%)</title><rect x="1183.1" y="1395.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="1406.0"></text>
</g>
<g>
<title>LinearScan::verify_registers() (8 samples, 0.07%)</title><rect x="1183.5" y="1395.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="1406.0"></text>
</g>
<g>
<title>RegisterVerifier::verify(BlockBegin*) (8 samples, 0.07%)</title><rect x="1183.5" y="1379.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.5" y="1390.0"></text>
</g>
<g>
<title>RegisterVerifier::process_block(BlockBegin*) (8 samples, 0.07%)</title><rect x="1183.5" y="1363.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.5" y="1374.0"></text>
</g>
<g>
<title>RegisterVerifier::process_operations(LIR_List*, GrowableArray&lt;Interval*&gt;*) (8 samples, 0.07%)</title><rect x="1183.5" y="1347.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.5" y="1358.0"></text>
</g>
<g>
<title>LinearScan::reg_num(LIR_OprDesc*) (3 samples, 0.03%)</title><rect x="1184.0" y="1331.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="1342.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (7 samples, 0.06%)</title><rect x="1184.7" y="1459.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="1470.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (6 samples, 0.06%)</title><rect x="1184.8" y="1443.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="1454.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, char*, int, int, char const*, FailedSpeculation**) (5 samples, 0.05%)</title><rect x="1184.9" y="1427.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.9" y="1438.0"></text>
</g>
<g>
<title>CompileQueue::get() (3 samples, 0.03%)</title><rect x="1185.6" y="1523.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.6" y="1534.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (6 samples, 0.06%)</title><rect x="1186.0" y="1539.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="1550.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (6 samples, 0.06%)</title><rect x="1186.0" y="1523.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="1534.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (6 samples, 0.06%)</title><rect x="1186.0" y="1507.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="1518.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (6 samples, 0.06%)</title><rect x="1186.0" y="1491.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.0" y="1502.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches(bool) (3 samples, 0.03%)</title><rect x="1186.0" y="1475.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="1486.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (16 samples, 0.15%)</title><rect x="1186.6" y="1539.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="1550.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (15 samples, 0.14%)</title><rect x="1186.7" y="1523.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.7" y="1534.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (15 samples, 0.14%)</title><rect x="1186.7" y="1507.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="1518.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (14 samples, 0.13%)</title><rect x="1186.7" y="1491.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="1502.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (3 samples, 0.03%)</title><rect x="1186.7" y="1475.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="1486.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (9 samples, 0.08%)</title><rect x="1187.3" y="1475.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1190.3" y="1486.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (5 samples, 0.05%)</title><rect x="1187.3" y="1459.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.3" y="1470.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (3 samples, 0.03%)</title><rect x="1187.4" y="1443.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.4" y="1454.0"></text>
</g>
<g>
<title>linear_search(PcDescSearch const&amp;, int, bool) (3 samples, 0.03%)</title><rect x="1187.4" y="1427.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1190.4" y="1438.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (3 samples, 0.03%)</title><rect x="1187.9" y="1459.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.9" y="1470.0"></text>
</g>
<g>
<title>VMThread::run() (12 samples, 0.11%)</title><rect x="1188.4" y="1555.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.4" y="1566.0"></text>
</g>
<g>
<title>VMThread::loop() (12 samples, 0.11%)</title><rect x="1188.4" y="1539.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.4" y="1550.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.64] (10 samples, 0.09%)</title><rect x="1188.6" y="1523.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="1534.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (10 samples, 0.09%)</title><rect x="1188.6" y="1507.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.6" y="1518.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (7 samples, 0.06%)</title><rect x="1188.7" y="1491.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.7" y="1502.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (7 samples, 0.06%)</title><rect x="1188.7" y="1475.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.7" y="1486.0"></text>
</g>
</g>
</svg>
