<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (208 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>[AMQP Connection 127.0.0.1:5672 tid=4743] (34 samples, 16.35%)</title><rect x="10.0" y="1251.0" width="192.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="1262.0">[AMQP Connection 127.0.0...</text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.48%)</title><rect x="10.0" y="1235.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.48%)</title><rect x="10.0" y="1219.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.48%)</title><rect x="10.0" y="1203.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.48%)</title><rect x="10.0" y="1187.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassInModuleOrNull (1 samples, 0.48%)</title><rect x="10.0" y="1171.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.48%)</title><rect x="10.0" y="1155.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.48%)</title><rect x="10.0" y="1139.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.48%)</title><rect x="10.0" y="1123.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.48%)</title><rect x="10.0" y="1107.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.48%)</title><rect x="10.0" y="1091.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.48%)</title><rect x="10.0" y="1075.0" width="5.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.48%)</title><rect x="10.0" y="1059.0" width="5.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) [clone .constprop.213] (1 samples, 0.48%)</title><rect x="10.0" y="1043.0" width="5.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.48%)</title><rect x="10.0" y="1027.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.48%)</title><rect x="10.0" y="1011.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.48%)</title><rect x="10.0" y="995.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>CodeCache::flush_dependents_on(InstanceKlass*) (1 samples, 0.48%)</title><rect x="10.0" y="979.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>CodeCache::mark_for_deoptimization(KlassDepChange&amp;) (1 samples, 0.48%)</title><rect x="10.0" y="963.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>nmethod::check_all_dependencies(DepChange&amp;) (1 samples, 0.48%)</title><rect x="10.0" y="947.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>Dependencies::DepStream::get_identifier(int) (1 samples, 0.48%)</title><rect x="10.0" y="931.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>Dependencies::DepStream::argument(int) (1 samples, 0.48%)</title><rect x="10.0" y="915.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.run (33 samples, 15.87%)</title><rect x="15.7" y="1235.0" width="187.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.7" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection$MainLoop.run (33 samples, 15.87%)</title><rect x="15.7" y="1219.0" width="187.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.7" y="1230.0">com/rabbitmq/client/impl..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection.access$100 (1 samples, 0.48%)</title><rect x="15.7" y="1203.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.7" y="1214.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection.access$300 (13 samples, 6.25%)</title><rect x="21.3" y="1203.0" width="73.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.3" y="1214.0">com/rabb..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQConnection.readFrame (13 samples, 6.25%)</title><rect x="21.3" y="1187.0" width="73.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.3" y="1198.0">com/rabb..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQChannel.handleFrame (13 samples, 6.25%)</title><rect x="21.3" y="1171.0" width="73.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.3" y="1182.0">com/rabb..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQChannel.handleCompleteInboundCommand (9 samples, 4.33%)</title><rect x="21.3" y="1155.0" width="51.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.3" y="1166.0">com/r..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ChannelN.processAsync (9 samples, 4.33%)</title><rect x="21.3" y="1139.0" width="51.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.3" y="1150.0">com/r..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/recovery/RecoveryAwareChannelN.processDelivery (9 samples, 4.33%)</title><rect x="21.3" y="1123.0" width="51.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.3" y="1134.0">com/r..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ChannelN.processDelivery (9 samples, 4.33%)</title><rect x="21.3" y="1107.0" width="51.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.3" y="1118.0">com/r..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.handleDelivery (8 samples, 3.85%)</title><rect x="21.3" y="1091.0" width="45.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.3" y="1102.0">com/..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.executeUnlessShuttingDown (8 samples, 3.85%)</title><rect x="21.3" y="1075.0" width="45.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.3" y="1086.0">com/..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher.execute (8 samples, 3.85%)</title><rect x="21.3" y="1059.0" width="45.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.3" y="1070.0">com/..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService.addWork (8 samples, 3.85%)</title><rect x="21.3" y="1043.0" width="45.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="1054.0">com/..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool.addWorkItem (3 samples, 1.44%)</title><rect x="21.3" y="1027.0" width="17.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.3" y="1038.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool$$Lambda$174/280680399.accept (2 samples, 0.96%)</title><rect x="21.3" y="1011.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.3" y="1022.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool.lambda$new$1 (2 samples, 0.96%)</title><rect x="21.3" y="995.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.3" y="1006.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/VariableLinkedBlockingQueue.put (2 samples, 0.96%)</title><rect x="21.3" y="979.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.96%)</title><rect x="21.3" y="963.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.96%)</title><rect x="21.3" y="947.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.3" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.96%)</title><rect x="21.3" y="931.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.96%)</title><rect x="21.3" y="915.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.3" y="926.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.96%)</title><rect x="21.3" y="899.0" width="11.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="24.3" y="910.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.96%)</title><rect x="21.3" y="883.0" width="11.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="24.3" y="894.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::verify_hazard_ptr_scanned() (2 samples, 0.96%)</title><rect x="21.3" y="867.0" width="11.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="24.3" y="878.0"></text>
</g>
<g>
<title>Threads::non_java_threads_do(ThreadClosure*) (2 samples, 0.96%)</title><rect x="21.3" y="851.0" width="11.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.3" y="862.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/WorkPool.dormantToReady (1 samples, 0.48%)</title><rect x="32.7" y="1011.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.7" y="1022.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/SetQueue.addIfNotPresent (1 samples, 0.48%)</title><rect x="32.7" y="995.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.48%)</title><rect x="32.7" y="979.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.48%)</title><rect x="32.7" y="963.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.48%)</title><rect x="32.7" y="947.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.7" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.48%)</title><rect x="32.7" y="931.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.7" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$Entry.&lt;init&gt; (1 samples, 0.48%)</title><rect x="32.7" y="915.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="35.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (1 samples, 0.48%)</title><rect x="32.7" y="899.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 2.40%)</title><rect x="38.4" y="1027.0" width="28.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="41.4" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 2.40%)</title><rect x="38.4" y="1011.0" width="28.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.4" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (3 samples, 1.44%)</title><rect x="49.7" y="995.0" width="17.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.44%)</title><rect x="49.7" y="979.0" width="17.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.44%)</title><rect x="49.7" y="963.0" width="17.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.44%)</title><rect x="49.7" y="947.0" width="17.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.44%)</title><rect x="49.7" y="931.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="52.7" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 1.44%)</title><rect x="49.7" y="915.0" width="17.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.7" y="926.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (3 samples, 1.44%)</title><rect x="49.7" y="899.0" width="17.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="52.7" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 1.44%)</title><rect x="49.7" y="883.0" width="17.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="52.7" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 1.44%)</title><rect x="49.7" y="867.0" width="17.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="52.7" y="878.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 1.44%)</title><rect x="49.7" y="851.0" width="17.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="52.7" y="862.0"></text>
</g>
<g>
<title>do_futex (3 samples, 1.44%)</title><rect x="49.7" y="835.0" width="17.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="52.7" y="846.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 1.44%)</title><rect x="49.7" y="819.0" width="17.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="52.7" y="830.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 1.44%)</title><rect x="49.7" y="803.0" width="17.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="52.7" y="814.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 1.44%)</title><rect x="49.7" y="787.0" width="17.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="52.7" y="798.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 1.44%)</title><rect x="49.7" y="771.0" width="17.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="52.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.get (1 samples, 0.48%)</title><rect x="66.7" y="1091.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.48%)</title><rect x="66.7" y="1075.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.48%)</title><rect x="66.7" y="1059.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.48%)</title><rect x="66.7" y="1043.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.7" y="1054.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQCommand.handleFrame (4 samples, 1.92%)</title><rect x="72.4" y="1155.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.4" y="1166.0">c..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/CommandAssembler.handleFrame (4 samples, 1.92%)</title><rect x="72.4" y="1139.0" width="22.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.4" y="1150.0">c..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/CommandAssembler.consumeHeaderFrame (2 samples, 0.96%)</title><rect x="72.4" y="1123.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.4" y="1134.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQImpl.readContentHeaderFrom (1 samples, 0.48%)</title><rect x="72.4" y="1107.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.4" y="1118.0"></text>
</g>
<g>
<title>com/rabbitmq/client/AMQP$BasicProperties.&lt;init&gt; (1 samples, 0.48%)</title><rect x="72.4" y="1091.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.4" y="1102.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/Frame.getInputStream (1 samples, 0.48%)</title><rect x="78.1" y="1107.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="81.1" y="1118.0"></text>
</g>
<g>
<title>java/io/DataInputStream.&lt;init&gt; (1 samples, 0.48%)</title><rect x="78.1" y="1091.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.1" y="1102.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.&lt;init&gt; (1 samples, 0.48%)</title><rect x="78.1" y="1075.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.1" y="1086.0"></text>
</g>
<g>
<title>java/io/InputStream.&lt;init&gt; (1 samples, 0.48%)</title><rect x="78.1" y="1059.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.48%)</title><rect x="78.1" y="1043.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.1" y="1054.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQImpl.readMethodFrom (1 samples, 0.48%)</title><rect x="78.1" y="1027.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.1" y="1038.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/CommandAssembler.consumeMethodFrame (2 samples, 0.96%)</title><rect x="83.8" y="1123.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="86.8" y="1134.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQImpl.readMethodFrom (2 samples, 0.96%)</title><rect x="83.8" y="1107.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.8" y="1118.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQImpl$Basic$Deliver.&lt;init&gt; (1 samples, 0.48%)</title><rect x="89.4" y="1091.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.4" y="1102.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/AMQImpl$Basic$Deliver.&lt;init&gt; (1 samples, 0.48%)</title><rect x="89.4" y="1075.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.4" y="1086.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/SocketFrameHandler.readFrame (19 samples, 9.13%)</title><rect x="95.1" y="1203.0" width="107.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.1" y="1214.0">com/rabbitmq/..</text>
</g>
<g>
<title>com/rabbitmq/client/impl/Frame.readFrom (19 samples, 9.13%)</title><rect x="95.1" y="1187.0" width="107.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.1" y="1198.0">com/rabbitmq/..</text>
</g>
<g>
<title>java/io/DataInputStream.readUnsignedByte (19 samples, 9.13%)</title><rect x="95.1" y="1171.0" width="107.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.1" y="1182.0">java/io/DataI..</text>
</g>
<g>
<title>java/io/BufferedInputStream.read (19 samples, 9.13%)</title><rect x="95.1" y="1155.0" width="107.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.1" y="1166.0">java/io/Buffe..</text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (19 samples, 9.13%)</title><rect x="95.1" y="1139.0" width="107.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.1" y="1150.0">java/io/Buffe..</text>
</g>
<g>
<title>java/net/Socket$SocketInputStream.read (19 samples, 9.13%)</title><rect x="95.1" y="1123.0" width="107.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.1" y="1134.0">java/net/Sock..</text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl$1.read (19 samples, 9.13%)</title><rect x="95.1" y="1107.0" width="107.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.1" y="1118.0">sun/nio/ch/Ni..</text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl.read (19 samples, 9.13%)</title><rect x="95.1" y="1091.0" width="107.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.1" y="1102.0">sun/nio/ch/Ni..</text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl.implRead (19 samples, 9.13%)</title><rect x="95.1" y="1075.0" width="107.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.1" y="1086.0">sun/nio/ch/Ni..</text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl.timedRead (19 samples, 9.13%)</title><rect x="95.1" y="1059.0" width="107.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.1" y="1070.0">sun/nio/ch/Ni..</text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl.park (6 samples, 2.88%)</title><rect x="100.8" y="1043.0" width="34.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.8" y="1054.0">su..</text>
</g>
<g>
<title>sun/nio/ch/Net.poll (6 samples, 2.88%)</title><rect x="100.8" y="1027.0" width="34.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.8" y="1038.0">su..</text>
</g>
<g>
<title>__poll (6 samples, 2.88%)</title><rect x="100.8" y="1011.0" width="34.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="103.8" y="1022.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 2.88%)</title><rect x="100.8" y="995.0" width="34.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="103.8" y="1006.0">en..</text>
</g>
<g>
<title>do_syscall_64 (6 samples, 2.88%)</title><rect x="100.8" y="979.0" width="34.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="103.8" y="990.0">do..</text>
</g>
<g>
<title>sys_poll (5 samples, 2.40%)</title><rect x="106.4" y="963.0" width="28.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="109.4" y="974.0">sy..</text>
</g>
<g>
<title>do_sys_poll (5 samples, 2.40%)</title><rect x="106.4" y="947.0" width="28.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="109.4" y="958.0">do..</text>
</g>
<g>
<title>__fdget (1 samples, 0.48%)</title><rect x="112.1" y="931.0" width="5.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="115.1" y="942.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.48%)</title><rect x="112.1" y="915.0" width="5.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="115.1" y="926.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.48%)</title><rect x="112.1" y="899.0" width="5.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="115.1" y="910.0"></text>
</g>
<g>
<title>poll_freewait (1 samples, 0.48%)</title><rect x="117.8" y="931.0" width="5.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="120.8" y="942.0"></text>
</g>
<g>
<title>remove_wait_queue (1 samples, 0.48%)</title><rect x="117.8" y="915.0" width="5.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="120.8" y="926.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.48%)</title><rect x="117.8" y="899.0" width="5.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="120.8" y="910.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.96%)</title><rect x="123.5" y="931.0" width="11.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="126.5" y="942.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.48%)</title><rect x="129.1" y="915.0" width="5.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="132.1" y="926.0"></text>
</g>
<g>
<title>__pollwait (1 samples, 0.48%)</title><rect x="129.1" y="899.0" width="5.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="132.1" y="910.0"></text>
</g>
<g>
<title>add_wait_queue (1 samples, 0.48%)</title><rect x="129.1" y="883.0" width="5.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="132.1" y="894.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.48%)</title><rect x="129.1" y="867.0" width="5.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="132.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/NioSocketImpl.tryRead (12 samples, 5.77%)</title><rect x="134.8" y="1043.0" width="68.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="137.8" y="1054.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (12 samples, 5.77%)</title><rect x="134.8" y="1027.0" width="68.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="137.8" y="1038.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read0 (12 samples, 5.77%)</title><rect x="134.8" y="1011.0" width="68.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="137.8" y="1022.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_SocketDispatcher_read0 (2 samples, 0.96%)</title><rect x="134.8" y="995.0" width="11.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="137.8" y="1006.0"></text>
</g>
<g>
<title>jni_GetIntField (2 samples, 0.96%)</title><rect x="134.8" y="979.0" width="11.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="137.8" y="990.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.48%)</title><rect x="134.8" y="963.0" width="5.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="137.8" y="974.0"></text>
</g>
<g>
<title>jfieldIDWorkaround::verify_instance_jfieldID(Klass*, _jfieldID*) (1 samples, 0.48%)</title><rect x="140.5" y="963.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="143.5" y="974.0"></text>
</g>
<g>
<title>jfieldIDWorkaround::klass_hash_ok(Klass*, _jfieldID*) (1 samples, 0.48%)</title><rect x="140.5" y="947.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="143.5" y="958.0"></text>
</g>
<g>
<title>NoGCVerifier::NoGCVerifier(bool) (1 samples, 0.48%)</title><rect x="140.5" y="931.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="143.5" y="942.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 3.85%)</title><rect x="146.2" y="995.0" width="45.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="149.2" y="1006.0">[unk..</text>
</g>
<g>
<title>__libc_read (8 samples, 3.85%)</title><rect x="146.2" y="979.0" width="45.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="149.2" y="990.0">__li..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 3.37%)</title><rect x="151.8" y="963.0" width="39.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="154.8" y="974.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (7 samples, 3.37%)</title><rect x="151.8" y="947.0" width="39.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="154.8" y="958.0">do_..</text>
</g>
<g>
<title>sys_read (7 samples, 3.37%)</title><rect x="151.8" y="931.0" width="39.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="154.8" y="942.0">sys..</text>
</g>
<g>
<title>vfs_read (7 samples, 3.37%)</title><rect x="151.8" y="915.0" width="39.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="154.8" y="926.0">vfs..</text>
</g>
<g>
<title>__vfs_read (7 samples, 3.37%)</title><rect x="151.8" y="899.0" width="39.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="154.8" y="910.0">__v..</text>
</g>
<g>
<title>new_sync_read (7 samples, 3.37%)</title><rect x="151.8" y="883.0" width="39.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="154.8" y="894.0">new..</text>
</g>
<g>
<title>sock_read_iter (7 samples, 3.37%)</title><rect x="151.8" y="867.0" width="39.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="154.8" y="878.0">soc..</text>
</g>
<g>
<title>sock_recvmsg (7 samples, 3.37%)</title><rect x="151.8" y="851.0" width="39.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="154.8" y="862.0">soc..</text>
</g>
<g>
<title>inet_recvmsg (6 samples, 2.88%)</title><rect x="151.8" y="835.0" width="34.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="154.8" y="846.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (6 samples, 2.88%)</title><rect x="151.8" y="819.0" width="34.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="154.8" y="830.0">tc..</text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.48%)</title><rect x="151.8" y="803.0" width="5.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="154.8" y="814.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.48%)</title><rect x="151.8" y="787.0" width="5.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="154.8" y="798.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.48%)</title><rect x="151.8" y="771.0" width="5.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="154.8" y="782.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.48%)</title><rect x="151.8" y="755.0" width="5.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="154.8" y="766.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.48%)</title><rect x="151.8" y="739.0" width="5.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="154.8" y="750.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.48%)</title><rect x="151.8" y="723.0" width="5.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="154.8" y="734.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.48%)</title><rect x="151.8" y="707.0" width="5.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="154.8" y="718.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.48%)</title><rect x="151.8" y="691.0" width="5.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="154.8" y="702.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.48%)</title><rect x="151.8" y="675.0" width="5.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="154.8" y="686.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.48%)</title><rect x="151.8" y="659.0" width="5.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="154.8" y="670.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.48%)</title><rect x="151.8" y="643.0" width="5.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="154.8" y="654.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (5 samples, 2.40%)</title><rect x="157.5" y="803.0" width="28.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="160.5" y="814.0">tc..</text>
</g>
<g>
<title>tcp_send_ack (5 samples, 2.40%)</title><rect x="157.5" y="787.0" width="28.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="160.5" y="798.0">tc..</text>
</g>
<g>
<title>__tcp_send_ack.part.39 (5 samples, 2.40%)</title><rect x="157.5" y="771.0" width="28.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="160.5" y="782.0">__..</text>
</g>
<g>
<title>__tcp_transmit_skb (5 samples, 2.40%)</title><rect x="157.5" y="755.0" width="28.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="160.5" y="766.0">__..</text>
</g>
<g>
<title>ip_queue_xmit (5 samples, 2.40%)</title><rect x="157.5" y="739.0" width="28.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="160.5" y="750.0">ip..</text>
</g>
<g>
<title>ip_local_out (5 samples, 2.40%)</title><rect x="157.5" y="723.0" width="28.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="160.5" y="734.0">ip..</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.48%)</title><rect x="157.5" y="707.0" width="5.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="160.5" y="718.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag	[nf_defrag_ipv4] (1 samples, 0.48%)</title><rect x="157.5" y="691.0" width="5.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="160.5" y="702.0"></text>
</g>
<g>
<title>ip_output (4 samples, 1.92%)</title><rect x="163.2" y="707.0" width="22.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="166.2" y="718.0">i..</text>
</g>
<g>
<title>ip_finish_output (4 samples, 1.92%)</title><rect x="163.2" y="691.0" width="22.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="166.2" y="702.0">i..</text>
</g>
<g>
<title>ip_finish_output2 (4 samples, 1.92%)</title><rect x="163.2" y="675.0" width="22.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="166.2" y="686.0">i..</text>
</g>
<g>
<title>__local_bh_enable_ip (4 samples, 1.92%)</title><rect x="163.2" y="659.0" width="22.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="166.2" y="670.0">_..</text>
</g>
<g>
<title>do_softirq.part.17 (4 samples, 1.92%)</title><rect x="163.2" y="643.0" width="22.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="166.2" y="654.0">d..</text>
</g>
<g>
<title>do_softirq_own_stack (4 samples, 1.92%)</title><rect x="163.2" y="627.0" width="22.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="166.2" y="638.0">d..</text>
</g>
<g>
<title>__softirqentry_text_start (4 samples, 1.92%)</title><rect x="163.2" y="611.0" width="22.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="166.2" y="622.0">_..</text>
</g>
<g>
<title>net_rx_action (4 samples, 1.92%)</title><rect x="163.2" y="595.0" width="22.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="166.2" y="606.0">n..</text>
</g>
<g>
<title>process_backlog (4 samples, 1.92%)</title><rect x="163.2" y="579.0" width="22.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="166.2" y="590.0">p..</text>
</g>
<g>
<title>__netif_receive_skb (4 samples, 1.92%)</title><rect x="163.2" y="563.0" width="22.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="166.2" y="574.0">_..</text>
</g>
<g>
<title>__netif_receive_skb_core (4 samples, 1.92%)</title><rect x="163.2" y="547.0" width="22.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="166.2" y="558.0">_..</text>
</g>
<g>
<title>ip_rcv (3 samples, 1.44%)</title><rect x="163.2" y="531.0" width="17.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="166.2" y="542.0"></text>
</g>
<g>
<title>ip_rcv_finish (3 samples, 1.44%)</title><rect x="163.2" y="515.0" width="17.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="166.2" y="526.0"></text>
</g>
<g>
<title>ip_local_deliver (3 samples, 1.44%)</title><rect x="163.2" y="499.0" width="17.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="166.2" y="510.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 1.44%)</title><rect x="163.2" y="483.0" width="17.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="166.2" y="494.0"></text>
</g>
<g>
<title>tcp_v4_rcv (3 samples, 1.44%)</title><rect x="163.2" y="467.0" width="17.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="166.2" y="478.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.48%)</title><rect x="163.2" y="451.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="166.2" y="462.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (2 samples, 0.96%)</title><rect x="168.8" y="451.0" width="11.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="171.8" y="462.0"></text>
</g>
<g>
<title>tcp_rcv_established (2 samples, 0.96%)</title><rect x="168.8" y="435.0" width="11.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="171.8" y="446.0"></text>
</g>
<g>
<title>tcp_ack (2 samples, 0.96%)</title><rect x="168.8" y="419.0" width="11.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="171.8" y="430.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.48%)</title><rect x="174.5" y="403.0" width="5.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="177.5" y="414.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.48%)</title><rect x="174.5" y="387.0" width="5.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="177.5" y="398.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.48%)</title><rect x="174.5" y="371.0" width="5.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="177.5" y="382.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.48%)</title><rect x="174.5" y="355.0" width="5.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="177.5" y="366.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.48%)</title><rect x="174.5" y="339.0" width="5.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="177.5" y="350.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.48%)</title><rect x="174.5" y="323.0" width="5.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="177.5" y="334.0"></text>
</g>
<g>
<title>cmpxchg_double_slab.isra.33 (1 samples, 0.48%)</title><rect x="174.5" y="307.0" width="5.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="177.5" y="318.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.48%)</title><rect x="180.2" y="531.0" width="5.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="183.2" y="542.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.48%)</title><rect x="185.9" y="835.0" width="5.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="188.9" y="846.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.48%)</title><rect x="185.9" y="819.0" width="5.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="188.9" y="830.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.48%)</title><rect x="185.9" y="803.0" width="5.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="188.9" y="814.0"></text>
</g>
<g>
<title>_init (1 samples, 0.48%)</title><rect x="191.5" y="995.0" width="5.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="194.5" y="1006.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.48%)</title><rect x="197.2" y="995.0" width="5.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="200.2" y="1006.0"></text>
</g>
<g>
<title>[epollEventLoopGroup-3-1 tid=4788] (6 samples, 2.88%)</title><rect x="202.9" y="1251.0" width="34.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="205.9" y="1262.0">[e..</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.48%)</title><rect x="202.9" y="1235.0" width="5.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="205.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5 samples, 2.40%)</title><rect x="208.6" y="1235.0" width="28.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.6" y="1246.0">ja..</text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (5 samples, 2.40%)</title><rect x="208.6" y="1219.0" width="28.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="211.6" y="1230.0">io..</text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (5 samples, 2.40%)</title><rect x="208.6" y="1203.0" width="28.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.6" y="1214.0">io..</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$5.run (5 samples, 2.40%)</title><rect x="208.6" y="1187.0" width="28.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.6" y="1198.0">io..</text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.run (5 samples, 2.40%)</title><rect x="208.6" y="1171.0" width="28.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.6" y="1182.0">io..</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (5 samples, 2.40%)</title><rect x="208.6" y="1155.0" width="28.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.6" y="1166.0">io..</text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.safeExecute (5 samples, 2.40%)</title><rect x="208.6" y="1139.0" width="28.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.6" y="1150.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.run (5 samples, 2.40%)</title><rect x="208.6" y="1123.0" width="28.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.6" y="1134.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.write (5 samples, 2.40%)</title><rect x="208.6" y="1107.0" width="28.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.6" y="1118.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.access$1700 (5 samples, 2.40%)</title><rect x="208.6" y="1091.0" width="28.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.6" y="1102.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (5 samples, 2.40%)</title><rect x="208.6" y="1075.0" width="28.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.6" y="1086.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (5 samples, 2.40%)</title><rect x="208.6" y="1059.0" width="28.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.6" y="1070.0">io..</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/SlowConsumerDisconnectHandler.write (5 samples, 2.40%)</title><rect x="208.6" y="1043.0" width="28.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.6" y="1054.0">pb..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (5 samples, 2.40%)</title><rect x="208.6" y="1027.0" width="28.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.6" y="1038.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (5 samples, 2.40%)</title><rect x="208.6" y="1011.0" width="28.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.6" y="1022.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (5 samples, 2.40%)</title><rect x="208.6" y="995.0" width="28.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.6" y="1006.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (5 samples, 2.40%)</title><rect x="208.6" y="979.0" width="28.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.6" y="990.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (5 samples, 2.40%)</title><rect x="208.6" y="963.0" width="28.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.6" y="974.0">io..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.flush (5 samples, 2.40%)</title><rect x="208.6" y="947.0" width="28.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.6" y="958.0">io..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.doFlush (5 samples, 2.40%)</title><rect x="208.6" y="931.0" width="28.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.6" y="942.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (4 samples, 1.92%)</title><rect x="208.6" y="915.0" width="22.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.6" y="926.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (4 samples, 1.92%)</title><rect x="208.6" y="899.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.6" y="910.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (4 samples, 1.92%)</title><rect x="208.6" y="883.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.6" y="894.0">i..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (4 samples, 1.92%)</title><rect x="208.6" y="867.0" width="22.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.6" y="878.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (4 samples, 1.92%)</title><rect x="208.6" y="851.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.6" y="862.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.flush0 (4 samples, 1.92%)</title><rect x="208.6" y="835.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.6" y="846.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (4 samples, 1.92%)</title><rect x="208.6" y="819.0" width="22.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.6" y="830.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.doWrite (4 samples, 1.92%)</title><rect x="208.6" y="803.0" width="22.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="211.6" y="814.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.doWriteSingle (4 samples, 1.92%)</title><rect x="208.6" y="787.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.6" y="798.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.writeBytes (4 samples, 1.92%)</title><rect x="208.6" y="771.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.6" y="782.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollChannel.doWriteBytes (4 samples, 1.92%)</title><rect x="208.6" y="755.0" width="22.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.6" y="766.0">i..</text>
</g>
<g>
<title>io/netty/channel/unix/FileDescriptor.writeAddress (4 samples, 1.92%)</title><rect x="208.6" y="739.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.6" y="750.0">i..</text>
</g>
<g>
<title>io/netty/channel/unix/FileDescriptor.writeAddress (4 samples, 1.92%)</title><rect x="208.6" y="723.0" width="22.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.6" y="734.0">i..</text>
</g>
<g>
<title>[unknown] (4 samples, 1.92%)</title><rect x="208.6" y="707.0" width="22.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="211.6" y="718.0">[..</text>
</g>
<g>
<title>__write (4 samples, 1.92%)</title><rect x="208.6" y="691.0" width="22.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="211.6" y="702.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.92%)</title><rect x="208.6" y="675.0" width="22.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="211.6" y="686.0">e..</text>
</g>
<g>
<title>do_syscall_64 (4 samples, 1.92%)</title><rect x="208.6" y="659.0" width="22.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="211.6" y="670.0">d..</text>
</g>
<g>
<title>sys_write (4 samples, 1.92%)</title><rect x="208.6" y="643.0" width="22.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="211.6" y="654.0">s..</text>
</g>
<g>
<title>vfs_write (4 samples, 1.92%)</title><rect x="208.6" y="627.0" width="22.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="211.6" y="638.0">v..</text>
</g>
<g>
<title>__vfs_write (4 samples, 1.92%)</title><rect x="208.6" y="611.0" width="22.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="211.6" y="622.0">_..</text>
</g>
<g>
<title>new_sync_write (4 samples, 1.92%)</title><rect x="208.6" y="595.0" width="22.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="211.6" y="606.0">n..</text>
</g>
<g>
<title>sock_write_iter (4 samples, 1.92%)</title><rect x="208.6" y="579.0" width="22.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="211.6" y="590.0">s..</text>
</g>
<g>
<title>sock_sendmsg (4 samples, 1.92%)</title><rect x="208.6" y="563.0" width="22.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="211.6" y="574.0">s..</text>
</g>
<g>
<title>inet_sendmsg (4 samples, 1.92%)</title><rect x="208.6" y="547.0" width="22.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="211.6" y="558.0">i..</text>
</g>
<g>
<title>tcp_sendmsg (4 samples, 1.92%)</title><rect x="208.6" y="531.0" width="22.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="211.6" y="542.0">t..</text>
</g>
<g>
<title>release_sock (1 samples, 0.48%)</title><rect x="208.6" y="515.0" width="5.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="211.6" y="526.0"></text>
</g>
<g>
<title>__release_sock (1 samples, 0.48%)</title><rect x="208.6" y="499.0" width="5.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="211.6" y="510.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.48%)</title><rect x="208.6" y="483.0" width="5.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="211.6" y="494.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.48%)</title><rect x="208.6" y="467.0" width="5.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="211.6" y="478.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.48%)</title><rect x="208.6" y="451.0" width="5.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="211.6" y="462.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.48%)</title><rect x="208.6" y="435.0" width="5.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="211.6" y="446.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (3 samples, 1.44%)</title><rect x="214.2" y="515.0" width="17.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="217.2" y="526.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 1.44%)</title><rect x="214.2" y="499.0" width="17.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="217.2" y="510.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (3 samples, 1.44%)</title><rect x="214.2" y="483.0" width="17.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="217.2" y="494.0"></text>
</g>
<g>
<title>tcp_write_xmit (3 samples, 1.44%)</title><rect x="214.2" y="467.0" width="17.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="217.2" y="478.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (3 samples, 1.44%)</title><rect x="214.2" y="451.0" width="17.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="217.2" y="462.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 1.44%)</title><rect x="214.2" y="435.0" width="17.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="217.2" y="446.0"></text>
</g>
<g>
<title>ip_local_out (3 samples, 1.44%)</title><rect x="214.2" y="419.0" width="17.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="217.2" y="430.0"></text>
</g>
<g>
<title>ip_output (3 samples, 1.44%)</title><rect x="214.2" y="403.0" width="17.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="217.2" y="414.0"></text>
</g>
<g>
<title>ip_finish_output (3 samples, 1.44%)</title><rect x="214.2" y="387.0" width="17.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="217.2" y="398.0"></text>
</g>
<g>
<title>ip_finish_output2 (3 samples, 1.44%)</title><rect x="214.2" y="371.0" width="17.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="217.2" y="382.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 1.44%)</title><rect x="214.2" y="355.0" width="17.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="217.2" y="366.0"></text>
</g>
<g>
<title>do_softirq.part.17 (3 samples, 1.44%)</title><rect x="214.2" y="339.0" width="17.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="217.2" y="350.0"></text>
</g>
<g>
<title>do_softirq_own_stack (3 samples, 1.44%)</title><rect x="214.2" y="323.0" width="17.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="217.2" y="334.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 1.44%)</title><rect x="214.2" y="307.0" width="17.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="217.2" y="318.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.48%)</title><rect x="219.9" y="291.0" width="5.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="222.9" y="302.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.48%)</title><rect x="225.6" y="291.0" width="5.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="228.6" y="302.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.48%)</title><rect x="231.2" y="915.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.2" y="926.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.48%)</title><rect x="231.2" y="899.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.2" y="910.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (1 samples, 0.48%)</title><rect x="231.2" y="883.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.2" y="894.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.48%)</title><rect x="231.2" y="867.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.2" y="878.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (1 samples, 0.48%)</title><rect x="231.2" y="851.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.2" y="862.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.encode (1 samples, 0.48%)</title><rect x="231.2" y="835.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.2" y="846.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.encode (1 samples, 0.48%)</title><rect x="231.2" y="819.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.2" y="830.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeByte (1 samples, 0.48%)</title><rect x="231.2" y="803.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.2" y="814.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureWritable0 (1 samples, 0.48%)</title><rect x="231.2" y="787.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.2" y="798.0"></text>
</g>
<g>
<title>[epollEventLoopGroup-3-2 tid=4789] (14 samples, 6.73%)</title><rect x="236.9" y="1251.0" width="79.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="239.9" y="1262.0">[epollEve..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.96%)</title><rect x="236.9" y="1235.0" width="11.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="239.9" y="1246.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (2 samples, 0.96%)</title><rect x="236.9" y="1219.0" width="11.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="239.9" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.96%)</title><rect x="236.9" y="1203.0" width="11.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="239.9" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.96%)</title><rect x="236.9" y="1187.0" width="11.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="239.9" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.96%)</title><rect x="236.9" y="1171.0" width="11.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="239.9" y="1182.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.48%)</title><rect x="242.6" y="1155.0" width="5.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="245.6" y="1166.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.48%)</title><rect x="242.6" y="1139.0" width="5.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="245.6" y="1150.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.48%)</title><rect x="242.6" y="1123.0" width="5.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="245.6" y="1134.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.48%)</title><rect x="248.3" y="1235.0" width="5.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="251.3" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.48%)</title><rect x="248.3" y="1219.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="251.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.run (11 samples, 5.29%)</title><rect x="253.9" y="1235.0" width="62.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.9" y="1246.0">java/l..</text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (11 samples, 5.29%)</title><rect x="253.9" y="1219.0" width="62.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.9" y="1230.0">io/net..</text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (11 samples, 5.29%)</title><rect x="253.9" y="1203.0" width="62.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.9" y="1214.0">io/net..</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$5.run (11 samples, 5.29%)</title><rect x="253.9" y="1187.0" width="62.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.9" y="1198.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.run (11 samples, 5.29%)</title><rect x="253.9" y="1171.0" width="62.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.9" y="1182.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.processReady (11 samples, 5.29%)</title><rect x="253.9" y="1155.0" width="62.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.9" y="1166.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady (11 samples, 5.29%)</title><rect x="253.9" y="1139.0" width="62.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.9" y="1150.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="1123.0" width="62.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.9" y="1134.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="1107.0" width="62.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.9" y="1118.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="1091.0" width="62.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.9" y="1102.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (11 samples, 5.29%)</title><rect x="253.9" y="1075.0" width="62.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.9" y="1086.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="1059.0" width="62.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.9" y="1070.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="1043.0" width="62.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.9" y="1054.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="1027.0" width="62.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.9" y="1038.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.channelRead (11 samples, 5.29%)</title><rect x="253.9" y="1011.0" width="62.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.9" y="1022.0">io/net..</text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelRead (11 samples, 5.29%)</title><rect x="253.9" y="995.0" width="62.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.9" y="1006.0">io/net..</text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.fireChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="979.0" width="62.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.9" y="990.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="963.0" width="62.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.9" y="974.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="947.0" width="62.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.9" y="958.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="931.0" width="62.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.9" y="942.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="915.0" width="62.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.9" y="926.0">io/net..</text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageDecoder.channelRead (11 samples, 5.29%)</title><rect x="253.9" y="899.0" width="62.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.9" y="910.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="883.0" width="62.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.9" y="894.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="867.0" width="62.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.9" y="878.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (11 samples, 5.29%)</title><rect x="253.9" y="851.0" width="62.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.9" y="862.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/SimpleChannelInboundHandler.channelRead (11 samples, 5.29%)</title><rect x="253.9" y="835.0" width="62.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.9" y="846.0">io/net..</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/HttpRequestHandler.channelRead0 (11 samples, 5.29%)</title><rect x="253.9" y="819.0" width="62.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.9" y="830.0">pbouda..</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/HttpRequestHandler.channelRead0 (11 samples, 5.29%)</title><rect x="253.9" y="803.0" width="62.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.9" y="814.0">pbouda..</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/route/PrometheusRoute.process (11 samples, 5.29%)</title><rect x="253.9" y="787.0" width="62.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.9" y="798.0">pbouda..</text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.scrape (11 samples, 5.29%)</title><rect x="253.9" y="771.0" width="62.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.9" y="782.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.scrape (11 samples, 5.29%)</title><rect x="253.9" y="755.0" width="62.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.9" y="766.0">io/mic..</text>
</g>
<g>
<title>io/prometheus/client/exporter/common/TextFormat.write004 (11 samples, 5.29%)</title><rect x="253.9" y="739.0" width="62.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.9" y="750.0">io/pro..</text>
</g>
<g>
<title>io/prometheus/client/CollectorRegistry$MetricFamilySamplesEnumeration.nextElement (11 samples, 5.29%)</title><rect x="253.9" y="723.0" width="62.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.9" y="734.0">io/pro..</text>
</g>
<g>
<title>io/prometheus/client/CollectorRegistry$MetricFamilySamplesEnumeration.nextElement (11 samples, 5.29%)</title><rect x="253.9" y="707.0" width="62.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.9" y="718.0">io/pro..</text>
</g>
<g>
<title>io/prometheus/client/CollectorRegistry$MetricFamilySamplesEnumeration.findNextElement (11 samples, 5.29%)</title><rect x="253.9" y="691.0" width="62.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.9" y="702.0">io/pro..</text>
</g>
<g>
<title>io/micrometer/prometheus/MicrometerCollector.collect (11 samples, 5.29%)</title><rect x="253.9" y="675.0" width="62.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.9" y="686.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry$$Lambda$126/1309238149.samples (11 samples, 5.29%)</title><rect x="253.9" y="659.0" width="62.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.9" y="670.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/prometheus/PrometheusMeterRegistry.lambda$newGauge$3 (11 samples, 5.29%)</title><rect x="253.9" y="643.0" width="62.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.9" y="654.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/internal/DefaultGauge.value (11 samples, 5.29%)</title><rect x="253.9" y="627.0" width="62.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.9" y="638.0">io/mic..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/ProcessMemoryMetrics$$Lambda$158/1213818572.applyAsDouble (9 samples, 4.33%)</title><rect x="253.9" y="611.0" width="51.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.9" y="622.0">io/gi..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/ProcessMemoryMetrics.lambda$bindTo$0 (9 samples, 4.33%)</title><rect x="253.9" y="595.0" width="51.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.9" y="606.0">io/gi..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/ProcessMemoryMetrics.value (9 samples, 4.33%)</title><rect x="253.9" y="579.0" width="51.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.9" y="590.0">io/gi..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsSmaps.get (9 samples, 4.33%)</title><rect x="253.9" y="563.0" width="51.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.9" y="574.0">io/gi..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry.get (9 samples, 4.33%)</title><rect x="253.9" y="547.0" width="51.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.9" y="558.0">io/gi..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry.collect (9 samples, 4.33%)</title><rect x="253.9" y="531.0" width="51.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.9" y="542.0">io/gi..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsReader.read (9 samples, 4.33%)</title><rect x="253.9" y="515.0" width="51.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.9" y="526.0">io/gi..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsReader.readPath (9 samples, 4.33%)</title><rect x="253.9" y="499.0" width="51.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.9" y="510.0">io/gi..</text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry$$Lambda$181/1026489440.accept (2 samples, 0.96%)</title><rect x="253.9" y="483.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.9" y="494.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsEntry.lambda$collect$0 (2 samples, 0.96%)</title><rect x="253.9" y="467.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.9" y="478.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsSmaps.handle (2 samples, 0.96%)</title><rect x="253.9" y="451.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.9" y="462.0"></text>
</g>
<g>
<title>io/github/mweirauch/micrometer/jvm/extras/procfs/ProcfsSmaps.parseKiloBytes (2 samples, 0.96%)</title><rect x="253.9" y="435.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.9" y="446.0"></text>
</g>
<g>
<title>java/lang/Double.parseDouble (1 samples, 0.48%)</title><rect x="253.9" y="419.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/math/FloatingDecimal.parseDouble (1 samples, 0.48%)</title><rect x="253.9" y="403.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/math/FloatingDecimal.readJavaFormatString (1 samples, 0.48%)</title><rect x="253.9" y="387.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.9" y="398.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.matches (1 samples, 0.48%)</title><rect x="259.6" y="419.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.6" y="430.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.match (1 samples, 0.48%)</title><rect x="259.6" y="403.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.6" y="414.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Begin.match (1 samples, 0.48%)</title><rect x="259.6" y="387.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.6" y="398.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.48%)</title><rect x="259.6" y="371.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.6" y="382.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.48%)</title><rect x="259.6" y="355.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.6" y="366.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.48%)</title><rect x="259.6" y="339.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.6" y="350.0"></text>
</g>
<g>
<title>java/io/BufferedReader.readLine (7 samples, 3.37%)</title><rect x="265.3" y="483.0" width="39.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.3" y="494.0">jav..</text>
</g>
<g>
<title>java/io/BufferedReader.readLine (7 samples, 3.37%)</title><rect x="265.3" y="467.0" width="39.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.3" y="478.0">jav..</text>
</g>
<g>
<title>java/io/BufferedReader.fill (7 samples, 3.37%)</title><rect x="265.3" y="451.0" width="39.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.3" y="462.0">jav..</text>
</g>
<g>
<title>java/io/InputStreamReader.read (7 samples, 3.37%)</title><rect x="265.3" y="435.0" width="39.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.3" y="446.0">jav..</text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.read (7 samples, 3.37%)</title><rect x="265.3" y="419.0" width="39.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.3" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.implRead (7 samples, 3.37%)</title><rect x="265.3" y="403.0" width="39.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.3" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.inReady (1 samples, 0.48%)</title><rect x="265.3" y="387.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.available (1 samples, 0.48%)</title><rect x="265.3" y="371.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.position (1 samples, 0.48%)</title><rect x="265.3" y="355.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.seek (1 samples, 0.48%)</title><rect x="265.3" y="339.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.seek0 (1 samples, 0.48%)</title><rect x="265.3" y="323.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.3" y="334.0"></text>
</g>
<g>
<title>__lseek64 (1 samples, 0.48%)</title><rect x="265.3" y="307.0" width="5.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="268.3" y="318.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.48%)</title><rect x="265.3" y="291.0" width="5.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="268.3" y="302.0"></text>
</g>
<g>
<title>sys_lseek (1 samples, 0.48%)</title><rect x="265.3" y="275.0" width="5.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="268.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.readBytes (6 samples, 2.88%)</title><rect x="271.0" y="387.0" width="34.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.0" y="398.0">su..</text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.read (6 samples, 2.88%)</title><rect x="271.0" y="371.0" width="34.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.0" y="382.0">su..</text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.read (6 samples, 2.88%)</title><rect x="271.0" y="355.0" width="34.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.0" y="366.0">su..</text>
</g>
<g>
<title>sun/nio/ch/ChannelInputStream.read (6 samples, 2.88%)</title><rect x="271.0" y="339.0" width="34.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.0" y="350.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (6 samples, 2.88%)</title><rect x="271.0" y="323.0" width="34.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.0" y="334.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 2.88%)</title><rect x="271.0" y="307.0" width="34.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.0" y="318.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 2.88%)</title><rect x="271.0" y="291.0" width="34.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.0" y="302.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read (6 samples, 2.88%)</title><rect x="271.0" y="275.0" width="34.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.0" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (6 samples, 2.88%)</title><rect x="271.0" y="259.0" width="34.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.0" y="270.0">su..</text>
</g>
<g>
<title>[unknown] (6 samples, 2.88%)</title><rect x="271.0" y="243.0" width="34.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="274.0" y="254.0">[u..</text>
</g>
<g>
<title>__libc_read (6 samples, 2.88%)</title><rect x="271.0" y="227.0" width="34.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="274.0" y="238.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 2.88%)</title><rect x="271.0" y="211.0" width="34.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="274.0" y="222.0">en..</text>
</g>
<g>
<title>do_syscall_64 (6 samples, 2.88%)</title><rect x="271.0" y="195.0" width="34.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="274.0" y="206.0">do..</text>
</g>
<g>
<title>__f_unlock_pos (1 samples, 0.48%)</title><rect x="271.0" y="179.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="274.0" y="190.0"></text>
</g>
<g>
<title>sys_read (5 samples, 2.40%)</title><rect x="276.6" y="179.0" width="28.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="279.6" y="190.0">sy..</text>
</g>
<g>
<title>vfs_read (5 samples, 2.40%)</title><rect x="276.6" y="163.0" width="28.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="279.6" y="174.0">vf..</text>
</g>
<g>
<title>__vfs_read (5 samples, 2.40%)</title><rect x="276.6" y="147.0" width="28.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="279.6" y="158.0">__..</text>
</g>
<g>
<title>seq_read (5 samples, 2.40%)</title><rect x="276.6" y="131.0" width="28.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="279.6" y="142.0">se..</text>
</g>
<g>
<title>show_pid_smap (5 samples, 2.40%)</title><rect x="276.6" y="115.0" width="28.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="279.6" y="126.0">sh..</text>
</g>
<g>
<title>show_smap.isra.31 (5 samples, 2.40%)</title><rect x="276.6" y="99.0" width="28.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="279.6" y="110.0">sh..</text>
</g>
<g>
<title>seq_printf (1 samples, 0.48%)</title><rect x="276.6" y="83.0" width="5.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="279.6" y="94.0"></text>
</g>
<g>
<title>seq_vprintf (1 samples, 0.48%)</title><rect x="276.6" y="67.0" width="5.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="279.6" y="78.0"></text>
</g>
<g>
<title>memcpy_erms (1 samples, 0.48%)</title><rect x="276.6" y="51.0" width="5.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="279.6" y="62.0"></text>
</g>
<g>
<title>walk_page_vma (4 samples, 1.92%)</title><rect x="282.3" y="83.0" width="22.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="285.3" y="94.0">w..</text>
</g>
<g>
<title>__walk_page_range (4 samples, 1.92%)</title><rect x="282.3" y="67.0" width="22.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="285.3" y="78.0">_..</text>
</g>
<g>
<title>smaps_pte_range (4 samples, 1.92%)</title><rect x="282.3" y="51.0" width="22.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="285.3" y="62.0">s..</text>
</g>
<g>
<title>smaps_account (4 samples, 1.92%)</title><rect x="282.3" y="35.0" width="22.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="285.3" y="46.0">s..</text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics$$Lambda$144/710190911.applyAsDouble (2 samples, 0.96%)</title><rect x="305.0" y="611.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="622.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.lambda$bindTo$0 (2 samples, 0.96%)</title><rect x="305.0" y="595.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="308.0" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.getThreadStateCount (2 samples, 0.96%)</title><rect x="305.0" y="579.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="590.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (2 samples, 0.96%)</title><rect x="305.0" y="563.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.0" y="574.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (2 samples, 0.96%)</title><rect x="305.0" y="547.0" width="11.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="308.0" y="558.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (2 samples, 0.96%)</title><rect x="305.0" y="531.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.0" y="542.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.&lt;init&gt; (1 samples, 0.48%)</title><rect x="305.0" y="515.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="526.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.initialize (1 samples, 0.48%)</title><rect x="305.0" y="499.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.48%)</title><rect x="305.0" y="483.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1813187653.invoke (1 samples, 0.48%)</title><rect x="305.0" y="467.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.0" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1123225098.invoke (1 samples, 0.48%)</title><rect x="305.0" y="451.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.0" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.48%)</title><rect x="305.0" y="435.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="308.0" y="446.0"></text>
</g>
<g>
<title>jmm_GetThreadInfo (1 samples, 0.48%)</title><rect x="310.7" y="515.0" width="5.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="313.7" y="526.0"></text>
</g>
<g>
<title>Management::create_thread_info_instance(ThreadSnapshot*, Thread*) (1 samples, 0.48%)</title><rect x="310.7" y="499.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="313.7" y="510.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.48%)</title><rect x="310.7" y="483.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="313.7" y="494.0"></text>
</g>
<g>
<title>[epollEventLoopGroup-3-3 tid=4819] (6 samples, 2.88%)</title><rect x="316.3" y="1251.0" width="34.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="319.3" y="1262.0">[e..</text>
</g>
<g>
<title>java/lang/Thread.run (6 samples, 2.88%)</title><rect x="316.3" y="1235.0" width="34.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.3" y="1246.0">ja..</text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (6 samples, 2.88%)</title><rect x="316.3" y="1219.0" width="34.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.3" y="1230.0">io..</text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (6 samples, 2.88%)</title><rect x="316.3" y="1203.0" width="34.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.3" y="1214.0">io..</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$5.run (6 samples, 2.88%)</title><rect x="316.3" y="1187.0" width="34.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.3" y="1198.0">io..</text>
</g>
<g>
<title>io/netty/channel/epoll/EpollEventLoop.run (6 samples, 2.88%)</title><rect x="316.3" y="1171.0" width="34.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.3" y="1182.0">io..</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (6 samples, 2.88%)</title><rect x="316.3" y="1155.0" width="34.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.3" y="1166.0">io..</text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.safeExecute (6 samples, 2.88%)</title><rect x="316.3" y="1139.0" width="34.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.3" y="1150.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.run (6 samples, 2.88%)</title><rect x="316.3" y="1123.0" width="34.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.3" y="1134.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask.write (6 samples, 2.88%)</title><rect x="316.3" y="1107.0" width="34.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.3" y="1118.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.access$1700 (6 samples, 2.88%)</title><rect x="316.3" y="1091.0" width="34.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.3" y="1102.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (6 samples, 2.88%)</title><rect x="316.3" y="1075.0" width="34.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.3" y="1086.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (6 samples, 2.88%)</title><rect x="316.3" y="1059.0" width="34.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.3" y="1070.0">io..</text>
</g>
<g>
<title>pbouda/broadcaster/server/netty/SlowConsumerDisconnectHandler.write (6 samples, 2.88%)</title><rect x="316.3" y="1043.0" width="34.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.3" y="1054.0">pb..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (6 samples, 2.88%)</title><rect x="316.3" y="1027.0" width="34.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.3" y="1038.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (6 samples, 2.88%)</title><rect x="316.3" y="1011.0" width="34.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.3" y="1022.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (6 samples, 2.88%)</title><rect x="316.3" y="995.0" width="34.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.3" y="1006.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (6 samples, 2.88%)</title><rect x="316.3" y="979.0" width="34.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.3" y="990.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (6 samples, 2.88%)</title><rect x="316.3" y="963.0" width="34.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.3" y="974.0">io..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.flush (6 samples, 2.88%)</title><rect x="316.3" y="947.0" width="34.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.3" y="958.0">io..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.doFlush (6 samples, 2.88%)</title><rect x="316.3" y="931.0" width="34.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.3" y="942.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (4 samples, 1.92%)</title><rect x="316.3" y="915.0" width="22.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.3" y="926.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (4 samples, 1.92%)</title><rect x="316.3" y="899.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.3" y="910.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (4 samples, 1.92%)</title><rect x="316.3" y="883.0" width="22.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.3" y="894.0">i..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (4 samples, 1.92%)</title><rect x="316.3" y="867.0" width="22.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.3" y="878.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (4 samples, 1.92%)</title><rect x="316.3" y="851.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.3" y="862.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.flush0 (4 samples, 1.92%)</title><rect x="316.3" y="835.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.3" y="846.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (4 samples, 1.92%)</title><rect x="316.3" y="819.0" width="22.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="319.3" y="830.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.doWrite (4 samples, 1.92%)</title><rect x="316.3" y="803.0" width="22.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="319.3" y="814.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.doWriteSingle (4 samples, 1.92%)</title><rect x="316.3" y="787.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.3" y="798.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollStreamChannel.writeBytes (4 samples, 1.92%)</title><rect x="316.3" y="771.0" width="22.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.3" y="782.0">i..</text>
</g>
<g>
<title>io/netty/channel/epoll/AbstractEpollChannel.doWriteBytes (4 samples, 1.92%)</title><rect x="316.3" y="755.0" width="22.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.3" y="766.0">i..</text>
</g>
<g>
<title>io/netty/channel/unix/FileDescriptor.writeAddress (4 samples, 1.92%)</title><rect x="316.3" y="739.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.3" y="750.0">i..</text>
</g>
<g>
<title>io/netty/channel/unix/FileDescriptor.writeAddress (4 samples, 1.92%)</title><rect x="316.3" y="723.0" width="22.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.3" y="734.0">i..</text>
</g>
<g>
<title>[unknown] (4 samples, 1.92%)</title><rect x="316.3" y="707.0" width="22.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="319.3" y="718.0">[..</text>
</g>
<g>
<title>__write (4 samples, 1.92%)</title><rect x="316.3" y="691.0" width="22.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="319.3" y="702.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 1.44%)</title><rect x="322.0" y="675.0" width="17.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="325.0" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 1.44%)</title><rect x="322.0" y="659.0" width="17.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="325.0" y="670.0"></text>
</g>
<g>
<title>sys_write (2 samples, 0.96%)</title><rect x="327.7" y="643.0" width="11.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="330.7" y="654.0"></text>
</g>
<g>
<title>vfs_write (2 samples, 0.96%)</title><rect x="327.7" y="627.0" width="11.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="330.7" y="638.0"></text>
</g>
<g>
<title>__vfs_write (2 samples, 0.96%)</title><rect x="327.7" y="611.0" width="11.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="330.7" y="622.0"></text>
</g>
<g>
<title>new_sync_write (2 samples, 0.96%)</title><rect x="327.7" y="595.0" width="11.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="330.7" y="606.0"></text>
</g>
<g>
<title>sock_write_iter (2 samples, 0.96%)</title><rect x="327.7" y="579.0" width="11.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="330.7" y="590.0"></text>
</g>
<g>
<title>sock_sendmsg (2 samples, 0.96%)</title><rect x="327.7" y="563.0" width="11.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="330.7" y="574.0"></text>
</g>
<g>
<title>inet_sendmsg (2 samples, 0.96%)</title><rect x="327.7" y="547.0" width="11.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="330.7" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg (2 samples, 0.96%)</title><rect x="327.7" y="531.0" width="11.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="330.7" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.96%)</title><rect x="327.7" y="515.0" width="11.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="330.7" y="526.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.96%)</title><rect x="327.7" y="499.0" width="11.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="330.7" y="510.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (2 samples, 0.96%)</title><rect x="327.7" y="483.0" width="11.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="330.7" y="494.0"></text>
</g>
<g>
<title>tcp_write_xmit (2 samples, 0.96%)</title><rect x="327.7" y="467.0" width="11.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="330.7" y="478.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (2 samples, 0.96%)</title><rect x="327.7" y="451.0" width="11.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="330.7" y="462.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.96%)</title><rect x="327.7" y="435.0" width="11.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="330.7" y="446.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.96%)</title><rect x="327.7" y="419.0" width="11.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="330.7" y="430.0"></text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.48%)</title><rect x="327.7" y="403.0" width="5.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="330.7" y="414.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.48%)</title><rect x="327.7" y="387.0" width="5.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="330.7" y="398.0"></text>
</g>
<g>
<title>ipv4_conntrack_local	[nf_conntrack_ipv4] (1 samples, 0.48%)</title><rect x="327.7" y="371.0" width="5.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="330.7" y="382.0"></text>
</g>
<g>
<title>nf_conntrack_in	[nf_conntrack] (1 samples, 0.48%)</title><rect x="327.7" y="355.0" width="5.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="330.7" y="366.0"></text>
</g>
<g>
<title>tcp_error	[nf_conntrack] (1 samples, 0.48%)</title><rect x="327.7" y="339.0" width="5.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="330.7" y="350.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.48%)</title><rect x="333.4" y="403.0" width="5.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="336.4" y="414.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.48%)</title><rect x="333.4" y="387.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="336.4" y="398.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.48%)</title><rect x="333.4" y="371.0" width="5.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="336.4" y="382.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.48%)</title><rect x="333.4" y="355.0" width="5.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="336.4" y="366.0"></text>
</g>
<g>
<title>do_softirq.part.17 (1 samples, 0.48%)</title><rect x="333.4" y="339.0" width="5.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="336.4" y="350.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.48%)</title><rect x="333.4" y="323.0" width="5.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="336.4" y="334.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.48%)</title><rect x="333.4" y="307.0" width="5.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="336.4" y="318.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.48%)</title><rect x="333.4" y="291.0" width="5.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="336.4" y="302.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.48%)</title><rect x="333.4" y="275.0" width="5.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="336.4" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.48%)</title><rect x="333.4" y="259.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="336.4" y="270.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.48%)</title><rect x="333.4" y="243.0" width="5.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="336.4" y="254.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.48%)</title><rect x="333.4" y="227.0" width="5.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="336.4" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.48%)</title><rect x="333.4" y="211.0" width="5.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="336.4" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.48%)</title><rect x="333.4" y="195.0" width="5.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="336.4" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.48%)</title><rect x="333.4" y="179.0" width="5.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="336.4" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.48%)</title><rect x="333.4" y="163.0" width="5.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="336.4" y="174.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (2 samples, 0.96%)</title><rect x="339.0" y="915.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="342.0" y="926.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (2 samples, 0.96%)</title><rect x="339.0" y="899.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.0" y="910.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (2 samples, 0.96%)</title><rect x="339.0" y="883.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.0" y="894.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (2 samples, 0.96%)</title><rect x="339.0" y="867.0" width="11.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="342.0" y="878.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (2 samples, 0.96%)</title><rect x="339.0" y="851.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.0" y="862.0"></text>
</g>
<g>
<title>io/netty/handler/codec/CodecOutputList.recycle (1 samples, 0.48%)</title><rect x="339.0" y="835.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.0" y="846.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.encode (1 samples, 0.48%)</title><rect x="344.7" y="835.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.7" y="846.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.encode (1 samples, 0.48%)</title><rect x="344.7" y="819.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.7" y="830.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (1 samples, 0.48%)</title><rect x="344.7" y="803.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="347.7" y="814.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (1 samples, 0.48%)</title><rect x="344.7" y="787.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.7" y="798.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (1 samples, 0.48%)</title><rect x="344.7" y="771.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.7" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.48%)</title><rect x="344.7" y="755.0" width="5.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="347.7" y="766.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-10 tid=4753] (1 samples, 0.48%)</title><rect x="350.4" y="1251.0" width="5.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="353.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="350.4" y="1235.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="350.4" y="1219.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="350.4" y="1203.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.48%)</title><rect x="350.4" y="1187.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.48%)</title><rect x="350.4" y="1171.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.48%)</title><rect x="350.4" y="1155.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.48%)</title><rect x="350.4" y="1139.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.4" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.48%)</title><rect x="350.4" y="1123.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.4" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.48%)</title><rect x="350.4" y="1107.0" width="5.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="353.4" y="1118.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.48%)</title><rect x="350.4" y="1091.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="353.4" y="1102.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-11 tid=4754] (1 samples, 0.48%)</title><rect x="356.1" y="1251.0" width="5.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="359.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="356.1" y="1235.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="359.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="356.1" y="1219.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="356.1" y="1203.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.48%)</title><rect x="356.1" y="1187.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="359.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.48%)</title><rect x="356.1" y="1171.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.48%)</title><rect x="356.1" y="1155.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.48%)</title><rect x="356.1" y="1139.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.1" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.48%)</title><rect x="356.1" y="1123.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.1" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.48%)</title><rect x="356.1" y="1107.0" width="5.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="359.1" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.48%)</title><rect x="356.1" y="1091.0" width="5.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="359.1" y="1102.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.48%)</title><rect x="356.1" y="1075.0" width="5.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="359.1" y="1086.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.48%)</title><rect x="356.1" y="1059.0" width="5.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="359.1" y="1070.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.48%)</title><rect x="356.1" y="1043.0" width="5.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="359.1" y="1054.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.48%)</title><rect x="356.1" y="1027.0" width="5.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="359.1" y="1038.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.48%)</title><rect x="356.1" y="1011.0" width="5.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="359.1" y="1022.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-12 tid=4755] (1 samples, 0.48%)</title><rect x="361.7" y="1251.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="364.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="361.7" y="1235.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="364.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="361.7" y="1219.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="361.7" y="1203.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.7" y="1214.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-13 tid=4756] (1 samples, 0.48%)</title><rect x="367.4" y="1251.0" width="5.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="370.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="367.4" y="1235.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="367.4" y="1219.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="367.4" y="1203.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.4" y="1214.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-14 tid=4757] (1 samples, 0.48%)</title><rect x="373.1" y="1251.0" width="5.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="376.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="373.1" y="1235.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="376.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="373.1" y="1219.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="376.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="373.1" y="1203.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.48%)</title><rect x="373.1" y="1187.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.48%)</title><rect x="373.1" y="1171.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.48%)</title><rect x="373.1" y="1155.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.48%)</title><rect x="373.1" y="1139.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.1" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.48%)</title><rect x="373.1" y="1123.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.48%)</title><rect x="373.1" y="1107.0" width="5.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="376.1" y="1118.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.48%)</title><rect x="373.1" y="1091.0" width="5.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="376.1" y="1102.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.48%)</title><rect x="373.1" y="1075.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="376.1" y="1086.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.48%)</title><rect x="373.1" y="1059.0" width="5.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="376.1" y="1070.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.48%)</title><rect x="373.1" y="1043.0" width="5.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="376.1" y="1054.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.48%)</title><rect x="373.1" y="1027.0" width="5.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="376.1" y="1038.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.48%)</title><rect x="373.1" y="1011.0" width="5.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="376.1" y="1022.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.48%)</title><rect x="373.1" y="995.0" width="5.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="376.1" y="1006.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.48%)</title><rect x="373.1" y="979.0" width="5.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="376.1" y="990.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.48%)</title><rect x="373.1" y="963.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="376.1" y="974.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.48%)</title><rect x="373.1" y="947.0" width="5.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="376.1" y="958.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-15 tid=4758] (1 samples, 0.48%)</title><rect x="378.7" y="1251.0" width="5.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="381.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="378.7" y="1235.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="381.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="378.7" y="1219.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="378.7" y="1203.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.48%)</title><rect x="378.7" y="1187.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.48%)</title><rect x="378.7" y="1171.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="381.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.48%)</title><rect x="378.7" y="1155.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="381.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.48%)</title><rect x="378.7" y="1139.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.48%)</title><rect x="378.7" y="1123.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.48%)</title><rect x="378.7" y="1107.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="381.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.48%)</title><rect x="378.7" y="1091.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="381.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.48%)</title><rect x="378.7" y="1075.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.7" y="1086.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-16 tid=4759] (1 samples, 0.48%)</title><rect x="384.4" y="1251.0" width="5.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="387.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="384.4" y="1235.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="384.4" y="1219.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="384.4" y="1203.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.4" y="1214.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService$WorkPoolRunnable.run (1 samples, 0.48%)</title><rect x="384.4" y="1187.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.4" y="1198.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher$5.run (1 samples, 0.48%)</title><rect x="384.4" y="1171.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="387.4" y="1182.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDelivery (1 samples, 0.48%)</title><rect x="384.4" y="1155.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="387.4" y="1166.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDeliveryInternal (1 samples, 0.48%)</title><rect x="384.4" y="1139.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.4" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (1 samples, 0.48%)</title><rect x="384.4" y="1123.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="387.4" y="1134.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (1 samples, 0.48%)</title><rect x="384.4" y="1107.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.4" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (1 samples, 0.48%)</title><rect x="384.4" y="1091.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.4" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroupFuture.&lt;init&gt; (1 samples, 0.48%)</title><rect x="384.4" y="1075.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="387.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.48%)</title><rect x="384.4" y="1059.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.4" y="1070.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-17 tid=4760] (1 samples, 0.48%)</title><rect x="390.1" y="1251.0" width="5.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="393.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="390.1" y="1235.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="393.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="390.1" y="1219.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="393.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="390.1" y="1203.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.1" y="1214.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService$WorkPoolRunnable.run (1 samples, 0.48%)</title><rect x="390.1" y="1187.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="393.1" y="1198.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher$5.run (1 samples, 0.48%)</title><rect x="390.1" y="1171.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="393.1" y="1182.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDelivery (1 samples, 0.48%)</title><rect x="390.1" y="1155.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.1" y="1166.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDeliveryInternal (1 samples, 0.48%)</title><rect x="390.1" y="1139.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.48%)</title><rect x="390.1" y="1123.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.48%)</title><rect x="390.1" y="1107.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.48%)</title><rect x="390.1" y="1091.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="393.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (1 samples, 0.48%)</title><rect x="390.1" y="1075.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8_0 (1 samples, 0.48%)</title><rect x="390.1" y="1059.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.48%)</title><rect x="390.1" y="1043.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.48%)</title><rect x="390.1" y="1027.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="393.1" y="1038.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-2 tid=4745] (1 samples, 0.48%)</title><rect x="395.8" y="1251.0" width="5.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="398.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="395.8" y="1235.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="398.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="395.8" y="1219.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="395.8" y="1203.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="398.8" y="1214.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService$WorkPoolRunnable.run (1 samples, 0.48%)</title><rect x="395.8" y="1187.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="398.8" y="1198.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher$5.run (1 samples, 0.48%)</title><rect x="395.8" y="1171.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.8" y="1182.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDelivery (1 samples, 0.48%)</title><rect x="395.8" y="1155.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="398.8" y="1166.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDeliveryInternal (1 samples, 0.48%)</title><rect x="395.8" y="1139.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="398.8" y="1150.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeCharSequence (1 samples, 0.48%)</title><rect x="395.8" y="1123.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.8" y="1134.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.setCharSequence0 (1 samples, 0.48%)</title><rect x="395.8" y="1107.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.8" y="1118.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.writeUtf8 (1 samples, 0.48%)</title><rect x="395.8" y="1091.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="398.8" y="1102.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.writeUtf8 (1 samples, 0.48%)</title><rect x="395.8" y="1075.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="398.8" y="1086.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf._setByte (1 samples, 0.48%)</title><rect x="395.8" y="1059.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="398.8" y="1070.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.addr (1 samples, 0.48%)</title><rect x="395.8" y="1043.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="398.8" y="1054.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-3 tid=4746] (1 samples, 0.48%)</title><rect x="401.4" y="1251.0" width="5.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="404.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="401.4" y="1235.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="401.4" y="1219.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="404.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="401.4" y="1203.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.4" y="1214.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-4 tid=4747] (1 samples, 0.48%)</title><rect x="407.1" y="1251.0" width="5.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="410.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="407.1" y="1235.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="407.1" y="1219.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="407.1" y="1203.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="410.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.48%)</title><rect x="407.1" y="1187.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.48%)</title><rect x="407.1" y="1171.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.48%)</title><rect x="407.1" y="1155.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.48%)</title><rect x="407.1" y="1139.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.48%)</title><rect x="407.1" y="1123.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="410.1" y="1134.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-5 tid=4748] (1 samples, 0.48%)</title><rect x="412.8" y="1251.0" width="5.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="415.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="412.8" y="1235.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="412.8" y="1219.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="415.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="412.8" y="1203.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.8" y="1214.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService$WorkPoolRunnable.run (1 samples, 0.48%)</title><rect x="412.8" y="1187.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.8" y="1198.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher$5.run (1 samples, 0.48%)</title><rect x="412.8" y="1171.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="415.8" y="1182.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDelivery (1 samples, 0.48%)</title><rect x="412.8" y="1155.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.8" y="1166.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDeliveryInternal (1 samples, 0.48%)</title><rect x="412.8" y="1139.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.8" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (1 samples, 0.48%)</title><rect x="412.8" y="1123.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.8" y="1134.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (1 samples, 0.48%)</title><rect x="412.8" y="1107.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="415.8" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (1 samples, 0.48%)</title><rect x="412.8" y="1091.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.48%)</title><rect x="412.8" y="1075.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.48%)</title><rect x="412.8" y="1059.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.48%)</title><rect x="412.8" y="1043.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.8" y="1054.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-6 tid=4749] (1 samples, 0.48%)</title><rect x="418.5" y="1251.0" width="5.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="421.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="418.5" y="1235.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="421.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="418.5" y="1219.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="421.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="418.5" y="1203.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="421.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.48%)</title><rect x="418.5" y="1187.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="421.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.48%)</title><rect x="418.5" y="1171.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.48%)</title><rect x="418.5" y="1155.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.48%)</title><rect x="418.5" y="1139.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="421.5" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.48%)</title><rect x="418.5" y="1123.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="421.5" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.48%)</title><rect x="418.5" y="1107.0" width="5.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="421.5" y="1118.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.48%)</title><rect x="418.5" y="1091.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="421.5" y="1102.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-7 tid=4750] (1 samples, 0.48%)</title><rect x="424.1" y="1251.0" width="5.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="427.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="424.1" y="1235.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="424.1" y="1219.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="424.1" y="1203.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="427.1" y="1214.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-8 tid=4751] (1 samples, 0.48%)</title><rect x="429.8" y="1251.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="432.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="429.8" y="1235.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="432.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="429.8" y="1219.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="432.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="429.8" y="1203.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.48%)</title><rect x="429.8" y="1187.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.48%)</title><rect x="429.8" y="1171.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.48%)</title><rect x="429.8" y="1155.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.48%)</title><rect x="429.8" y="1139.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="432.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.48%)</title><rect x="429.8" y="1123.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="432.8" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.48%)</title><rect x="429.8" y="1107.0" width="5.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="432.8" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.48%)</title><rect x="429.8" y="1091.0" width="5.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="432.8" y="1102.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.48%)</title><rect x="429.8" y="1075.0" width="5.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="432.8" y="1086.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.48%)</title><rect x="429.8" y="1059.0" width="5.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="432.8" y="1070.0"></text>
</g>
<g>
<title>[rabbitmq-consumer-9 tid=4752] (1 samples, 0.48%)</title><rect x="435.5" y="1251.0" width="5.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="438.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.48%)</title><rect x="435.5" y="1235.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="438.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1 samples, 0.48%)</title><rect x="435.5" y="1219.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="438.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1 samples, 0.48%)</title><rect x="435.5" y="1203.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="438.5" y="1214.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerWorkService$WorkPoolRunnable.run (1 samples, 0.48%)</title><rect x="435.5" y="1187.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.5" y="1198.0"></text>
</g>
<g>
<title>com/rabbitmq/client/impl/ConsumerDispatcher$5.run (1 samples, 0.48%)</title><rect x="435.5" y="1171.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.5" y="1182.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDelivery (1 samples, 0.48%)</title><rect x="435.5" y="1155.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="438.5" y="1166.0"></text>
</g>
<g>
<title>pbouda/broadcaster/server/rabbit/EventConsumer.handleDeliveryInternal (1 samples, 0.48%)</title><rect x="435.5" y="1139.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="438.5" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (1 samples, 0.48%)</title><rect x="435.5" y="1123.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.5" y="1134.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (1 samples, 0.48%)</title><rect x="435.5" y="1107.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="438.5" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.write (1 samples, 0.48%)</title><rect x="435.5" y="1091.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.5" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/group/DefaultChannelGroup.safeDuplicate (1 samples, 0.48%)</title><rect x="435.5" y="1075.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.5" y="1086.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.retainedDuplicate (1 samples, 0.48%)</title><rect x="435.5" y="1059.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="438.5" y="1070.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/TextWebSocketFrame.retainedDuplicate (1 samples, 0.48%)</title><rect x="435.5" y="1043.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="438.5" y="1054.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/websocketx/WebSocketFrame.retainedDuplicate (1 samples, 0.48%)</title><rect x="435.5" y="1027.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="438.5" y="1038.0"></text>
</g>
<g>
<title>io/netty/buffer/DefaultByteBufHolder.retainedDuplicate (1 samples, 0.48%)</title><rect x="435.5" y="1011.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.5" y="1022.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareByteBuf.retainedDuplicate (1 samples, 0.48%)</title><rect x="435.5" y="995.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.5" y="1006.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareByteBuf.unwrappedDerived (1 samples, 0.48%)</title><rect x="435.5" y="979.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.5" y="990.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareByteBuf.unwrapSwapped (1 samples, 0.48%)</title><rect x="435.5" y="963.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="438.5" y="974.0"></text>
</g>
<g>
<title>[tid=4720] (2 samples, 0.96%)</title><rect x="441.2" y="1251.0" width="11.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="444.2" y="1262.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.96%)</title><rect x="441.2" y="1235.0" width="11.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="444.2" y="1246.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.96%)</title><rect x="441.2" y="1219.0" width="11.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="444.2" y="1230.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.96%)</title><rect x="441.2" y="1203.0" width="11.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="444.2" y="1214.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.96%)</title><rect x="441.2" y="1187.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="444.2" y="1198.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.96%)</title><rect x="441.2" y="1171.0" width="11.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="444.2" y="1182.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.48%)</title><rect x="441.2" y="1155.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="444.2" y="1166.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.48%)</title><rect x="441.2" y="1139.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="444.2" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.48%)</title><rect x="441.2" y="1123.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="444.2" y="1134.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.48%)</title><rect x="446.8" y="1155.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="449.8" y="1166.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.48%)</title><rect x="446.8" y="1139.0" width="5.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="449.8" y="1150.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.48%)</title><rect x="446.8" y="1123.0" width="5.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="449.8" y="1134.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.48%)</title><rect x="446.8" y="1107.0" width="5.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="449.8" y="1118.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.48%)</title><rect x="446.8" y="1091.0" width="5.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="449.8" y="1102.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.48%)</title><rect x="446.8" y="1075.0" width="5.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="449.8" y="1086.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.48%)</title><rect x="446.8" y="1059.0" width="5.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="449.8" y="1070.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.48%)</title><rect x="446.8" y="1043.0" width="5.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="449.8" y="1054.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.48%)</title><rect x="446.8" y="1027.0" width="5.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="449.8" y="1038.0"></text>
</g>
<g>
<title>[tid=4725] (120 samples, 57.69%)</title><rect x="452.5" y="1251.0" width="680.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="455.5" y="1262.0">[tid=4725]</text>
</g>
<g>
<title>[unknown] (1 samples, 0.48%)</title><rect x="452.5" y="1235.0" width="5.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="455.5" y="1246.0"></text>
</g>
<g>
<title>__GI__IO_getline (1 samples, 0.48%)</title><rect x="452.5" y="1219.0" width="5.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="455.5" y="1230.0"></text>
</g>
<g>
<title>__GI___vsnprintf_chk (1 samples, 0.48%)</title><rect x="458.2" y="1235.0" width="5.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="461.2" y="1246.0"></text>
</g>
<g>
<title>__GI__IO_default_xsputn (1 samples, 0.48%)</title><rect x="458.2" y="1219.0" width="5.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="461.2" y="1230.0"></text>
</g>
<g>
<title>start_thread (118 samples, 56.73%)</title><rect x="463.8" y="1235.0" width="669.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="466.8" y="1246.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (118 samples, 56.73%)</title><rect x="463.8" y="1219.0" width="669.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="466.8" y="1230.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (118 samples, 56.73%)</title><rect x="463.8" y="1203.0" width="669.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="466.8" y="1214.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (118 samples, 56.73%)</title><rect x="463.8" y="1187.0" width="669.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="466.8" y="1198.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (118 samples, 56.73%)</title><rect x="463.8" y="1171.0" width="669.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="466.8" y="1182.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (117 samples, 56.25%)</title><rect x="463.8" y="1155.0" width="663.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="466.8" y="1166.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (116 samples, 55.77%)</title><rect x="463.8" y="1139.0" width="658.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="466.8" y="1150.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (116 samples, 55.77%)</title><rect x="463.8" y="1123.0" width="658.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="466.8" y="1134.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.48%)</title><rect x="463.8" y="1107.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="466.8" y="1118.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.48%)</title><rect x="463.8" y="1091.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="466.8" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.48%)</title><rect x="463.8" y="1075.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="466.8" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.48%)</title><rect x="463.8" y="1059.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="466.8" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.48%)</title><rect x="463.8" y="1043.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="466.8" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.48%)</title><rect x="463.8" y="1027.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="466.8" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.48%)</title><rect x="463.8" y="1011.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="466.8" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.48%)</title><rect x="463.8" y="995.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="466.8" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.48%)</title><rect x="463.8" y="979.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="466.8" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.48%)</title><rect x="463.8" y="963.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="466.8" y="974.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.48%)</title><rect x="463.8" y="947.0" width="5.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="466.8" y="958.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 24.04%)</title><rect x="469.5" y="1107.0" width="283.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="472.5" y="1118.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.96%)</title><rect x="469.5" y="1091.0" width="11.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="472.5" y="1102.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.96%)</title><rect x="469.5" y="1075.0" width="11.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="472.5" y="1086.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.48%)</title><rect x="475.2" y="1059.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="478.2" y="1070.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.48%)</title><rect x="475.2" y="1043.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="478.2" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="475.2" y="1027.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="478.2" y="1038.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.48%)</title><rect x="475.2" y="1011.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="478.2" y="1022.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.48%)</title><rect x="475.2" y="995.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="478.2" y="1006.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.48%)</title><rect x="475.2" y="979.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="478.2" y="990.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.44%)</title><rect x="480.9" y="1091.0" width="17.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="483.9" y="1102.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.48%)</title><rect x="486.5" y="1075.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="489.5" y="1086.0"></text>
</g>
<g>
<title>BoxLockNode::reg(Node*) (1 samples, 0.48%)</title><rect x="486.5" y="1059.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="489.5" y="1070.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.48%)</title><rect x="492.2" y="1075.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="495.2" y="1086.0"></text>
</g>
<g>
<title>decodeHeapOopNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.48%)</title><rect x="492.2" y="1059.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="495.2" y="1070.0"></text>
</g>
<g>
<title>MacroAssembler::decode_heap_oop(RegisterImpl*) (1 samples, 0.48%)</title><rect x="492.2" y="1043.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="495.2" y="1054.0"></text>
</g>
<g>
<title>MacroAssembler::verify_heapbase(char const*) [clone .part.49] (1 samples, 0.48%)</title><rect x="492.2" y="1027.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="495.2" y="1038.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.48%)</title><rect x="492.2" y="1011.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="495.2" y="1022.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 0.48%)</title><rect x="492.2" y="995.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="495.2" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.40%)</title><rect x="497.9" y="1091.0" width="28.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="500.9" y="1102.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.92%)</title><rect x="497.9" y="1075.0" width="22.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="500.9" y="1086.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.96%)</title><rect x="497.9" y="1059.0" width="11.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="500.9" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.96%)</title><rect x="509.2" y="1059.0" width="11.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="512.2" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.48%)</title><rect x="509.2" y="1043.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="512.2" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.48%)</title><rect x="509.2" y="1027.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="512.2" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.48%)</title><rect x="509.2" y="1011.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="512.2" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.48%)</title><rect x="509.2" y="995.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="512.2" y="1006.0"></text>
</g>
<g>
<title>__memset_avx2_erms (1 samples, 0.48%)</title><rect x="514.9" y="1043.0" width="5.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="517.9" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.48%)</title><rect x="520.6" y="1075.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="523.6" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 2.88%)</title><rect x="526.2" y="1091.0" width="34.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="529.2" y="1102.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 2.88%)</title><rect x="526.2" y="1075.0" width="34.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="529.2" y="1086.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="526.2" y="1059.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="529.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.48%)</title><rect x="526.2" y="1043.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="529.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 1.44%)</title><rect x="531.9" y="1059.0" width="17.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="534.9" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.96%)</title><rect x="531.9" y="1043.0" width="11.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="534.9" y="1054.0"></text>
</g>
<g>
<title>castP2XNode::ideal_Opcode() const (1 samples, 0.48%)</title><rect x="543.3" y="1043.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="546.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.48%)</title><rect x="548.9" y="1059.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="551.9" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.48%)</title><rect x="554.6" y="1059.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="557.6" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::verify() const (1 samples, 0.48%)</title><rect x="560.3" y="1091.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="563.3" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.48%)</title><rect x="560.3" y="1075.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="563.3" y="1086.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.48%)</title><rect x="560.3" y="1059.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="563.3" y="1070.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.48%)</title><rect x="560.3" y="1043.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="563.3" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.48%)</title><rect x="560.3" y="1027.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="563.3" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="560.3" y="1011.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="563.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 15.38%)</title><rect x="566.0" y="1091.0" width="181.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="569.0" y="1102.0">PhaseChaitin::Register_..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.48%)</title><rect x="571.6" y="1075.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="574.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.96%)</title><rect x="577.3" y="1075.0" width="11.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="580.3" y="1086.0"></text>
</g>
<g>
<title>LRG::set_mask_size(int) (1 samples, 0.48%)</title><rect x="577.3" y="1059.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="580.3" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.48%)</title><rect x="577.3" y="1043.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="580.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.48%)</title><rect x="583.0" y="1059.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="586.0" y="1070.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.48%)</title><rect x="583.0" y="1043.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="586.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.44%)</title><rect x="588.7" y="1075.0" width="17.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="591.7" y="1086.0"></text>
</g>
<g>
<title>LiveRangeMap::find_const(unsigned int) const [clone .part.118] (1 samples, 0.48%)</title><rect x="600.0" y="1059.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="603.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (14 samples, 6.73%)</title><rect x="605.7" y="1075.0" width="79.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="608.7" y="1086.0">PhaseChai..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (5 samples, 2.40%)</title><rect x="605.7" y="1059.0" width="28.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="608.7" y="1070.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::count_float_pressure(IndexSet*) (3 samples, 1.44%)</title><rect x="605.7" y="1043.0" width="17.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="608.7" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.96%)</title><rect x="605.7" y="1027.0" width="11.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="608.7" y="1038.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.48%)</title><rect x="617.0" y="1027.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="620.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::count_int_pressure(IndexSet*) (2 samples, 0.96%)</title><rect x="622.7" y="1043.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="625.7" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.48%)</title><rect x="628.4" y="1027.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="631.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (1 samples, 0.48%)</title><rect x="634.0" y="1059.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="637.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.96%)</title><rect x="639.7" y="1059.0" width="11.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="642.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.96%)</title><rect x="651.1" y="1059.0" width="11.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="654.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::count_int_pressure(IndexSet*) (2 samples, 0.96%)</title><rect x="651.1" y="1043.0" width="11.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="654.1" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="651.1" y="1027.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="654.1" y="1038.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.48%)</title><rect x="656.7" y="1027.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 1.92%)</title><rect x="662.4" y="1059.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="665.4" y="1070.0">P..</text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (4 samples, 1.92%)</title><rect x="662.4" y="1043.0" width="22.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="665.4" y="1054.0">R..</text>
</g>
<g>
<title>RegMask::is_aligned_sets(int) const (2 samples, 0.96%)</title><rect x="673.7" y="1027.0" width="11.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="676.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.48%)</title><rect x="685.1" y="1075.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="688.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.48%)</title><rect x="685.1" y="1059.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="688.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.124] (1 samples, 0.48%)</title><rect x="690.8" y="1075.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="693.8" y="1086.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.48%)</title><rect x="690.8" y="1059.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="693.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.96%)</title><rect x="696.4" y="1075.0" width="11.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="699.4" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.96%)</title><rect x="707.8" y="1075.0" width="11.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="710.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::set_was_low() (1 samples, 0.48%)</title><rect x="707.8" y="1059.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="710.8" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="707.8" y="1043.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="710.8" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.48%)</title><rect x="713.5" y="1059.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="716.5" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) [clone .part.74] (1 samples, 0.48%)</title><rect x="713.5" y="1043.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="716.5" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.48%)</title><rect x="713.5" y="1027.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="716.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.96%)</title><rect x="719.1" y="1075.0" width="11.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="722.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.48%)</title><rect x="724.8" y="1059.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="727.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.48%)</title><rect x="730.5" y="1075.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="733.5" y="1086.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.48%)</title><rect x="730.5" y="1059.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="733.5" y="1070.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.48%)</title><rect x="730.5" y="1043.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="733.5" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.48%)</title><rect x="736.2" y="1075.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="739.2" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.48%)</title><rect x="736.2" y="1059.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="739.2" y="1070.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.48%)</title><rect x="736.2" y="1043.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="739.2" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.48%)</title><rect x="741.8" y="1075.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="744.8" y="1086.0"></text>
</g>
<g>
<title>jmpDir_shortNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.48%)</title><rect x="747.5" y="1091.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="750.5" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 13.94%)</title><rect x="753.2" y="1107.0" width="164.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="756.2" y="1118.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::TracePhase::~TracePhase() (1 samples, 0.48%)</title><rect x="753.2" y="1091.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="756.2" y="1102.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.48%)</title><rect x="753.2" y="1075.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="756.2" y="1086.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.48%)</title><rect x="753.2" y="1059.0" width="5.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="756.2" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.48%)</title><rect x="758.8" y="1091.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="761.8" y="1102.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.48%)</title><rect x="758.8" y="1075.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="761.8" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) [clone .part.389] (1 samples, 0.48%)</title><rect x="758.8" y="1059.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="761.8" y="1070.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.48%)</title><rect x="758.8" y="1043.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="761.8" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.48%)</title><rect x="758.8" y="1027.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="761.8" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="758.8" y="1011.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="761.8" y="1022.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.48%)</title><rect x="758.8" y="995.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="761.8" y="1006.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (6 samples, 2.88%)</title><rect x="764.5" y="1091.0" width="34.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="767.5" y="1102.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::optimize(PhaseIterGVN&amp;, LoopOptsMode) (6 samples, 2.88%)</title><rect x="764.5" y="1075.0" width="34.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="767.5" y="1086.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (6 samples, 2.88%)</title><rect x="764.5" y="1059.0" width="34.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.5" y="1070.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="764.5" y="1043.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="770.2" y="1043.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="773.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (1 samples, 0.48%)</title><rect x="770.2" y="1027.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="773.2" y="1038.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.48%)</title><rect x="770.2" y="1011.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="773.2" y="1022.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.48%)</title><rect x="770.2" y="995.0" width="5.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="773.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.48%)</title><rect x="775.9" y="1043.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="781.5" y="1043.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="784.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) [clone .part.131] (1 samples, 0.48%)</title><rect x="781.5" y="1027.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="784.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.48%)</title><rect x="781.5" y="1011.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="784.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.48%)</title><rect x="781.5" y="995.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="784.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.48%)</title><rect x="787.2" y="1043.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="790.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.48%)</title><rect x="787.2" y="1027.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="790.2" y="1038.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseGVN*) (1 samples, 0.48%)</title><rect x="787.2" y="1011.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="790.2" y="1022.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="787.2" y="995.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="790.2" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="787.2" y="979.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="790.2" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.48%)</title><rect x="787.2" y="963.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="790.2" y="974.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.48%)</title><rect x="792.9" y="1043.0" width="5.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="795.9" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.346] (1 samples, 0.48%)</title><rect x="798.6" y="1091.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="801.6" y="1102.0"></text>
</g>
<g>
<title>NodeHash::check_no_speculative_types() (1 samples, 0.48%)</title><rect x="798.6" y="1075.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="801.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.48%)</title><rect x="804.2" y="1091.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="807.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.48%)</title><rect x="804.2" y="1075.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="807.2" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.96%)</title><rect x="809.9" y="1091.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="812.9" y="1102.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.48%)</title><rect x="809.9" y="1075.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="812.9" y="1086.0"></text>
</g>
<g>
<title>DUIterator_Fast::verify(Node const*, bool) (1 samples, 0.48%)</title><rect x="815.6" y="1075.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="818.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::optimize(PhaseIterGVN&amp;, LoopOptsMode) (6 samples, 2.88%)</title><rect x="821.2" y="1091.0" width="34.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="824.2" y="1102.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (6 samples, 2.88%)</title><rect x="821.2" y="1075.0" width="34.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="824.2" y="1086.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.44%)</title><rect x="821.2" y="1059.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="824.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.48%)</title><rect x="826.9" y="1043.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="829.9" y="1054.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.48%)</title><rect x="832.6" y="1043.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="835.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.44%)</title><rect x="838.3" y="1059.0" width="17.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="841.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (2 samples, 0.96%)</title><rect x="838.3" y="1043.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="841.3" y="1054.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.48%)</title><rect x="838.3" y="1027.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="841.3" y="1038.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.48%)</title><rect x="838.3" y="1011.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="841.3" y="1022.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.48%)</title><rect x="838.3" y="995.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="841.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.48%)</title><rect x="843.9" y="1027.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.48%)</title><rect x="843.9" y="1011.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="846.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.48%)</title><rect x="843.9" y="995.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="846.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.156] (1 samples, 0.48%)</title><rect x="843.9" y="979.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="846.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.48%)</title><rect x="849.6" y="1043.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="852.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::verify(PhaseIterGVN&amp;) (4 samples, 1.92%)</title><rect x="855.3" y="1091.0" width="22.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="858.3" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 1.92%)</title><rect x="855.3" y="1075.0" width="22.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="858.3" y="1086.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.48%)</title><rect x="855.3" y="1059.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.48%)</title><rect x="861.0" y="1059.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="864.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.96%)</title><rect x="866.6" y="1059.0" width="11.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="869.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::verify_strip_mined_scheduling(Node*, Node*) (1 samples, 0.48%)</title><rect x="872.3" y="1043.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="875.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 3.37%)</title><rect x="878.0" y="1091.0" width="39.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="881.0" y="1102.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 3.37%)</title><rect x="878.0" y="1075.0" width="39.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="881.0" y="1086.0">Pha..</text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.48%)</title><rect x="878.0" y="1059.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="881.0" y="1070.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="878.0" y="1043.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="881.0" y="1054.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="878.0" y="1027.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="881.0" y="1038.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.48%)</title><rect x="878.0" y="1011.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="881.0" y="1022.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.48%)</title><rect x="878.0" y="995.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.0" y="1006.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.48%)</title><rect x="878.0" y="979.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="881.0" y="990.0"></text>
</g>
<g>
<title>TypeAryPtr::compute_klass(bool) const (1 samples, 0.48%)</title><rect x="878.0" y="963.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="881.0" y="974.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="883.7" y="1059.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="886.7" y="1070.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) [clone .part.79] (1 samples, 0.48%)</title><rect x="883.7" y="1043.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="886.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.48%)</title><rect x="883.7" y="1027.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="886.7" y="1038.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.48%)</title><rect x="883.7" y="1011.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="886.7" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.48%)</title><rect x="889.3" y="1059.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="892.3" y="1070.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.48%)</title><rect x="889.3" y="1043.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="892.3" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.48%)</title><rect x="889.3" y="1027.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="892.3" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.176] (1 samples, 0.48%)</title><rect x="889.3" y="1011.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.3" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::TypeInstPtr(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.48%)</title><rect x="889.3" y="995.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="892.3" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.48%)</title><rect x="889.3" y="979.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="892.3" y="990.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.48%)</title><rect x="889.3" y="963.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="892.3" y="974.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.48%)</title><rect x="889.3" y="947.0" width="5.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="892.3" y="958.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="895.0" y="1059.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="898.0" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.48%)</title><rect x="895.0" y="1043.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.0" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.176] (1 samples, 0.48%)</title><rect x="895.0" y="1027.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="898.0" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::TypeInstPtr(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.48%)</title><rect x="895.0" y="1011.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.0" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.48%)</title><rect x="895.0" y="995.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.0" y="1006.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="900.7" y="1059.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.7" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.48%)</title><rect x="900.7" y="1043.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="903.7" y="1054.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.48%)</title><rect x="900.7" y="1027.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.7" y="1038.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.48%)</title><rect x="900.7" y="1011.0" width="5.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="903.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.48%)</title><rect x="906.3" y="1059.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="909.3" y="1070.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) [clone .part.114] (1 samples, 0.48%)</title><rect x="912.0" y="1059.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="915.0" y="1070.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.48%)</title><rect x="912.0" y="1043.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="915.0" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (36 samples, 17.31%)</title><rect x="917.7" y="1107.0" width="204.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="920.7" y="1118.0">ParseGenerator::generate(JV..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (36 samples, 17.31%)</title><rect x="917.7" y="1091.0" width="204.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.7" y="1102.0">Parse::Parse(JVMState*, ciM..</text>
</g>
<g>
<title>Parse::do_all_blocks() (35 samples, 16.83%)</title><rect x="917.7" y="1075.0" width="198.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="920.7" y="1086.0">Parse::do_all_blocks()</text>
</g>
<g>
<title>Parse::do_one_block() (35 samples, 16.83%)</title><rect x="917.7" y="1059.0" width="198.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.7" y="1070.0">Parse::do_one_block()</text>
</g>
<g>
<title>Parse::do_one_bytecode() (35 samples, 16.83%)</title><rect x="917.7" y="1043.0" width="198.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="920.7" y="1054.0">Parse::do_one_bytecode()</text>
</g>
<g>
<title>Parse::do_call() (34 samples, 16.35%)</title><rect x="917.7" y="1027.0" width="192.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="920.7" y="1038.0">Parse::do_call()</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.96%)</title><rect x="917.7" y="1011.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="920.7" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.96%)</title><rect x="917.7" y="995.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="920.7" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.96%)</title><rect x="917.7" y="979.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="920.7" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.96%)</title><rect x="917.7" y="963.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.7" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.96%)</title><rect x="917.7" y="947.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="920.7" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.96%)</title><rect x="917.7" y="931.0" width="11.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.7" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.96%)</title><rect x="917.7" y="915.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="920.7" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.48%)</title><rect x="917.7" y="899.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="920.7" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.48%)</title><rect x="917.7" y="883.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="920.7" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.48%)</title><rect x="917.7" y="867.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="920.7" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.48%)</title><rect x="917.7" y="851.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="920.7" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.48%)</title><rect x="917.7" y="835.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.7" y="846.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.48%)</title><rect x="917.7" y="819.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.7" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="917.7" y="803.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.7" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="917.7" y="787.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.7" y="798.0"></text>
</g>
<g>
<title>ciEnv::check_klass_accessibility(ciKlass*, Klass*) [clone .part.86] (1 samples, 0.48%)</title><rect x="917.7" y="771.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="920.7" y="782.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass const*, InstanceKlass const*, bool) (1 samples, 0.48%)</title><rect x="917.7" y="755.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="920.7" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::cast(Klass const*) (1 samples, 0.48%)</title><rect x="917.7" y="739.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.7" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::meet(ciTypeFlow::StateVector const*) (1 samples, 0.48%)</title><rect x="923.4" y="899.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="926.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (22 samples, 10.58%)</title><rect x="929.0" y="1011.0" width="124.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="932.0" y="1022.0">ParseGenerator:..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (22 samples, 10.58%)</title><rect x="929.0" y="995.0" width="124.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="932.0" y="1006.0">Parse::Parse(JV..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.48%)</title><rect x="929.0" y="979.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.0" y="990.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.48%)</title><rect x="929.0" y="963.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="932.0" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="929.0" y="947.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="932.0" y="958.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.48%)</title><rect x="929.0" y="931.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="932.0" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.48%)</title><rect x="929.0" y="915.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="932.0" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="929.0" y="899.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="932.0" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.48%)</title><rect x="929.0" y="883.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="932.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (21 samples, 10.10%)</title><rect x="934.7" y="979.0" width="119.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.7" y="990.0">Parse::do_all_b..</text>
</g>
<g>
<title>Parse::do_one_block() (21 samples, 10.10%)</title><rect x="934.7" y="963.0" width="119.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.7" y="974.0">Parse::do_one_b..</text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.48%)</title><rect x="934.7" y="947.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="937.7" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.48%)</title><rect x="934.7" y="931.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="937.7" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.48%)</title><rect x="934.7" y="915.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.7" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="934.7" y="899.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="937.7" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="934.7" y="883.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="937.7" y="894.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.48%)</title><rect x="934.7" y="867.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="937.7" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.48%)</title><rect x="934.7" y="851.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="937.7" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.48%)</title><rect x="934.7" y="835.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="937.7" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.48%)</title><rect x="934.7" y="819.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.7" y="830.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.48%)</title><rect x="934.7" y="803.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (20 samples, 9.62%)</title><rect x="940.4" y="947.0" width="113.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="943.4" y="958.0">Parse::do_one_..</text>
</g>
<g>
<title>Parse::do_call() (19 samples, 9.13%)</title><rect x="940.4" y="931.0" width="107.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="943.4" y="942.0">Parse::do_cal..</text>
</g>
<g>
<title>GraphKit::map_not_null() const [clone .isra.180] (1 samples, 0.48%)</title><rect x="940.4" y="915.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="943.4" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 8.17%)</title><rect x="946.1" y="915.0" width="96.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.1" y="926.0">ParseGenera..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 8.17%)</title><rect x="946.1" y="899.0" width="96.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="949.1" y="910.0">Parse::Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 8.17%)</title><rect x="946.1" y="883.0" width="96.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="949.1" y="894.0">Parse::do_a..</text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 8.17%)</title><rect x="946.1" y="867.0" width="96.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.1" y="878.0">Parse::do_o..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 8.17%)</title><rect x="946.1" y="851.0" width="96.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="949.1" y="862.0">Parse::do_o..</text>
</g>
<g>
<title>Parse::do_call() (17 samples, 8.17%)</title><rect x="946.1" y="835.0" width="96.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.1" y="846.0">Parse::do_c..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.96%)</title><rect x="946.1" y="819.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="949.1" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.96%)</title><rect x="946.1" y="803.0" width="11.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="949.1" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.96%)</title><rect x="946.1" y="787.0" width="11.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.1" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.96%)</title><rect x="946.1" y="771.0" width="11.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="949.1" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.96%)</title><rect x="946.1" y="755.0" width="11.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="949.1" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.96%)</title><rect x="946.1" y="739.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.1" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.96%)</title><rect x="946.1" y="723.0" width="11.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.1" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.96%)</title><rect x="946.1" y="707.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.1" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.48%)</title><rect x="946.1" y="691.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="949.1" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.48%)</title><rect x="946.1" y="675.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="949.1" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.48%)</title><rect x="946.1" y="659.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="949.1" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.48%)</title><rect x="946.1" y="643.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="949.1" y="654.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.48%)</title><rect x="946.1" y="627.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="949.1" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="946.1" y="611.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="949.1" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="946.1" y="595.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="949.1" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.48%)</title><rect x="946.1" y="579.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="949.1" y="590.0"></text>
</g>
<g>
<title>SymbolTable::new_symbol(char const*, int) (1 samples, 0.48%)</title><rect x="946.1" y="563.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="949.1" y="574.0"></text>
</g>
<g>
<title>SymbolTable::lookup_common(char const*, int, unsigned int) (1 samples, 0.48%)</title><rect x="946.1" y="547.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="949.1" y="558.0"></text>
</g>
<g>
<title>SymbolTable::lookup_shared(char const*, int, unsigned int) (1 samples, 0.48%)</title><rect x="946.1" y="531.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.1" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.48%)</title><rect x="951.7" y="691.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="954.7" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.48%)</title><rect x="951.7" y="675.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="954.7" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="951.7" y="659.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.7" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="951.7" y="643.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="954.7" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.48%)</title><rect x="951.7" y="627.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.7" y="638.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.48%)</title><rect x="957.4" y="819.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.4" y="830.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.48%)</title><rect x="957.4" y="803.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.4" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="957.4" y="787.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.4" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.48%)</title><rect x="957.4" y="771.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.4" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 4.81%)</title><rect x="963.1" y="819.0" width="56.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.1" y="830.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 4.81%)</title><rect x="963.1" y="803.0" width="56.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="966.1" y="814.0">Parse:..</text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.48%)</title><rect x="963.1" y="787.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="966.1" y="798.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.48%)</title><rect x="963.1" y="771.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.1" y="782.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.48%)</title><rect x="963.1" y="755.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="966.1" y="766.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.48%)</title><rect x="963.1" y="739.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.1" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.48%)</title><rect x="963.1" y="723.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="966.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.85%)</title><rect x="968.7" y="787.0" width="45.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="971.7" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.85%)</title><rect x="968.7" y="771.0" width="45.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.7" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.85%)</title><rect x="968.7" y="755.0" width="45.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="971.7" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.37%)</title><rect x="968.7" y="739.0" width="39.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.7" y="750.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.88%)</title><rect x="968.7" y="723.0" width="34.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="971.7" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.88%)</title><rect x="968.7" y="707.0" width="34.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.7" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.88%)</title><rect x="968.7" y="691.0" width="34.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.7" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.88%)</title><rect x="968.7" y="675.0" width="34.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.7" y="686.0">Pa..</text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.48%)</title><rect x="968.7" y="659.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.7" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_field_at_bci(int, bool&amp;) (1 samples, 0.48%)</title><rect x="968.7" y="643.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.7" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.48%)</title><rect x="968.7" y="627.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.7" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.48%)</title><rect x="968.7" y="611.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.48%)</title><rect x="968.7" y="595.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.7" y="606.0"></text>
</g>
<g>
<title>ciConstantPoolCache::get(int) (1 samples, 0.48%)</title><rect x="968.7" y="579.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="971.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.40%)</title><rect x="974.4" y="659.0" width="28.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="977.4" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.92%)</title><rect x="974.4" y="643.0" width="22.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="977.4" y="654.0">P..</text>
</g>
<g>
<title>GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code) (1 samples, 0.48%)</title><rect x="974.4" y="627.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="977.4" y="638.0"></text>
</g>
<g>
<title>ciMethod::argument_profiled_type(int, int, ciKlass*&amp;, ProfilePtrKind&amp;) (1 samples, 0.48%)</title><rect x="974.4" y="611.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="977.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.44%)</title><rect x="980.1" y="627.0" width="17.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.44%)</title><rect x="980.1" y="611.0" width="17.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="983.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.44%)</title><rect x="980.1" y="595.0" width="17.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="983.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.44%)</title><rect x="980.1" y="579.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.44%)</title><rect x="980.1" y="563.0" width="17.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="983.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.44%)</title><rect x="980.1" y="547.0" width="17.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.1" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.48%)</title><rect x="980.1" y="531.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="983.1" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.48%)</title><rect x="980.1" y="515.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.1" y="526.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.48%)</title><rect x="980.1" y="499.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="983.1" y="510.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.48%)</title><rect x="980.1" y="483.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="983.1" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.48%)</title><rect x="980.1" y="467.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="983.1" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.48%)</title><rect x="980.1" y="451.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="983.1" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.48%)</title><rect x="980.1" y="435.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="983.1" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.48%)</title><rect x="980.1" y="419.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="983.1" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.48%)</title><rect x="980.1" y="403.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.1" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.48%)</title><rect x="980.1" y="387.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.1" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.48%)</title><rect x="980.1" y="371.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.1" y="382.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.48%)</title><rect x="980.1" y="355.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="983.1" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.48%)</title><rect x="980.1" y="339.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.1" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.48%)</title><rect x="980.1" y="323.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.1" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.48%)</title><rect x="980.1" y="307.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.1" y="318.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.48%)</title><rect x="980.1" y="291.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="983.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="985.8" y="531.0" width="11.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.96%)</title><rect x="985.8" y="515.0" width="11.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.96%)</title><rect x="985.8" y="499.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="985.8" y="483.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="985.8" y="467.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="985.8" y="451.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="985.8" y="435.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="985.8" y="419.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="985.8" y="403.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="985.8" y="387.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="985.8" y="371.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="985.8" y="355.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.8" y="366.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.48%)</title><rect x="985.8" y="339.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.8" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="985.8" y="323.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="988.8" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="985.8" y="307.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.8" y="318.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.48%)</title><rect x="985.8" y="291.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.8" y="302.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.48%)</title><rect x="991.4" y="483.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="994.4" y="494.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.48%)</title><rect x="991.4" y="467.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.4" y="478.0"></text>
</g>
<g>
<title>Parse::Block::local_type_at(int) const (1 samples, 0.48%)</title><rect x="991.4" y="451.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="994.4" y="462.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.48%)</title><rect x="991.4" y="435.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="994.4" y="446.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.48%)</title><rect x="991.4" y="419.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.4" y="430.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.48%)</title><rect x="991.4" y="403.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.4" y="414.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.48%)</title><rect x="997.1" y="643.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.1" y="654.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.48%)</title><rect x="997.1" y="627.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.1" y="638.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.48%)</title><rect x="997.1" y="611.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.1" y="622.0"></text>
</g>
<g>
<title>Copy::conjoint_words_to_lower(HeapWordImpl* const*, HeapWordImpl**, unsigned long) (1 samples, 0.48%)</title><rect x="997.1" y="595.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1000.1" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1002.8" y="723.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1005.8" y="734.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.48%)</title><rect x="1002.8" y="707.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1005.8" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.48%)</title><rect x="1002.8" y="691.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.8" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.48%)</title><rect x="1002.8" y="675.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="1002.8" y="659.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.8" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.48%)</title><rect x="1002.8" y="643.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1005.8" y="654.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.48%)</title><rect x="1002.8" y="627.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.8" y="638.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.48%)</title><rect x="1002.8" y="611.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.8" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.48%)</title><rect x="1002.8" y="595.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1005.8" y="606.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.48%)</title><rect x="1002.8" y="579.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.8" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.48%)</title><rect x="1002.8" y="563.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1005.8" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.48%)</title><rect x="1002.8" y="547.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.8" y="558.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*) (1 samples, 0.48%)</title><rect x="1002.8" y="531.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1005.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.48%)</title><rect x="1008.5" y="739.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1011.5" y="750.0"></text>
</g>
<g>
<title>Parse::maybe_add_predicate_after_if(Parse::Block*) (1 samples, 0.48%)</title><rect x="1008.5" y="723.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1011.5" y="734.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.48%)</title><rect x="1008.5" y="707.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.5" y="718.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.48%)</title><rect x="1008.5" y="691.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1011.5" y="702.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.48%)</title><rect x="1008.5" y="675.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1011.5" y="686.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.48%)</title><rect x="1008.5" y="659.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.5" y="670.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.48%)</title><rect x="1008.5" y="643.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.5" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.48%)</title><rect x="1008.5" y="627.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1011.5" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.48%)</title><rect x="1008.5" y="611.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.5" y="622.0"></text>
</g>
<g>
<title>Node::init_req(unsigned int, Node*) (1 samples, 0.48%)</title><rect x="1008.5" y="595.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_method_entry() (1 samples, 0.48%)</title><rect x="1014.1" y="787.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1017.1" y="798.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_parameters_for_speculation() (1 samples, 0.48%)</title><rect x="1014.1" y="771.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.1" y="782.0"></text>
</g>
<g>
<title>PhaseTransform::type(Node const*) const (1 samples, 0.48%)</title><rect x="1014.1" y="755.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.1" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.92%)</title><rect x="1019.8" y="819.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.8" y="830.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.92%)</title><rect x="1019.8" y="803.0" width="22.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1022.8" y="814.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.92%)</title><rect x="1019.8" y="787.0" width="22.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.8" y="798.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.92%)</title><rect x="1019.8" y="771.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1022.8" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.92%)</title><rect x="1019.8" y="755.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.8" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.92%)</title><rect x="1019.8" y="739.0" width="22.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.8" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.92%)</title><rect x="1019.8" y="723.0" width="22.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.8" y="734.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.44%)</title><rect x="1019.8" y="707.0" width="17.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1022.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.44%)</title><rect x="1019.8" y="691.0" width="17.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1022.8" y="702.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.48%)</title><rect x="1019.8" y="675.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1022.8" y="686.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.48%)</title><rect x="1019.8" y="659.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.8" y="670.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="1019.8" y="643.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.8" y="654.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.48%)</title><rect x="1019.8" y="627.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.8" y="638.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.48%)</title><rect x="1019.8" y="611.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1022.8" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.48%)</title><rect x="1019.8" y="595.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.8" y="606.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.48%)</title><rect x="1019.8" y="579.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.96%)</title><rect x="1025.5" y="675.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.96%)</title><rect x="1025.5" y="659.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.96%)</title><rect x="1025.5" y="643.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.96%)</title><rect x="1025.5" y="627.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="1025.5" y="611.0" width="11.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.96%)</title><rect x="1025.5" y="595.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1028.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1025.5" y="579.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1025.5" y="563.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1025.5" y="547.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1028.5" y="558.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.48%)</title><rect x="1025.5" y="531.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1028.5" y="542.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.48%)</title><rect x="1025.5" y="515.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.5" y="526.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.48%)</title><rect x="1025.5" y="499.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.5" y="510.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.48%)</title><rect x="1025.5" y="483.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.5" y="494.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.48%)</title><rect x="1025.5" y="467.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.5" y="478.0"></text>
</g>
<g>
<title>GraphKit::sync_kit(IdealKit&amp;) (1 samples, 0.48%)</title><rect x="1025.5" y="451.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.5" y="462.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.48%)</title><rect x="1025.5" y="435.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1028.5" y="446.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.48%)</title><rect x="1025.5" y="419.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.5" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.48%)</title><rect x="1025.5" y="403.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1028.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.48%)</title><rect x="1031.2" y="579.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.2" y="590.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.48%)</title><rect x="1031.2" y="563.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.2" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1036.8" y="707.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1036.8" y="691.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1039.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1036.8" y="675.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1036.8" y="659.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1036.8" y="643.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1039.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1036.8" y="627.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1036.8" y="611.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1039.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1036.8" y="595.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1039.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1036.8" y="579.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1039.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1036.8" y="563.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1036.8" y="547.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1039.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1036.8" y="531.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1039.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1036.8" y="515.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1036.8" y="499.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1036.8" y="483.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1036.8" y="467.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1039.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1036.8" y="451.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1039.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1036.8" y="435.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1036.8" y="419.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1039.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1036.8" y="403.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1036.8" y="387.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1036.8" y="371.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1036.8" y="355.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1039.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1036.8" y="339.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1036.8" y="323.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1039.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1036.8" y="307.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1039.8" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1036.8" y="291.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1039.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1036.8" y="275.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1036.8" y="259.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1039.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1036.8" y="243.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1036.8" y="227.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1039.8" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1036.8" y="211.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1039.8" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1036.8" y="195.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1039.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.48%)</title><rect x="1036.8" y="179.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.8" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1036.8" y="163.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1039.8" y="174.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const [clone .isra.46] [clone .constprop.122] (1 samples, 0.48%)</title><rect x="1036.8" y="147.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1039.8" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1042.5" y="915.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1042.5" y="899.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1042.5" y="883.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1042.5" y="867.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1045.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1042.5" y="851.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1045.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1042.5" y="835.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1045.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1042.5" y="819.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1042.5" y="803.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1042.5" y="787.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.5" y="798.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.48%)</title><rect x="1042.5" y="771.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.5" y="782.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.48%)</title><rect x="1042.5" y="755.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.5" y="766.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.48%)</title><rect x="1042.5" y="739.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1045.5" y="750.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.48%)</title><rect x="1042.5" y="723.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1045.5" y="734.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.48%)</title><rect x="1042.5" y="707.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1045.5" y="718.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.48%)</title><rect x="1042.5" y="691.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.5" y="702.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.48%)</title><rect x="1042.5" y="675.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1045.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.48%)</title><rect x="1048.2" y="931.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.48%)</title><rect x="1048.2" y="915.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.2" y="926.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.48%)</title><rect x="1048.2" y="899.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.2" y="910.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.48%)</title><rect x="1048.2" y="883.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.2" y="894.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.48%)</title><rect x="1048.2" y="867.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.2" y="878.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.48%)</title><rect x="1048.2" y="851.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.2" y="862.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (1 samples, 0.48%)</title><rect x="1048.2" y="835.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1051.2" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1048.2" y="819.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.2" y="830.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="1048.2" y="803.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.2" y="814.0"></text>
</g>
<g>
<title>InitializeNode::capture_store(StoreNode*, long, PhaseTransform*, bool) (1 samples, 0.48%)</title><rect x="1048.2" y="787.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.2" y="798.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.193] (1 samples, 0.48%)</title><rect x="1048.2" y="771.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.2" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.48%)</title><rect x="1048.2" y="755.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.2" y="766.0"></text>
</g>
<g>
<title>MergeMemNode::is_empty_memory(Node*) const (1 samples, 0.48%)</title><rect x="1048.2" y="739.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.2" y="750.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.48%)</title><rect x="1048.2" y="723.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.2" y="734.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.48%)</title><rect x="1048.2" y="707.0" width="5.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1051.2" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (10 samples, 4.81%)</title><rect x="1053.8" y="1011.0" width="56.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.8" y="1022.0">Predic..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 4.81%)</title><rect x="1053.8" y="995.0" width="56.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.8" y="1006.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 4.81%)</title><rect x="1053.8" y="979.0" width="56.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1056.8" y="990.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 4.81%)</title><rect x="1053.8" y="963.0" width="56.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.8" y="974.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 4.81%)</title><rect x="1053.8" y="947.0" width="56.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1056.8" y="958.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 4.81%)</title><rect x="1053.8" y="931.0" width="56.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.8" y="942.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 4.81%)</title><rect x="1053.8" y="915.0" width="56.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.8" y="926.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.88%)</title><rect x="1053.8" y="899.0" width="34.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.8" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.88%)</title><rect x="1053.8" y="883.0" width="34.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.8" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.88%)</title><rect x="1053.8" y="867.0" width="34.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.8" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.88%)</title><rect x="1053.8" y="851.0" width="34.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.8" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.88%)</title><rect x="1053.8" y="835.0" width="34.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.8" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.88%)</title><rect x="1053.8" y="819.0" width="34.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1056.8" y="830.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.92%)</title><rect x="1053.8" y="803.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.8" y="814.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.92%)</title><rect x="1053.8" y="787.0" width="22.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.8" y="798.0">P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.48%)</title><rect x="1053.8" y="771.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.8" y="782.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.48%)</title><rect x="1053.8" y="755.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.8" y="766.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.48%)</title><rect x="1053.8" y="739.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.8" y="750.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1053.8" y="723.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.8" y="734.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.48%)</title><rect x="1053.8" y="707.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.8" y="718.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="1053.8" y="691.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.8" y="702.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="1053.8" y="675.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.8" y="686.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.48%)</title><rect x="1053.8" y="659.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.8" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.48%)</title><rect x="1053.8" y="643.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.44%)</title><rect x="1059.5" y="771.0" width="17.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1062.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.44%)</title><rect x="1059.5" y="755.0" width="17.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1062.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.44%)</title><rect x="1059.5" y="739.0" width="17.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.96%)</title><rect x="1059.5" y="723.0" width="11.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1062.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="1059.5" y="707.0" width="11.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1062.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.96%)</title><rect x="1059.5" y="691.0" width="11.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.5" y="702.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.48%)</title><rect x="1059.5" y="675.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.5" y="686.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.48%)</title><rect x="1059.5" y="659.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.5" y="670.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.48%)</title><rect x="1059.5" y="643.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.5" y="654.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long) [clone .constprop.212] (1 samples, 0.48%)</title><rect x="1059.5" y="627.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1062.5" y="638.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.48%)</title><rect x="1059.5" y="611.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1065.2" y="675.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1068.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1065.2" y="659.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1065.2" y="643.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1065.2" y="627.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1065.2" y="611.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1065.2" y="595.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1065.2" y="579.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1065.2" y="563.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1065.2" y="547.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1065.2" y="531.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1065.2" y="515.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1065.2" y="499.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1065.2" y="483.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1065.2" y="467.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1065.2" y="451.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1068.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1065.2" y="435.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1068.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1065.2" y="419.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.2" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1065.2" y="403.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1065.2" y="387.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1065.2" y="371.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1065.2" y="355.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1065.2" y="339.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1065.2" y="323.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1065.2" y="307.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1065.2" y="291.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1065.2" y="275.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1068.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1065.2" y="259.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.48%)</title><rect x="1065.2" y="243.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.2" y="254.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.48%)</title><rect x="1065.2" y="227.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.2" y="238.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.48%)</title><rect x="1065.2" y="211.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.48%)</title><rect x="1070.9" y="723.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.48%)</title><rect x="1070.9" y="707.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.9" y="718.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1070.9" y="691.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.9" y="702.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.48%)</title><rect x="1070.9" y="675.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.9" y="686.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.48%)</title><rect x="1070.9" y="659.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.9" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="1070.9" y="643.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.9" y="654.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.48%)</title><rect x="1070.9" y="627.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.9" y="638.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.48%)</title><rect x="1070.9" y="611.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.9" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="1076.5" y="803.0" width="11.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="1076.5" y="787.0" width="11.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.96%)</title><rect x="1076.5" y="771.0" width="11.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.96%)</title><rect x="1076.5" y="755.0" width="11.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.96%)</title><rect x="1076.5" y="739.0" width="11.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.96%)</title><rect x="1076.5" y="723.0" width="11.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.96%)</title><rect x="1076.5" y="707.0" width="11.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.5" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="1076.5" y="691.0" width="11.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.96%)</title><rect x="1076.5" y="675.0" width="11.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.96%)</title><rect x="1076.5" y="659.0" width="11.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.5" y="670.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.48%)</title><rect x="1076.5" y="643.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.5" y="654.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.48%)</title><rect x="1076.5" y="627.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.5" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.48%)</title><rect x="1076.5" y="611.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.5" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.48%)</title><rect x="1076.5" y="595.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.5" y="606.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.48%)</title><rect x="1076.5" y="579.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.5" y="590.0"></text>
</g>
<g>
<title>Node::Init(int) (1 samples, 0.48%)</title><rect x="1076.5" y="563.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1082.2" y="643.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1082.2" y="627.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1082.2" y="611.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1082.2" y="595.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1082.2" y="579.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1082.2" y="563.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1082.2" y="547.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1082.2" y="531.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1082.2" y="515.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.48%)</title><rect x="1082.2" y="499.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1082.2" y="483.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1082.2" y="467.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1082.2" y="451.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1082.2" y="435.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1082.2" y="419.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.2" y="430.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.48%)</title><rect x="1082.2" y="403.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.2" y="414.0"></text>
</g>
<g>
<title>GraphKit::stop_and_kill_map() (1 samples, 0.48%)</title><rect x="1082.2" y="387.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.2" y="398.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.48%)</title><rect x="1082.2" y="371.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.2" y="382.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.48%)</title><rect x="1082.2" y="355.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.2" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.92%)</title><rect x="1087.9" y="899.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.9" y="910.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.92%)</title><rect x="1087.9" y="883.0" width="22.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.9" y="894.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.92%)</title><rect x="1087.9" y="867.0" width="22.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.9" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.92%)</title><rect x="1087.9" y="851.0" width="22.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.9" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.92%)</title><rect x="1087.9" y="835.0" width="22.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.9" y="846.0">P..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.48%)</title><rect x="1087.9" y="819.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.9" y="830.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.48%)</title><rect x="1087.9" y="803.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.9" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.48%)</title><rect x="1087.9" y="787.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.9" y="798.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.48%)</title><rect x="1087.9" y="771.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.9" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.48%)</title><rect x="1087.9" y="755.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.9" y="766.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.48%)</title><rect x="1087.9" y="739.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.9" y="750.0"></text>
</g>
<g>
<title>Compile::record_modified_node(Node*) (1 samples, 0.48%)</title><rect x="1087.9" y="723.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.44%)</title><rect x="1093.6" y="819.0" width="17.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.44%)</title><rect x="1093.6" y="803.0" width="17.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.44%)</title><rect x="1093.6" y="787.0" width="17.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.44%)</title><rect x="1093.6" y="771.0" width="17.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.44%)</title><rect x="1093.6" y="755.0" width="17.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.44%)</title><rect x="1093.6" y="739.0" width="17.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.44%)</title><rect x="1093.6" y="723.0" width="17.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.44%)</title><rect x="1093.6" y="707.0" width="17.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.44%)</title><rect x="1093.6" y="691.0" width="17.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.44%)</title><rect x="1093.6" y="675.0" width="17.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.96%)</title><rect x="1093.6" y="659.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.96%)</title><rect x="1093.6" y="643.0" width="11.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.96%)</title><rect x="1093.6" y="627.0" width="11.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.96%)</title><rect x="1093.6" y="611.0" width="11.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.6" y="622.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1093.6" y="595.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.6" y="606.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_isInterrupted() (1 samples, 0.48%)</title><rect x="1093.6" y="579.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.6" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1093.6" y="563.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.6" y="574.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.48%)</title><rect x="1093.6" y="547.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.48%)</title><rect x="1099.2" y="595.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.48%)</title><rect x="1099.2" y="579.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.48%)</title><rect x="1099.2" y="563.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.48%)</title><rect x="1099.2" y="547.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.48%)</title><rect x="1099.2" y="531.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.48%)</title><rect x="1099.2" y="515.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.2" y="526.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.48%)</title><rect x="1099.2" y="499.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.2" y="510.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.48%)</title><rect x="1099.2" y="483.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.2" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.48%)</title><rect x="1099.2" y="467.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.2" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.48%)</title><rect x="1099.2" y="451.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.2" y="462.0"></text>
</g>
<g>
<title>Node::init_req(unsigned int, Node*) (1 samples, 0.48%)</title><rect x="1099.2" y="435.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.2" y="446.0"></text>
</g>
<g>
<title>Parse::show_parse_info() (1 samples, 0.48%)</title><rect x="1104.9" y="659.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.9" y="670.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.48%)</title><rect x="1104.9" y="643.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.9" y="654.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.48%)</title><rect x="1104.9" y="627.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.48%)</title><rect x="1110.6" y="1027.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.48%)</title><rect x="1110.6" y="1011.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.6" y="1022.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.48%)</title><rect x="1110.6" y="995.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.6" y="1006.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.48%)</title><rect x="1110.6" y="979.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.6" y="990.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.48%)</title><rect x="1110.6" y="963.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.6" y="974.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.48%)</title><rect x="1110.6" y="947.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.6" y="958.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.48%)</title><rect x="1110.6" y="931.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.6" y="942.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.48%)</title><rect x="1110.6" y="915.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.6" y="926.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1110.6" y="899.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.6" y="910.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.48%)</title><rect x="1110.6" y="883.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.6" y="894.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.48%)</title><rect x="1110.6" y="867.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.6" y="878.0"></text>
</g>
<g>
<title>MemNode::check_if_adr_maybe_raw(Node*) (1 samples, 0.48%)</title><rect x="1110.6" y="851.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.6" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.48%)</title><rect x="1110.6" y="835.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.6" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.176] (1 samples, 0.48%)</title><rect x="1110.6" y="819.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.48%)</title><rect x="1116.2" y="1075.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.2" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.48%)</title><rect x="1116.2" y="1059.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.2" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.48%)</title><rect x="1116.2" y="1043.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.2" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.48%)</title><rect x="1116.2" y="1027.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.2" y="1038.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.48%)</title><rect x="1121.9" y="1139.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.9" y="1150.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.48%)</title><rect x="1121.9" y="1123.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.9" y="1134.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.48%)</title><rect x="1121.9" y="1107.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1124.9" y="1118.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.48%)</title><rect x="1127.6" y="1155.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.6" y="1166.0"></text>
</g>
<g>
<title>[tid=4726] (4 samples, 1.92%)</title><rect x="1133.3" y="1251.0" width="22.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1136.3" y="1262.0">[..</text>
</g>
<g>
<title>start_thread (4 samples, 1.92%)</title><rect x="1133.3" y="1235.0" width="22.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1136.3" y="1246.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 1.92%)</title><rect x="1133.3" y="1219.0" width="22.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1136.3" y="1230.0">t..</text>
</g>
<g>
<title>Thread::call_run() (4 samples, 1.92%)</title><rect x="1133.3" y="1203.0" width="22.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.3" y="1214.0">T..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 1.92%)</title><rect x="1133.3" y="1187.0" width="22.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.3" y="1198.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (4 samples, 1.92%)</title><rect x="1133.3" y="1171.0" width="22.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.3" y="1182.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (4 samples, 1.92%)</title><rect x="1133.3" y="1155.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.3" y="1166.0">C..</text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 1.92%)</title><rect x="1133.3" y="1139.0" width="22.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.3" y="1150.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 1.92%)</title><rect x="1133.3" y="1123.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.3" y="1134.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.92%)</title><rect x="1133.3" y="1107.0" width="22.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.3" y="1118.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() [clone .part.107] (4 samples, 1.92%)</title><rect x="1133.3" y="1091.0" width="22.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.3" y="1102.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.106] (2 samples, 0.96%)</title><rect x="1133.3" y="1075.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.3" y="1086.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.96%)</title><rect x="1133.3" y="1059.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.96%)</title><rect x="1133.3" y="1043.0" width="11.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.3" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.96%)</title><rect x="1133.3" y="1027.0" width="11.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.3" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.96%)</title><rect x="1133.3" y="1011.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.96%)</title><rect x="1133.3" y="995.0" width="11.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.3" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.96%)</title><rect x="1133.3" y="979.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.3" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.96%)</title><rect x="1133.3" y="963.0" width="11.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.3" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.96%)</title><rect x="1133.3" y="947.0" width="11.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.3" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.96%)</title><rect x="1133.3" y="931.0" width="11.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.3" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.96%)</title><rect x="1133.3" y="915.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.3" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.96%)</title><rect x="1133.3" y="899.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.48%)</title><rect x="1133.3" y="883.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.3" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.48%)</title><rect x="1133.3" y="867.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.48%)</title><rect x="1133.3" y="851.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.3" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.48%)</title><rect x="1133.3" y="835.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.3" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.48%)</title><rect x="1133.3" y="819.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.3" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.48%)</title><rect x="1133.3" y="803.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.3" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.48%)</title><rect x="1133.3" y="787.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.3" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.48%)</title><rect x="1133.3" y="771.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.3" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.48%)</title><rect x="1133.3" y="755.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.3" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.48%)</title><rect x="1133.3" y="739.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.3" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.48%)</title><rect x="1133.3" y="723.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.3" y="734.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.48%)</title><rect x="1133.3" y="707.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.3" y="718.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.48%)</title><rect x="1133.3" y="691.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.3" y="702.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.48%)</title><rect x="1133.3" y="675.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.3" y="686.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.48%)</title><rect x="1133.3" y="659.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.3" y="670.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.48%)</title><rect x="1133.3" y="643.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.3" y="654.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.48%)</title><rect x="1133.3" y="627.0" width="5.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1136.3" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_intrinsics(ciMethod*, bool) [clone .constprop.387] (1 samples, 0.48%)</title><rect x="1138.9" y="883.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.9" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::build_graph_for_intrinsic(ciMethod*, bool) (1 samples, 0.48%)</title><rect x="1138.9" y="867.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.9" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::null_check(Instruction*) (1 samples, 0.48%)</title><rect x="1138.9" y="851.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.9" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::copy_state_for_exception_with_bci(int) (1 samples, 0.48%)</title><rect x="1138.9" y="835.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.9" y="846.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.48%)</title><rect x="1138.9" y="819.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.9" y="830.0"></text>
</g>
<g>
<title>ValueStack::verify() (1 samples, 0.48%)</title><rect x="1138.9" y="803.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.9" y="814.0"></text>
</g>
<g>
<title>ValueStack::verify() (1 samples, 0.48%)</title><rect x="1138.9" y="787.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.9" y="798.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.48%)</title><rect x="1138.9" y="771.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.9" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.48%)</title><rect x="1138.9" y="755.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.9" y="766.0"></text>
</g>
<g>
<title>BitMap::is_same(BitMap const&amp;) const (1 samples, 0.48%)</title><rect x="1138.9" y="739.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.9" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.48%)</title><rect x="1144.6" y="1075.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.6" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.48%)</title><rect x="1144.6" y="1059.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.6" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (1 samples, 0.48%)</title><rect x="1144.6" y="1043.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.6" y="1054.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.48%)</title><rect x="1150.3" y="1075.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="1086.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.48%)</title><rect x="1150.3" y="1059.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.3" y="1070.0"></text>
</g>
<g>
<title>LinearScan::verify() (1 samples, 0.48%)</title><rect x="1150.3" y="1043.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.3" y="1054.0"></text>
</g>
<g>
<title>LinearScan::verify_registers() (1 samples, 0.48%)</title><rect x="1150.3" y="1027.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.3" y="1038.0"></text>
</g>
<g>
<title>RegisterVerifier::verify(BlockBegin*) (1 samples, 0.48%)</title><rect x="1150.3" y="1011.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.3" y="1022.0"></text>
</g>
<g>
<title>RegisterVerifier::process_block(BlockBegin*) (1 samples, 0.48%)</title><rect x="1150.3" y="995.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.3" y="1006.0"></text>
</g>
<g>
<title>RegisterVerifier::process_operations(LIR_List*, GrowableArray&lt;Interval*&gt;*) (1 samples, 0.48%)</title><rect x="1150.3" y="979.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="990.0"></text>
</g>
<g>
<title>[tid=4727] (2 samples, 0.96%)</title><rect x="1156.0" y="1251.0" width="11.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1159.0" y="1262.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.48%)</title><rect x="1156.0" y="1235.0" width="5.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1159.0" y="1246.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.48%)</title><rect x="1156.0" y="1219.0" width="5.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1159.0" y="1230.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.48%)</title><rect x="1156.0" y="1203.0" width="5.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1159.0" y="1214.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.48%)</title><rect x="1156.0" y="1187.0" width="5.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1159.0" y="1198.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.48%)</title><rect x="1156.0" y="1171.0" width="5.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1159.0" y="1182.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.48%)</title><rect x="1156.0" y="1155.0" width="5.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1159.0" y="1166.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.48%)</title><rect x="1156.0" y="1139.0" width="5.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1159.0" y="1150.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.48%)</title><rect x="1156.0" y="1123.0" width="5.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1159.0" y="1134.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.48%)</title><rect x="1156.0" y="1107.0" width="5.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1159.0" y="1118.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.48%)</title><rect x="1161.6" y="1235.0" width="5.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1164.6" y="1246.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.48%)</title><rect x="1161.6" y="1219.0" width="5.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1164.6" y="1230.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.48%)</title><rect x="1161.6" y="1203.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="1214.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.48%)</title><rect x="1161.6" y="1187.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.6" y="1198.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.48%)</title><rect x="1161.6" y="1171.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.6" y="1182.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.48%)</title><rect x="1161.6" y="1155.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.6" y="1166.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.48%)</title><rect x="1161.6" y="1139.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.6" y="1150.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 0.48%)</title><rect x="1161.6" y="1123.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.6" y="1134.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches(bool) (1 samples, 0.48%)</title><rect x="1161.6" y="1107.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="1118.0"></text>
</g>
<g>
<title>[tid=4731] (1 samples, 0.48%)</title><rect x="1167.3" y="1251.0" width="5.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1170.3" y="1262.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.48%)</title><rect x="1167.3" y="1235.0" width="5.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1170.3" y="1246.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.48%)</title><rect x="1167.3" y="1219.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1170.3" y="1230.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.48%)</title><rect x="1167.3" y="1203.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.3" y="1214.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.48%)</title><rect x="1167.3" y="1187.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.3" y="1198.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.48%)</title><rect x="1167.3" y="1171.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.3" y="1182.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.48%)</title><rect x="1167.3" y="1155.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.3" y="1166.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.48%)</title><rect x="1167.3" y="1139.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.3" y="1150.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.48%)</title><rect x="1167.3" y="1123.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.3" y="1134.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.48%)</title><rect x="1167.3" y="1107.0" width="5.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1170.3" y="1118.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.48%)</title><rect x="1167.3" y="1091.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.3" y="1102.0"></text>
</g>
<g>
<title>[tid=4732] (3 samples, 1.44%)</title><rect x="1173.0" y="1251.0" width="17.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1176.0" y="1262.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.48%)</title><rect x="1173.0" y="1235.0" width="5.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1176.0" y="1246.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.96%)</title><rect x="1178.7" y="1235.0" width="11.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1181.7" y="1246.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.96%)</title><rect x="1178.7" y="1219.0" width="11.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1181.7" y="1230.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.96%)</title><rect x="1178.7" y="1203.0" width="11.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="1214.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.96%)</title><rect x="1178.7" y="1187.0" width="11.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="1198.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.96%)</title><rect x="1178.7" y="1171.0" width="11.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.7" y="1182.0"></text>
</g>
<g>
<title>Monitor::set_owner_implementation(Thread*) (1 samples, 0.48%)</title><rect x="1178.7" y="1155.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="1166.0"></text>
</g>
<g>
<title>Monitor::wait_without_safepoint_check(long) (1 samples, 0.48%)</title><rect x="1184.3" y="1155.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="1166.0"></text>
</g>
<g>
<title>Monitor::set_owner_implementation(Thread*) (1 samples, 0.48%)</title><rect x="1184.3" y="1139.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="1150.0"></text>
</g>
</g>
</svg>
